- en: Generators and Iterators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器和迭代器
- en: 原文：[https://allendowney.github.io/DSIRP/generator.html](https://allendowney.github.io/DSIRP/generator.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/DSIRP/generator.html](https://allendowney.github.io/DSIRP/generator.html)
- en: '[Click here to run this chapter on Colab](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/generator.ipynb)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[点击此处在Colab上运行本章](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/generator.ipynb)'
- en: This chapter introduces generator functions, which are functions that yield
    a stream of values, rather than returning a single value.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章介绍了生成器函数，这些函数产生一系列值，而不是返回单个值。
- en: To demonstrate their use, we’ll explore Cartesian products, permutations, and
    combinations, using playing cards as an example.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示它们的用法，我们将使用扑克牌作为示例，探索笛卡尔积、排列和组合。
- en: Generators
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器
- en: As a first example, we’ll write a generator function that generates the playing
    cards in a standard 52-card deck. This example is inspired by an example in Peter
    Norvig’s [“A Concrete Introduction to Probability (using Python)”](https://nbviewer.ipython.org/url/norvig.com/ipython/Probability.ipynb).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将编写一个生成器函数，用于生成标准的52张牌组成的扑克牌。这个例子受到了Peter Norvig的[“A Concrete Introduction
    to Probability (using Python)”](https://nbviewer.ipython.org/url/norvig.com/ipython/Probability.ipynb)中的一个例子的启发。
- en: Here are Unicode strings that represent the set of suits and the set of ranks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是表示花色和等级的Unicode字符串。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And here’s a nested for loop that enumerates all pairings of a rank with a suit.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个嵌套的for循环，枚举等级和花色的所有配对。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This set of pairs is the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product)
    of the set of ranks and the set of suits.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这组对是等级和花色的笛卡尔积。
- en: The following function encapsulates the loops and uses the `yield` statement
    to generate a stream of cards.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数封装了循环，并使用`yield`语句生成一系列牌。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Because this function includes a `yield` statement, it is a generator function.
    When we call it, the return value is a generator object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个函数包含一个`yield`语句，所以它是一个生成器函数。当我们调用它时，返回值是一个生成器对象。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The generator object is iterable, so we can use `next` to get the first element
    of the stream.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器对象是可迭代的，所以我们可以使用`next`来获取流的第一个元素。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first time we call `next`, the function runs until it hits the `yield` statement.
    If we call `next` again, the function resumes from where it left off and runs
    until it hits the `yield` statement again.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用`next`时，函数运行直到遇到`yield`语句。如果我们再次调用`next`，函数将从上次离开的地方继续运行，直到再次遇到`yield`语句。
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Because `it` is iterable, we can use it in a for loop to enumerate the remaining
    pairs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`it`是可迭代的，所以我们可以在for循环中使用它来枚举剩下的对。
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When the flow of control reaches the end of the function, the generator object
    raises and exception, which causes the for loop to end.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制流到达函数的末尾时，生成器对象会引发异常，这会导致for循环结束。
- en: itertools
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: itertools
- en: The `itertools` library provides function for working with iterators, including
    `product`, which is a generator function that takes iterators as arguments at
    yields their Cartesian product. We’ll use `itertools.product` in the next few
    sections; then we’ll see how to implement it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`itertools`库提供了用于处理迭代器的函数，包括`product`，它是一个生成器函数，接受迭代器作为参数并产生它们的笛卡尔积。我们将在接下来的几节中使用`itertools.product`，然后我们将看到如何实现它。'
- en: Here’s a loop that uses `itertools.product` to generate the playing cards again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用`itertools.product`再次生成扑克牌的循环。
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Exercise:** Encapsulate the previous loop in a generator function called
    `card_generator2` that yields the playing cards. Then call your function and use
    it to print the cards.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：** 将前面的循环封装在一个名为`card_generator2`的生成器函数中，该函数生成扑克牌。然后调用您的函数并使用它打印牌。'
- en: Enumerating all pairs
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举所有对
- en: Now that we have playing cards, let’s deal a few hands. In fact, let’s deal
    all the hands.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了扑克牌，让我们发几手牌。事实上，让我们发所有的手牌。
- en: First, I’ll create two card generators.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我将创建两个牌生成器。
- en: '[PRE14]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we can use `product` to generate all pairs of cards.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`product`来生成所有的牌对。
- en: '[PRE15]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To check whether it’s working correctly, it will be useful to count the number
    of elements in an iterator, which is what `ilen` does. This idiom is discussed
    [on Stack Overflow](https://stackoverflow.com/questions/390852/is-there-any-built-in-way-to-get-the-length-of-an-iterable-in-python).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查它是否正常工作，计算迭代器中元素的数量将很有用，这就是`ilen`的作用。这个习惯用法在[Stack Overflow](https://stackoverflow.com/questions/390852/is-there-any-built-in-way-to-get-the-length-of-an-iterable-in-python)上有讨论。
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now we can use it to count the pairs of cards.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以用它来计算牌的对数。
- en: '[PRE19]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If things have gone according to plan, the number of pairs should be \(52^2\).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，对数应该是\(52^2\)。
- en: '[PRE21]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that we have to create new card iterators every time, because once they
    are used up, they behave like an empty list. Here’s what happens if we try to
    use them again.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们必须每次创建新的牌迭代器，因为一旦它们被用完，它们就会像一个空列表一样。如果我们尝试再次使用它们，会发生什么。
- en: '[PRE23]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: That’s also why we had to create two card iterators. If you create one and try
    to use it twice, it doesn’t work.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是为什么我们必须创建两个牌迭代器的原因。如果你创建一个并尝试两次使用它，它是不起作用的。
- en: '[PRE25]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: However, you can get around this limitation by calling `product` with the `repeat`
    argument, which makes it possible to use a single iterator to generate a Cartesian
    product.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以通过使用`repeat`参数调用`product`来绕过这个限制，这样可以使用单个迭代器生成笛卡尔积。
- en: '[PRE27]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Permutations
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排列
- en: In the previous section, you might have noticed that some of the hands we generated
    are impossible because they contain the same card more than once.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，您可能已经注意到我们生成的一些手牌是不可能的，因为它们包含了相同的牌超过一次。
- en: One way to solve this problem is to generate all pairs and then eliminate the
    ones that contain duplicates.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一种方法是生成所有的对，然后消除包含重复的对。
- en: '[PRE29]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Exercise:** Write a generator function called `permutations` that takes an
    iterator and and integer, `r`, as arguments. It should generate tuples that represent
    all subsets of the elements in the iterator with size `r` and no duplicates.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个名为`permutations`的生成器函数，该函数接受一个迭代器和一个整数`r`作为参数。它应该生成代表迭代器中元素的大小为`r`且没有重复的所有子集的元组。'
- en: Test your function by generating and printing all hands with two distinct cards.
    Then use `ilen` to count how many there are, and confirm that it’s `52 * 51`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成和打印所有有两张不同牌的手来测试函数。然后使用`ilen`来计算有多少个，并确认它是`52 * 51`。
- en: The `itertools` library provides a function called `permutations` that does
    the same thing.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`itertools`库提供了一个名为`permutations`的函数，它执行相同的操作。'
- en: '[PRE31]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Combinations
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合
- en: At this point we are generating legitimate hands in the sense that the same
    card never appears twice. But we end up generating the same hand more than once,
    in the sense that the order of the cards does not matter. So we consider `(card1,
    card2)` to be the same hand as `(card2, card1)`. To avoid that, we can generate
    all permutations and then filter out the ones that are not in sorted order.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们生成的手是合法的，因为相同的牌从未出现两次。但我们最终生成了相同的手，因为牌的顺序并不重要。因此，我们认为`(card1, card2)`和`(card2,
    card1)`是相同的手。为了避免这种情况，我们可以生成所有排列，然后过滤掉那些不按顺序排列的排列。
- en: It doesn’t really matter which order is considered “sorted”; it’s just a way
    to choose one ordering we consider “canonical”.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “排序”的顺序并不重要；这只是一种选择我们认为“规范”的排序方式。
- en: That’s what the following loop does.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下循环就是这样做的。
- en: '[PRE33]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Exercise:** Write a generator function called `combinations` that takes an
    iterator and and integer, `r`, as arguments. It should generate tuples that represent
    all *sorted* subsets of the elements in the iterator with size `r` and no duplicates.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个名为`combinations`的生成器函数，该函数接受一个迭代器和一个整数`r`作为参数。它应该生成代表迭代器中元素的所有*排序*子集的元组，大小为`r`且没有重复。'
- en: Test your function by generating and printing all hands with two distinct cards.
    Then use `ilen` to count how many there are, and confirm that it’s `52 * 51 /
    2`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成和打印所有有两张不同牌的手来测试函数。然后使用`ilen`来计算有多少个，并确认它是`52 * 51 / 2`。
- en: The `itertools` library provides a function called `combinations` that does
    the same thing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`itertools`库提供了一个名为`combinations`的函数，它执行相同的操作。'
- en: '[PRE36]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Generating hands
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成手牌
- en: We can use `combinations` to write a generator that yields all valid hands with
    `n` playing cards, where “valid” means that the cards are in sorted order with
    no duplicates.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`combinations`编写一个生成器，该生成器产生所有具有`n`张纸牌的有效手，其中“有效”意味着纸牌按顺序排序且没有重复。
- en: '[PRE38]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If you ever find yourself looping through an iterator and yielding all of the
    elements, you can simplify the code using `yield from`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己在迭代器中循环并产生所有元素，你可以使用`yield from`简化代码。
- en: '[PRE41]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now let’s see how many hands there are with 3, 4, and (maybe) 5 cards.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看有多少手有3、4和（也许）5张牌。
- en: '[PRE44]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: I’m not patient enough to let this one finish.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有耐心让这个完成。
- en: '[PRE48]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: But if we only care about the number of combinations, we can use [`math.comb`](https://docs.python.org/3/library/math.html).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们只关心组合的数量，我们可以使用[`math.comb`](https://docs.python.org/3/library/math.html)。
- en: '[PRE49]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How many flushes?
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有多少同花顺？
- en: In poker, a “flush” is a hand where all cards have the same suit. To check whether
    a hand is a flush, it is convenient to extract the suit part of the cards and
    make a set.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在扑克中，“同花”是所有牌都具有相同花色的手。要检查一手是否是同花，方便的方法是提取牌的花色部分并生成一个集合。
- en: '[PRE51]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '**Exercise:** Write a function called `is_flush` that takes a hand as an argument
    and returns `True` if all cards are the same suit.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个名为`is_flush`的函数，该函数以手牌作为参数，并在所有牌都是相同花色时返回`True`。'
- en: Then write a generator function called `flush_generator` that takes an integer
    `n` and return all hands with `n` cards that are flushes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后编写一个名为`flush_generator`的生成器函数，该函数接受一个整数`n`并返回所有有`n`张牌的同花顺。
- en: What fraction of hands with 3, 4, and 5 cards are flushes?
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有多少手有3、4和5张牌是同花顺？
- en: Write your own product
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写你自己的product
- en: So far we’ve been using `itertools.product`, but in the same way we wrote `permutations`
    and `combinations`, we can write our own `product`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用`itertools.product`，但是以与我们编写`permutations`和`combinations`相同的方式，我们可以编写我们自己的`product`。
- en: If there are only two iterators, we can do it with nested `for` loops.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有两个迭代器，我们可以使用嵌套的`for`循环来做到这一点。
- en: '[PRE55]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: So we can generate the cards like this.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以这样生成牌。
- en: '[PRE56]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Now, we might be tempted to write two-card hands like this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可能会尝试这样写两张牌的手。
- en: '[PRE58]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: But that doesn’t work; it only generates the first 52 pairs. Before you go on,
    see if you can figure out why.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不起作用；它只生成了前52对。在继续之前，看看你能否弄清楚为什么。
- en: We can solve this problem by making each iterator into a tuple; then we can
    loop through them more than once. The price we pay is that we have to store all
    of the elements of the iterators.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将每个迭代器转换为元组来解决这个问题；然后我们可以多次循环遍历它们。我们付出的代价是必须存储所有迭代器的元素。
- en: '[PRE60]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This version of `product2` works if the arguments are iterators.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是迭代器，`product2`的这个版本可以工作。
- en: '[PRE61]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Now let’s take it up a notch. What if you want the product of more than two
    iterators. The version of `product` we got from `itertools` can handle this case.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们提高一下。如果你想要超过两个迭代器的乘积。我们从`itertools`得到的`product`版本可以处理这种情况。
- en: '[PRE65]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '**Exercise:** Write a generator function that takes an arbitrary number of
    iterables and yields their Cartesian product. Compare the results to `itertools.product`.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个生成器函数，它接受任意数量的可迭代对象并产生它们的笛卡尔积。将结果与`itertools.product`进行比较。'
- en: 'Hint: I found it easiest to write this recursively.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：我发现递归写这个最容易。
