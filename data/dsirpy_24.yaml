- en: Level Order Traversal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层次遍历
- en: 原文：[https://allendowney.github.io/DSIRP/level_order.html](https://allendowney.github.io/DSIRP/level_order.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/DSIRP/level_order.html](https://allendowney.github.io/DSIRP/level_order.html)
- en: '[Click here to run this chapter on Colab](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/level_order.ipynb)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[点击这里在Colab上运行本章](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/level_order.ipynb)'
- en: More tree traversal
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多的树遍历
- en: 'In a previous notebook we wrote two versions of a depth-first search in a tree.
    Now we are working toward depth-first search, but we’re going to make a stop along
    the way: level-order traversal.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的笔记本中，我们编写了树中深度优先搜索的两个版本。现在我们正在朝着深度优先搜索前进，但我们将在途中停下来：层次遍历。
- en: One application of level-order traversal is searching through directories (aka
    folders) in a file system. Since directories can contain other directories, which
    can contains other directories, and so on, we can think of a file system as a
    tree.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 层次遍历的一个应用是在文件系统中搜索目录（也称为文件夹）。由于目录可以包含其他目录，其他目录可以包含其他目录，依此类推，我们可以将文件系统视为一棵树。
- en: In this notebook, we’ll start by making a tree of directories and fake data
    files. Then we’ll traverse it several ways.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本笔记本中，我们将首先创建一个目录和假数据文件的树。然后我们将以几种方式遍历它。
- en: And while we’re at it, we’ll learn about the `os` module, which provides functions
    for interacting with the operating system, especially the file system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，我们将学习`os`模块，它提供了与操作系统交互的函数，特别是文件系统。
- en: The `os` module provides `mkdir`, which creates a directory. It raises an exception
    if the directory exists, so I’m going to wrap it in a `try` statement.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`os`模块提供了`mkdir`，它创建一个目录。如果目录存在，它会引发一个异常，所以我将它包装在一个`try`语句中。'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now I’ll create the directory where we’ll put the fake data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将创建一个目录，我们将在其中放置假数据。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Inside `level_data`, I want to make a subdirectory named `2021`. It is tempting
    to write something like:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在`level_data`中，我想创建一个名为`2021`的子目录。很诱人地写一些像：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This path would work on Unix operating systems (including MacOS), but not Windows,
    which uses `\` rather than `/` between names in a path.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这条路径适用于Unix操作系统（包括MacOS），但不适用于Windows，Windows在路径中使用`\`而不是`/`。
- en: We can avoid this problem by using `os.path.join`, which joins names in a path
    with whatever character the operating system wants.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`os.path.join`来避免这个问题，它使用操作系统想要的任何字符来连接路径中的名称。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To make the fake data files, I’ll use the following function, which opens a
    file for writing and puts the word `data` into it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作假数据文件，我将使用以下函数，它打开一个文件进行写入，并把单词`data`放入其中。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So let’s start by putting a data file in `year_dir`, imagining that this file
    contains summary data for the whole year.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们从把一个数据文件放在`year_dir`开始，假设这个文件包含了整年的汇总数据。
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The following function
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数
- en: Makes a subdirectory that represents one month of the year,
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个代表一年中一个月的子目录，
- en: Makes a data file we imagine contains summary data for the month, and
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个我们想象中包含整月汇总数据的数据文件，并
- en: Calls `make_day` (below) to make subdirectories each day of the month (in a
    world where all months have 30 days).
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`make_day`（下面）来创建每个月的每一天的子目录（在一个所有月份都有30天的世界中）。
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`make_day` makes a sub-subdirectory for a given day of the month, and puts
    a data file in it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_day`为一个给定的日期创建一个子目录，并在其中放置一个数据文件。'
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The following loop makes a directory for each month.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下循环为每个月创建一个目录。
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Walking a Directory
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历目录
- en: The `os` module provides `walk`, which is a generator function that traverses
    a directory and all its subdirectories, and all their subdirectories, and so on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`os`模块提供了`walk`，它是一个生成器函数，遍历一个目录及其所有子目录，以及它们的所有子目录，依此类推。'
- en: 'For each directory, it yields:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个目录，它产生：
- en: dirpath, which is the name of the directory.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dirpath，它是目录的名称。
- en: dirnames, which is a list of subdirectories it contains, and
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录名，它是包含的子目录列表，以及
- en: filenames, which is a list of files it contains.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件名，它是包含的文件列表。
- en: Here’s how we can use it to print the paths of all files in the directory we
    created.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用它来打印我们创建的目录中所有文件的路径。
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: One quirk of `os.walk` is that the directories and files don’t appear in any
    particular order. Of course, we can store the results and sort them in whatever
    order we want.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`os.walk`的一个特点是目录和文件不会按任何特定顺序出现。当然，我们可以存储结果并按我们想要的任何顺序对其进行排序。'
- en: 'But as an exercise, we can write our own version of `walk`. We’ll need two
    functions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但作为练习，我们可以编写我们自己的`walk`版本。我们需要两个函数：
- en: '`os.listdir`, which takes a directory and list the directories and files it
    contains, and'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.listdir`，它接受一个目录并列出它包含的目录和文件，以及'
- en: '`os.path.isfile`, which takes a path and returns `True` if it is a file, and
    `False` if it is a directory or something else.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.isfile`，它接受一个路径并返回`True`，如果它是一个文件，则返回`False`，如果它是一个目录或其他东西。'
- en: You might notice that some file-related functions are in the submodule `os.path`.
    There is some logic to this organization, but it is not always obvious why a particular
    function is in this submodule or not.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到一些与文件相关的函数在子模块`os.path`中。这种组织有一些逻辑，但并不总是明显为什么特定的函数在这个子模块中或者不在其中。
- en: 'Anyway, here is a recursive version of `walk`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，这是`walk`的递归版本：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Exercise:** Write a version of `walk` called `walk_gen` that is a generator
    function; that is, it should yield the paths it finds rather than printing them.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个名为`walk_gen`的`walk`版本，它是一个生成器函数；也就是说，它应该产生它找到的路径，而不是打印它们。'
- en: You can use the following loop to test your code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下循环来测试您的代码。
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Exercise:** Write a version of `walk_gen` called `walk_dfs` that traverses
    the given directory and yields the file it contains, but it should use a stack
    and run iteratively, rather than recursively.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个名为`walk_dfs`的`walk_gen`版本，它遍历给定的目录并产生它包含的文件，但它应该使用堆栈并以迭代方式运行，而不是递归方式。'
- en: You can use the following loop to test your code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下循环来测试您的代码。
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that the order the files are discovered is “depth-first”. For example,
    it yields all files from the first month before any of the files for the second
    month.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件被发现的顺序是“深度优先”的。例如，它在任何第二个月的文件之前产生了第一个月的所有文件。
- en: An alternative is a level-order traversal, which yields all files at the first
    level (the annual summary), then all the files at the second level (the monthly
    summaries), then the files at the third level.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是按级别顺序遍历，它首先产生第一级（年度摘要）的所有文件，然后产生第二级（月度摘要）的所有文件，然后是第三级的文件。
- en: 'To implement a level-order traversal, we can make a minimal change to `walk_dfs`:
    replace the stack with a FIFO queue. To implement the queue efficiently, we can
    use `collections.deque`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现按级别顺序遍历，我们可以对`walk_dfs`进行最小的更改：用FIFO队列替换堆栈。为了有效地实现队列，我们可以使用`collections.deque`。
- en: '**Exercise:** Write a generator function called `walk_level` that takes a directory
    and yields its files in level order.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个名为`walk_level`的生成器函数，它接受一个目录并按级别顺序产生其文件。'
- en: Use the following loop to test your code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下循环来测试您的代码。
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you are looking for a file in a large file system, a level-order search might
    be useful if you think the file is more likely to be near the root, rather than
    deep in a nested subdirectory.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在大型文件系统中寻找文件，如果您认为文件更可能靠近根目录而不是深入嵌套的子目录中，按级别顺序搜索可能会有用。
- en: '*Data Structures and Information Retrieval in Python*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python中的数据结构和信息检索*'
- en: Copyright 2021 Allen Downey
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2021 Allen Downey
- en: 'License: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证：[知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议](https://creativecommons.org/licenses/by-nc-sa/4.0/)
