- en: Quiz 6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验6
- en: 原文：[https://allendowney.github.io/DSIRP/quiz06.html](https://allendowney.github.io/DSIRP/quiz06.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/DSIRP/quiz06.html](https://allendowney.github.io/DSIRP/quiz06.html)
- en: 'BEFORE YOU START THIS QUIZ:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此测验之前：
- en: Click on “Copy to Drive” to make a copy of the quiz,
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“复制到驱动器”以复制测验，
- en: Click on “Share”,
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“共享”,
- en: Click on “Change” and select “Anyone with this link can edit”
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“更改”，然后选择“任何拥有此链接的人都可以编辑”
- en: Click “Copy link” and
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“复制链接”和
- en: Paste the link into [this Canvas assignment](https://canvas.olin.edu/courses/313/assignments/5138).
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将链接粘贴到[此Canvas作业](https://canvas.olin.edu/courses/313/assignments/5138)中。
- en: This quiz is open notes, open internet.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此测验是开放笔记，开放互联网。
- en: You can ask for help from the instructor, but not from anyone else.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以向讲师寻求帮助，但不能向其他人寻求帮助。
- en: You can use code you find on the internet, but if you use more than a couple
    of lines from a single source, you should attribute the source.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用在互联网上找到的代码，但是如果您从单个来源使用了多行代码，您应该注明出处。
- en: A tree of sequences
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列树
- en: Suppose you have a large number of DNA sequences, represented using strings
    containing the characters `A`, `C`, `G`, and `T`, which are the bases that make
    up DNA.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有大量的DNA序列，使用包含字符`A`、`C`、`G`和`T`的字符串表示，这些是构成DNA的碱基。
- en: One way to store these sequences is in a tree where each node has four children,
    one for each base. Here’s a class definition for such a node.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 存储这些序列的一种方法是在树中，其中每个节点有四个子节点，每个子节点代表一个碱基。以下是这样一个节点的类定义。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The instance variables are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实例变量是：
- en: '`children`, which is a list of four `Node` objects, where `None` indicates
    that a child is missing.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`children`，这是一个包含四个`Node`对象的列表，其中`None`表示缺少一个子节点。'
- en: '`end`: which is a `bool` that indicates whether this `Node` represents the
    end of a sequence.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end`：这是一个`bool`，表示这个`Node`是否代表序列的结尾。'
- en: I’ll use the following dictionary to map from each base to its index in the
    list of children.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用以下字典将每个碱基映射到其在子列表中的索引。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following function inserts a new sequence into the tree.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将一个新序列插入到树中。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As an example, here’s a tree that contains only one sequence, `CA`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个只包含一个序列`CA`的树。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The root of the tree has a single child, at index `1`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 树的根有一个子节点，索引为`1`。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The child has a single child, at index `0`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该子节点有一个子节点，索引为`0`。
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the grandchild, `end` is `True`, which indicates that there is a sequence
    in the tree that ends at this node.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在孙子中，`end`为`True`，这表示树中有一个以此节点结尾的序列。
- en: Here’s an example with more sequences.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含更多序列的示例。
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I’ll use NetworkX and EoN to draw this tree.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用NetworkX和EoN来绘制这棵树。
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![_images/quiz06_23_0.png](../Images/aa2680ea88fb22b65563438138db7846.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![_images/quiz06_23_0.png](../Images/aa2680ea88fb22b65563438138db7846.png)'
- en: Question 1
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1
- en: Write a function called `find` that takes as parameters
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`find`的函数，它接受以下参数
- en: A `Node` that represents the root of a tree and
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表树的根的`Node`和
- en: A string representing a sequence of bases.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示碱基序列的字符串。
- en: It should return `True` if the sequence appears in the tree, and `False` otherwise.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果序列出现在树中，则应返回`True`，否则返回`False`。
- en: 'You can use the following examples to test your code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下示例来测试您的代码：
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Question 2
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题2
- en: 'Write a function called `find_all_rec` that takes as parameters:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`find_all_rec`的函数，它接受以下参数：
- en: A `Node` in a tree.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树中的一个`Node`。
- en: A path that indicates the sequence of bases from the root to the current `Node`.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示从根到当前`Node`的碱基序列的路径。
- en: A list of sequences.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个序列列表。
- en: This function should traverse the tree and add to the list all of the complete
    sequences it discovers.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数应该遍历树并将它发现的所有完整序列添加到列表中。
- en: 'Hint: Review `make_table` from `huffman.ipynb`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：查看`huffman.ipynb`中的`make_table`。
- en: You can use the following example to test your code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下示例来测试您的代码。
- en: '[PRE26]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The result should be a list with the following elements, not necessarily in
    this order
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该是一个包含以下元素的列表，不一定按照这个顺序
- en: '[PRE28]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Question 3
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题3
- en: Write a function called `find_all` that takes a `Node` and a sequence of bases.
    It should traverse the tree and return a list that contains all sequences in the
    tree that begin with the given prefix.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个名为`find_all`的函数，它接受一个`Node`和一系列碱基。它应该遍历树并返回一个包含以给定前缀开头的树中所有序列的列表。
- en: 'Note: You can use `find_all_rec` as part of your solution even if your answer
    to the previous question does not work.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：即使您对上一个问题的答案不起作用，您仍然可以将`find_all_rec`作为解决方案的一部分使用。
- en: You can use the following examples to test your code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下示例来测试您的代码。
- en: '[PRE29]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Question 4
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题4
- en: Suppose we write a more general version of `Node.__init__` that takes `end`
    and `children` as optional parameters.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们编写一个更通用的`Node.__init__`版本，它将`end`和`children`作为可选参数。
- en: '[PRE35]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And we write a version of `insert` that uses `BadNode`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写一个使用`BadNode`的`insert`的版本：
- en: '[PRE36]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we use the new versions to make a tree, like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用新版本来构建一棵树，就像这样：
- en: '[PRE37]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: It seems to work. But if we draw the tree, we get a `RecursionError`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎可以工作。但是如果我们绘制树，就会得到`RecursionError`。
- en: '[PRE38]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the cell that defines `BadNode`, write a comment that explains what the problem
    is, and then fix it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义`BadNode`的单元格中，编写一个解释问题所在的注释，然后修复它。
- en: 'Note: Your fixed version should still accept `end` and `children` as optional
    parameters.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：您的修复版本仍应接受`end`和`children`作为可选参数。
- en: '*Data Structures and Information Retrieval in Python*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的数据结构和信息检索
- en: Copyright 2021 Allen Downey
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有2021年Allen Downey
- en: 'License: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 许可：[知识共享署名-非商业-相同方式共享4.0国际许可协议](https://creativecommons.org/licenses/by-nc-sa/4.0/)
