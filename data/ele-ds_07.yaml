- en: Dictionaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: 原文：[https://allendowney.github.io/ElementsOfDataScience/05_dictionaries.html](https://allendowney.github.io/ElementsOfDataScience/05_dictionaries.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://allendowney.github.io/ElementsOfDataScience/05_dictionaries.html](https://allendowney.github.io/ElementsOfDataScience/05_dictionaries.html)'
- en: '[Click here to run this notebook on Colab](https://colab.research.google.com/github/AllenDowney/ElementsOfDataScience/blob/master/05_dictionaries.ipynb)
    or [click here to download it](https://github.com/AllenDowney/ElementsOfDataScience/raw/master/05_dictionaries.ipynb).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[单击此处在Colab上运行此笔记本](https://colab.research.google.com/github/AllenDowney/ElementsOfDataScience/blob/master/05_dictionaries.ipynb)
    或 [单击此处下载](https://github.com/AllenDowney/ElementsOfDataScience/raw/master/05_dictionaries.ipynb)。'
- en: In the previous chapter we used a `for` loop to read a file and count the words.
    In this chapter, you’ll learn about a new type called a **dictionary**, and we’ll
    use it to count the number of unique words and the number of times each one appears.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用`for`循环来读取文件并计算单词的数量。在本章中，您将学习一种称为**字典**的新类型，并将用它来计算唯一单词的数量以及每个单词出现的次数。
- en: You will also see how to select an element from a sequence (tuple, list, or
    array). And you will learn a little about Unicode, which is used to represent
    letters, numbers, and punctuation for almost every language in the world.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将学习如何从序列（元组、列表或数组）中选择一个元素。您还将学习一些关于Unicode的知识，它用于表示世界上几乎每种语言的字母、数字和标点符号。
- en: Indexing
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引
- en: 'Suppose you have a variable named `t` that refers to a list or tuple. You can
    select an element using the **bracket operator**, `[]`. For example, here’s a
    tuple of strings:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个名为`t`的变量，它引用一个列表或元组。您可以使用**方括号运算符**`[]`选择一个元素。例如，这是一个字符串元组：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To select the first element, we put `0` in brackets:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择第一个元素，我们将`0`放在括号中：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To select the second element, we put `1` in brackets:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择第二个元素，我们将`1`放在括号中：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To select the third element, we put `2` in brackets:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择第三个元素，我们将`2`放在括号中：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The number in brackets is called an **index** because it indicates which element
    we want. Tuples and lists use zero-based numbering; that is, the index of the
    first element is 0\. Some other programming languages use one-based numbering.
    There are pros and cons of both systems (see [https://en.wikipedia.org/wiki/Zero-based_numbering](https://en.wikipedia.org/wiki/Zero-based_numbering)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的数字称为**索引**，因为它表示我们想要的元素。元组和列表使用从零开始的编号；也就是说，第一个元素的索引是0。其他一些编程语言使用从一开始的编号。这两种系统都有利弊（参见[https://en.wikipedia.org/wiki/Zero-based_numbering](https://en.wikipedia.org/wiki/Zero-based_numbering)）。
- en: 'The index in brackets can also be a variable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的索引也可以是一个变量：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Or an expression with variables, values, and operators:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者是一个包含变量、值和操作符的表达式：
- en: '[PRE9]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: But if the index goes past the end of the list or tuple, you get an error.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果索引超出了列表或元组的末尾，就会出错。
- en: Also, the index has to be an integer; if it is any other type, you get an error.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，索引必须是整数；如果是其他类型，就会出错。
- en: '**Exercise:** You can use negative integers as indices. Try using `-1` and
    `-2` as indices, and see if you can figure out what they do.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**您可以使用负整数作为索引。尝试使用`-1`和`-2`作为索引，看看能否弄清它们的作用。'
- en: Dictionaries
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典
- en: 'A dictionary is similar to a tuple or list, but in a dictionary, the index
    can be almost any type, not just an integer. We can create an empty dictionary
    like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 字典类似于元组或列表，但在字典中，索引可以是几乎任何类型，而不仅仅是整数。我们可以这样创建一个空字典：
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we can add elements like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以这样添加元素：
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, the indices are the strings, `'one'` and `'two'` If you display
    the dictionary, it shows each index and the corresponding value.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，索引是字符串`'one'`和`'two'`。如果显示字典，它会显示每个索引和相应的值。
- en: '[PRE13]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Instead of creating an empty dictionary and then adding elements, you can create
    a dictionary and specify the elements at the same time:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与其创建一个空字典，然后添加元素，不如创建一个字典并同时指定元素：
- en: '[PRE15]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When we are talking about dictionaries, an index is usually called a **key**.
    In this example, the keys are strings and the corresponding values are integers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论字典时，索引通常被称为**键**。在这个例子中，键是字符串，相应的值是整数。
- en: A dictionary is also called a **map**, because it represents correspondence
    or “mapping”, between keys and values. So we might say that this dictionary maps
    from English number names to the corresponding integers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 字典也被称为**映射**，因为它表示键和值之间的对应关系或“映射”。因此，我们可以说这个字典将英文数字名称映射到相应的整数。
- en: 'You can use the bracket operator to select an element from a dictionary, like
    this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用方括号运算符从字典中选择一个元素，就像这样：
- en: '[PRE17]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: But don’t forget the quotation marks. Without them, Python looks for a variable
    named `two` and doesn’t find one.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要忘记引号。没有引号，Python会寻找一个名为`two`的变量，但找不到。
- en: 'To check whether a particular key is in a dictionary, you can use the special
    word `in`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查特定的键是否在字典中，可以使用特殊单词`in`：
- en: '[PRE19]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Because the word `in` is an operator in Python, you can’t use it as a variable
    name.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因为单词`in`是Python中的一个操作符，所以不能将其用作变量名。
- en: 'If a key is already in a dictionary, adding it again has no effect:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个键已经在字典中，再次添加它不会产生任何效果：
- en: '[PRE23]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'But you can change the value associated with a key:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但是可以更改与键关联的值：
- en: '[PRE27]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can loop through the keys in a dictionary like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以这样遍历字典中的键：
- en: '[PRE29]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you want the keys and the values, one way to get them is to loop through
    the keys and look up the values:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要获取键和值，一种方法是遍历键并查找值：
- en: '[PRE31]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Or you can loop through both at the same time, like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以同时循环遍历两者，就像这样：
- en: '[PRE33]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `items` method loops through the key-value pairs in the dictionary; each
    time through the loop, they are assigned to `key` and `value`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`items`方法遍历字典中的键-值对；每次循环时，它们被分配给`key`和`value`。'
- en: '**Exercise:** Make a dictionary with the integers `1`, `2`, and `3` as keys
    and strings as values. The strings should be the words “one”, “two”, and “three”
    or their equivalents in any language you know.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**创建一个字典，其中整数`1`、`2`和`3`作为键，字符串作为值。字符串应该是“one”、“two”和“three”或您所知道的任何其他语言中的等价词。'
- en: Write a loop that prints just the values from the dictionary.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个循环，仅打印字典中的值。
- en: Counting Unique Words
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算唯一单词
- en: In the previous chapter we downloaded *War and Peace* from Project Gutenberg
    and counted the number of lines and words. Now that we have dictionaries, we can
    also count the number of unique words and the number of times each one appears.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们从Project Gutenberg下载了*战争与和平*并计算了行数和单词数。现在我们有了字典，我们还可以计算唯一单词的数量以及每个单词出现的次数。
- en: As we did in the previous chapter, we can read the text of *War and Peace* and
    count the number of words.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在上一章中所做的那样，我们可以读取*战争与和平*的文本并计算单词的数量。
- en: '[PRE35]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To count the number of unique words, we’ll loop through the words in each line
    and add them as keys in a dictionary:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算唯一单词的数量，我们将循环遍历每行中的单词，并将它们作为字典中的键添加：
- en: '[PRE37]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is the first example we’ve seen with one loop **nested** inside another.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们看到的第一个例子，一个循环**嵌套**在另一个循环中。
- en: The outer loop runs through the lines in the file.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部循环遍历文件中的行。
- en: The inner loops runs through the words in each line.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部循环遍历每行中的单词。
- en: Each time through the inner loop, we add a word as a key in the dictionary,
    with the value 1\. If the same word appears more than once, it gets added to the
    dictionary again, which has no effect. So the dictionary contains only one copy
    of each unique word in the file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每次内部循环时，我们将一个单词作为字典中的键添加，值为1。如果同一个单词出现多次，它会再次添加到字典中，但不会产生影响。因此，字典中只包含文件中每个唯一单词的一个副本。
- en: 'At the end of the loop, we can display the first 10 keys:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环结束时，我们可以显示前10个键：
- en: '[PRE38]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The dictionary contains all the words in the file, in order of first appearance.
    But each word only appears once, so the number of keys is the number of unique
    words:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 字典按照单词在文件中出现的顺序包含了所有单词。但是每个单词只出现一次，所以键的数量就是唯一单词的数量：
- en: '[PRE40]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: It looks like there are about 42,000 different words in the book, which is substantially
    less than the total number of words, about 560,000. But that’s not quite right,
    because we have not taken into account capitalization and punctuation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这本书大约有42,000个不同的单词，这远少于总单词数，大约为560,000。但这并不完全正确，因为我们没有考虑大小写和标点符号。
- en: '**Exercise:** Before we deal with that problem, let’s practice with nested
    loops, that is, one loop inside another. Suppose you have a list of words, like
    this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**在解决这个问题之前，让我们练习嵌套循环，也就是一个循环嵌套在另一个循环中。假设你有一个单词列表，就像这样：'
- en: '[PRE42]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Write a nested loop that iterates through each word in the list, and each letter
    in each word, and prints the letters on separate lines.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个嵌套循环，遍历列表中的每个单词和每个单词中的每个字母，并将字母打印在单独的行上。
- en: Dealing with Capitalization
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理大小写
- en: 'When we count unique words, we probably want to treat `The` and `the` as the
    same word. We can do that by converting all words to lower case, using the `lower`
    function:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们计算唯一单词时，我们可能希望将`The`和`the`视为相同的单词。我们可以通过使用`lower`函数将所有单词转换为小写来实现：
- en: '[PRE43]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`lower` creates a new string; it does not modify the original string.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower`创建一个新字符串；它不会修改原始字符串。'
- en: '[PRE45]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'However, you can assign the new string back to the existing variable, like
    this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，你可以将新字符串赋回给现有变量，就像这样：
- en: '[PRE47]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now if we can display the new value of `word`, we get the lowercase version:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们可以显示`word`的新值，我们会得到小写版本：
- en: '[PRE48]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '**Exercise:** Modify the previous loop so it makes a lowercase version of each
    word before adding it to the dictionary. How many unique words are there, if we
    ignore the difference between uppercase and lowercase?'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**修改前面的循环，使其在将单词添加到字典之前制作单词的小写版本。如果我们忽略大写和小写之间的差异，有多少个唯一单词？'
- en: Removing Punctuation
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除标点符号
- en: 'To remove punctuation from the words, we can use `strip`, which removes specified
    characters from the beginning and end of a string. Here’s an example:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从单词中删除标点符号，我们可以使用`strip`，它会从字符串的开头和结尾删除指定的字符。这里有一个例子：
- en: '[PRE50]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In this example, `strip` removes all instances of `a` and `b` from the beginning
    and end of the word, but not from the middle. But note that it makes a new word;
    it doesn’t modify the original:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`strip`会从单词的开头和结尾删除所有`a`和`b`的实例，但不会删除中间的。但请注意，它会生成一个新单词；它不会修改原始单词：
- en: '[PRE52]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: To remove punctuation, we can use the `string` library, which provides a variable
    named `punctuation`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了删除标点符号，我们可以使用`string`库，它提供了一个名为`punctuation`的变量。
- en: '[PRE54]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '`string.punctuation` contains the most common punctuation marks, but as we’ll
    see, not all of them. Nevertheless, we can use it to handle most cases. Here’s
    an example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`string.punctuation`包含最常见的标点符号，但正如我们将看到的那样，并非所有标点符号都包含在内。尽管如此，我们可以使用它来处理大多数情况。这里有一个例子：'
- en: '[PRE56]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '`strip` removes the period at the end of `wrong`, but not the apostrophes in
    `It''s`, `don''t` and `what''s`. So that’s good, but we have one more problem
    to solve. Here’s another line from the book.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`strip`会删除`wrong`末尾的句号，但不会删除`It''s`、`don''t`和`what''s`中的撇号。所以这很好，但我们还有一个问题要解决。这是书中的另一行。'
- en: '[PRE58]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Here’s what happens when we try to remove the punctuation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试删除标点符号时会发生什么。
- en: '[PRE59]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: It removes the comma after `anyone`, but not the period and quotation mark after
    `them`. The problem is that this kind of quotation mark is not in `string.punctuation`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它删除了`anyone`后面的逗号，但没有删除`them`后面的句号和引号。问题在于这种引号不在`string.punctuation`中。
- en: To fix this problem, we’ll use the following loop, which
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将使用以下循环
- en: Reads the file and builds a dictionary that contains all punctuation marks that
    appear in the book, then
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取文件并构建一个包含书中所有标点符号的字典，然后
- en: It uses the `join` function to concatenate the keys of the dictionary in a single
    string.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使用`join`函数将字典的键连接成一个字符串。
- en: You don’t have to understand everything about how it works, but you should read
    it and see how much you can figure out. You can read the documentation of the
    `unicodedata` library here at [https://docs.python.org/3/library/unicodedata.html](https://docs.python.org/3/library/unicodedata.html).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必理解它的所有工作原理，但你应该阅读它并看看你能理解多少。你可以在[https://docs.python.org/3/library/unicodedata.html](https://docs.python.org/3/library/unicodedata.html)这里阅读`unicodedata`库的文档。
- en: '[PRE61]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The result is a string containing all of the punctuation characters that appear
    in the document, in the order they first appear.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个包含文档中出现的所有标点字符的字符串，按它们首次出现的顺序排列。
- en: '**Exercise:** Modify the word-counting loop from the previous section to convert
    words to lower case *and* strip punctuation before adding them to the dictionary.
    Now how many unique words are there?'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：** 修改前一节中的单词计数循环，将单词转换为小写，并在将其添加到字典之前去除标点。现在有多少个唯一单词？'
- en: 'Optional: You might want to skip over the front matter and start with the text
    of Chapter 1, and skip over the license at the end, as we did in the previous
    chapter.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可选：你可能想跳过前言，直接从第1章的文本开始，跳过结尾的许可证，就像我们在上一章中做的那样。
- en: Counting Word Frequencies
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算单词频率
- en: In the previous section we counted the number of unique words, but we might
    also want to know how often each word appears. Then we can find the most common
    and least common words in the book. To count the frequency of each word, we’ll
    make a dictionary that maps from each word to the number of times it appears.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们计算了唯一单词的数量，但我们可能还想知道每个单词出现的频率。然后我们可以找到书中最常见和最不常见的单词。为了计算每个单词的频率，我们将创建一个将每个单词映射到其出现次数的字典。
- en: Here’s an example that loops through a string and counts the number of times
    each letter appears.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个循环遍历字符串并计算每个字母出现次数的示例。
- en: '[PRE63]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The `if` statement here uses a feature we have not seen before, an `else` clause.
    Here’s how it works.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`if`语句使用了一个我们以前没有见过的特性，即`else`子句。以下是它的工作原理。
- en: First, it checks whether the letter, `x`, is already a key in the dictionary,
    `letter_counts`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它检查字母`x`是否已经是字典`letter_counts`中的一个键。
- en: If so, it runs the first statement, `letter_counts[x] += 1`, which increments
    the value associated with the letter.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是这样，它会运行第一个语句`letter_counts[x] += 1`，这会增加与该字母关联的值。
- en: Otherwise, it runs the second statement, `letter_counts[x] = 1`, which adds
    `x` as a new key, with the value `1` indicating that we have seen the new letter
    once.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，它会运行第二个语句`letter_counts[x] = 1`，这会将`x`作为一个新的键，值为`1`，表示我们已经看到了这个新字母一次。
- en: The result is a dictionary that maps from each letter to the number of times
    it appears.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个将每个字母映射到其出现次数的字典。
- en: 'To get the most common letters, we can use a `Counter`, which is similar to
    a dictionary. To use it, we have to import a library called `collections`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最常见的字母，我们可以使用`Counter`，它类似于字典。要使用它，我们必须导入一个名为`collections`的库：
- en: '[PRE65]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Then we use `collections.Counter` to convert the dictionary to a `Counter`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`collections.Counter`将字典转换为`Counter`：
- en: '[PRE66]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`Counter` provides a function called `most_common` we can use to get the most
    common characters:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`Counter`提供了一个名为`most_common`的函数，我们可以使用它来获取最常见的字符：'
- en: '[PRE68]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The result is a list of tuples, where each tuple contains a character and an
    integer.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个元组列表，其中每个元组包含一个字符和一个整数。
- en: '**Exercise:** Modify the loop from the previous exercise to count the frequency
    of the words in *War and Peace*; then print the 20 most common words and the number
    of times each one appears.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：** 修改前一个练习中的循环，计算《战争与和平》中单词的频率；然后打印出最常见的20个单词以及每个单词出现的次数。'
- en: '**Exercise:** You can run `most_common` with no value in parentheses, like
    this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：** 你可以像这样在括号中不加值地运行`most_common`：'
- en: '[PRE70]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The result is a list of tuples, with one tuple for every unique word in the
    book. Assign the result to a variable so it doesn’t get displayed. Then answer
    the following questions:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个元组列表，其中每个唯一单词都有一个元组。将结果分配给一个变量，这样它就不会被显示出来。然后回答以下问题：
- en: 'How many times does the #1 ranked word appear (that is, the first element of
    the list)?'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排名第1的单词出现了多少次（即列表的第一个元素）？
- en: 'How many times does the #10 ranked word appear?'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排名第10的单词出现了多少次？
- en: 'How many times does the #100 ranked word appear?'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排名第100的单词出现了多少次？
- en: 'How many times does the #1000 ranked word appear?'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排名第1000的单词出现了多少次？
- en: 'How many times does the #10000 ranked word appear?'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排名第10000的单词出现了多少次？
- en: Do you see a pattern in the results? We will explore this pattern more in the
    next chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你在结果中看到了模式吗？我们将在下一章中更多地探索这个模式。
- en: '**Exercise:** Write a loop that counts how many words appear 200 times. What
    are they? How many words appear 100 times, 50 times, and 20 times?'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：** 编写一个循环，计算出现200次的单词有多少个。它们是什么？出现100次、50次和20次的单词有多少个？'
- en: '**Optional:** If you know how to define a function, write a function that takes
    a `Counter` and a frequency as arguments, prints all words with that frequency,
    and returns the number of words with that frequency.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**可选：** 如果你知道如何定义一个函数，可以编写一个函数，该函数接受`Counter`和频率作为参数，打印出所有具有该频率的单词，并返回具有该频率的单词数量。'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduces dictionaries, which represent a collection of keys and
    values. We used a dictionary to count the number of unique words in a file and
    the number of times each one appears.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了字典，它表示键和值的集合。我们使用字典来计算文件中唯一单词的数量以及每个单词出现的次数。
- en: It also introduces the bracket operator, which selects an element from a list
    or tuple, or looks up a key in a dictionary and finds the corresponding value.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它还介绍了括号运算符，它选择列表或元组中的一个元素，或者在字典中查找一个键并找到相应的值。
- en: We saw some new methods for working with strings, including `lower` and `strip`.
    Finally, we used the `unicodedata` library to identify characters that are considered
    punctuation.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了一些处理字符串的新方法，包括`lower`和`strip`。最后，我们使用`unicodedata`库来识别被视为标点符号的字符。
