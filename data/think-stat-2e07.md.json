["```py\nclass NormalPdf(Pdf):\n\n    def __init__(self, mu=0, sigma=1, label=''):\n        self.mu = mu\n        self.sigma = sigma\n        self.label = label\n\n    def Density(self, xs):\n        return scipy.stats.norm.pdf(xs, self.mu, self.sigma)\n\n    def GetLinspace(self):\n        low, high = self.mu-3*self.sigma, self.mu+3*self.sigma\n        return np.linspace(low, high, 101) \n```", "```py\n>>> mean, var = 163, 52.8\n>>> std = math.sqrt(var)\n>>> pdf = thinkstats2.NormalPdf(mean, std)\n>>> pdf.Density(mean + std)\n0.0333001 \n```", "```py\n>>> thinkplot.Pdf(pdf, label='normal')\n>>> thinkplot.Show() \n```", "```py\n>>> pmf = pdf.MakePmf() \n```", "```py\nclass EstimatedPdf(Pdf):\n\n    def __init__(self, sample):\n        self.kde = scipy.stats.gaussian_kde(sample)\n\n    def Density(self, xs):\n        return self.kde.evaluate(xs) \n```", "```py\n>>> sample = [random.gauss(mean, std) for i in range(500)]\n>>> sample_pdf = thinkstats2.EstimatedPdf(sample)\n>>> thinkplot.Pdf(sample_pdf, label='sample KDE') \n```", "```py\n# class _DictWrapper\n\n    def Incr(self, x, term=1):\n        self.d[x] = self.d.get(x, 0) + term\n\n    def Mult(self, x, factor):\n        self.d[x] = self.d.get(x, 0) * factor\n\n    def Remove(self, x):\n        del self.d[x] \n```", "```py\n# class Pmf\n\n    def Normalize(self, fraction=1.0):\n        total = self.Total()\n        if total == 0.0:\n            raise ValueError('Total probability is zero.')\n\n        factor = float(fraction) / total\n        for x in self.d:\n            self.d[x] *= factor\n\n        return total \n```", "```py\n self.xs, freqs = zip(*sorted(dw.Items()))\n        self.ps = np.cumsum(freqs, dtype=np.float)\n        self.ps /= self.ps[-1] \n```", "```py\n# class Cdf\n    def Prob(self, x):\n        if x < self.xs[0]:\n            return 0.0\n        index = bisect.bisect(self.xs, x)\n        p = self.ps[index - 1]\n        return p \n```", "```py\n# class Cdf\n    def Value(self, p):\n        if p < 0 or p > 1:\n            raise ValueError('p must be in range [0, 1]')\n\n        index = bisect.bisect_left(self.ps, p)\n        return self.xs[index] \n```", "```py\n# class Cdf\n    def Items(self):\n        a = self.ps\n        b = np.roll(a, 1)\n        b[0] = 0\n        return zip(self.xs, a-b) \n```", "```py\ndef RawMoment(xs, k):\n    return sum(x**k for x in xs) / len(xs) \n```", "```py\ndef CentralMoment(xs, k):\n    mean = RawMoment(xs, 1)\n    return sum((x - mean)**k for x in xs) / len(xs) \n```", "```py\ndef StandardizedMoment(xs, k):\n    var = CentralMoment(xs, 2)\n    std = math.sqrt(var)\n    return CentralMoment(xs, k) / std**k\n\ndef Skewness(xs):\n    return StandardizedMoment(xs, 3) \n```", "```py\ndef Median(xs):\n    cdf = thinkstats2.Cdf(xs)\n    return cdf.Value(0.5)\n\ndef PearsonMedianSkewness(xs):\n    median = Median(xs)\n    mean = RawMoment(xs, 1)\n    var = CentralMoment(xs, 2)\n    std = math.sqrt(var)\n    gp = 3 * (mean - median) / std\n    return gp \n```", "```py\n live, firsts, others = first.MakeFrames()\n    data = live.totalwgt_lb.dropna()\n    pdf = thinkstats2.EstimatedPdf(data)\n    thinkplot.Pdf(pdf, label='birth weight') \n```", "```py\n df = brfss.ReadBrfss(nrows=None)\n    data = df.wtkg2.dropna()\n    pdf = thinkstats2.EstimatedPdf(data)\n    thinkplot.Pdf(pdf, label='adult weight') \n```"]