- en: FFT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FFT
- en: 原文：[https://allendowney.github.io/DSIRP/fft.html](https://allendowney.github.io/DSIRP/fft.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/DSIRP/fft.html](https://allendowney.github.io/DSIRP/fft.html)
- en: '[Click here to run this chapter on Colab](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/fft.ipynb)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[单击此处在Colab上运行本章](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/fft.ipynb)'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Discrete Fourier Transform
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离散傅里叶变换
- en: 'According to our friends at [Wikipedia](https://en.wikipedia.org/wiki/Discrete_Fourier_transform):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在[Wikipedia](https://en.wikipedia.org/wiki/Discrete_Fourier_transform)上的朋友：
- en: The discrete Fourier transform transforms a sequence of \(N\) complex numbers
    \({\displaystyle \mathbf{x} =x_{0},x_{1},\ldots ,x_{N-1}}\) into another sequence
    of complex numbers, \({\displaystyle \mathbf{X} =X_{0},X_{1},\ldots ,X_{N-1},}\)
    which is defined by $\(X_k = \sum_{n=0}^N x_n \cdot e^{-i 2 \pi k n / N} \)$
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 离散傅里叶变换将\(N\)个复数\({\displaystyle \mathbf{x} =x_{0},x_{1},\ldots ,x_{N-1}}\)序列转换为另一个复数序列\({\displaystyle
    \mathbf{X} =X_{0},X_{1},\ldots ,X_{N-1},}\)，其定义为$\(X_k = \sum_{n=0}^N x_n \cdot
    e^{-i 2 \pi k n / N} \)$
- en: 'Notice:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: \(X\) and \(x\) are the same length, \(N\).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(X\)和\(x\)的长度相同，为\(N\)。
- en: \(n\) is the index that specifies an element of \(x\), and
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(n\)是指定\(x\)元素的索引，和
- en: \(k\) is the index that specifies an element of \(X\).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(k\)是指定\(X\)元素的索引。
- en: Let’s start with a small example and use Numpy’s implementation of FFT to compute
    the DFT.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个小例子开始，使用Numpy的FFT实现来计算DFT。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we know what the answer is, let’s compute it ourselves.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道答案是什么，让我们自己计算一下。
- en: Here’s the expression that computes one element of \(X\).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是计算\(X\)的一个元素的表达式。
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Wrapping this code in a function makes the roles of `k` and `n` clearer:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码包装在一个函数中可以使`k`和`n`的作用更清晰：
- en: '`k` is the parameter that specifies which element of the DFT to compute, and'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k`是指定要计算DFT的元素的参数，和'
- en: '`n` is the loop variable we use to compute the summation.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`是我们用来计算总和的循环变量。'
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Usually we compute \(X\) all at once, so we can wrap `dft_k` in another function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们一次计算\(X\)，所以我们可以将`dft_k`包装在另一个函数中：
- en: '[PRE11]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And that’s what we got from Numpy.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们从Numpy得到的。
- en: Timing DFT
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计时DFT
- en: Let’s see what the performance of `dft` looks like.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`dft`的性能如何。
- en: '[PRE14]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![_images/fft_20_1.png](../Images/f868c70d4018f50996e36119f6b0739d.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![_images/fft_20_1.png](../Images/f868c70d4018f50996e36119f6b0739d.png)'
- en: Implementing FFT
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现FFT
- en: The key to the FFT algorithm is the [Danielson-Lanczos lemma](https://mathworld.wolfram.com/Danielson-LanczosLemma.html),
    which says
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: FFT算法的关键是[Danielson-Lanczos引理](https://mathworld.wolfram.com/Danielson-LanczosLemma.html)，它说
- en: \( X_k = E_k + e^{-i 2 \pi n / N} O_k \)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: \( X_k = E_k + e^{-i 2 \pi n / N} O_k \)
- en: Where
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 哪里
- en: \(E\) is the FFT of the even elements of \(x\), and
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(E\)是\(x\)的偶数元素的FFT，和
- en: \(O\) is the DFT of the odd elements of \(x\).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(O\)是\(x\)的奇数元素的DFT。
- en: Before we can translate this expression into code, we have to deal with a gotcha.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以将这个表达式转换成代码之前，我们必须处理一个问题。
- en: Remember that, if the length of \(x\) is \(N\), the length of \(X\) is also
    \(N\).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果\(x\)的长度为\(N\)，那么\(X\)的长度也是\(N\)。
- en: If we select the even elements of \(x\), the result is a sequence with length
    \(N/2\), which means that the length of \(E\) is \(N/2\). And the same for \(O\).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择\(x\)的偶数元素，结果是一个长度为\(N/2\)的序列，这意味着\(E\)的长度为\(N/2\)。\(O\)也是一样。
- en: But if \(k\) goes from \(0\) up to \(N-1\), what do we do when it exceeds \(N/2-1\)?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果\(k\)从\(0\)增加到\(N-1\)，当它超过\(N/2-1\)时，我们该怎么办？
- en: Fortunately, the DFT repeats itself so, \(X_N\) is the same as \(X_0\). That
    means we can extend \(E\) and \(O\) to be the same length as \(X\) just by repeating
    them. And we can do that with the Numpy function `tile`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，DFT是重复的，所以\(X_N\)和\(X_0\)是相同的。这意味着我们可以通过重复它们来扩展\(E\)和\(O\)的长度，使用Numpy函数`tile`可以做到这一点。
- en: So, here’s a version of `merge` based on the D-L lemma.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是一个基于D-L引理的`merge`版本。
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Exercise:** As a first step toward implementing FFT, write a non-recursive
    function called `fft_norec` that takes a sequence called `x` and'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**作为实现FFT的第一步，编写一个名为`fft_norec`的非递归函数，该函数接受一个名为`x`的序列。'
- en: Divides `x` into even and odd elements,
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`x`分为偶数和奇数元素，
- en: Uses `dft` to compute `E` and `O`, and
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`dft`来计算`E`和`O`，和
- en: Uses `merge` to compute `X`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`merge`来计算`X`。
- en: '[PRE20]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let’s see what the performance looks like.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看性能如何。
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![_images/fft_29_1.png](../Images/52dec72a572ee7db362f15722b930de6.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![_images/fft_29_1.png](../Images/52dec72a572ee7db362f15722b930de6.png)'
- en: '**Exercise:** Starting with `fft_norec`, write a function called `fft_rec`
    that’s fully recursive; that is, instead of using `dft` to compute the DFTs of
    the halves, it should use `fft_rec`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**从`fft_norec`开始，编写一个名为`fft_rec`的完全递归的函数；也就是说，它应该使用`fft_rec`而不是使用`dft`来计算两半的DFT。'
- en: 'You will need a base case to avoid an infinite recursion. You have two options:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个基本情况来避免无限递归。您有两个选择：
- en: The DFT of an array with length 1 is the array itself.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 长度为1的数组的DFT是数组本身。
- en: If the parameter, `x`, is smaller than some threshold length, you could use
    DFT.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果参数`x`小于某个阈值长度，则可以使用DFT。
- en: Use `test_fft_rec`, below, to check the performance of your function.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下面的`test_fft_rec`来检查函数的性能。
- en: '[PRE27]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![_images/fft_35_1.png](../Images/0b8082606d96a7e408de735daf96b087.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![_images/fft_35_1.png](../Images/0b8082606d96a7e408de735daf96b087.png)'
- en: If things go according to plan, your FFT implementation should be faster than
    `dft` and `fft_norec`, and over a range of problem sizes, it might be indistinguishable
    from linear.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，您的FFT实现应该比`dft`和`fft_norec`更快，并且在一系列问题规模上，它可能与线性函数无法区分。
- en: '*Data Structures and Information Retrieval in Python*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python中的数据结构和信息检索*'
- en: Copyright 2021 Allen Downey
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2021 Allen Downey
- en: 'License: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证：[知识共享署名-非商业-相同方式共享4.0国际许可协议](https://creativecommons.org/licenses/by-nc-sa/4.0/)
