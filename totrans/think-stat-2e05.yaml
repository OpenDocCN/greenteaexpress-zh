- en: Chapter 4  Cumulative distribution functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://greenteapress.com/thinkstats2/html/thinkstats2005.html](https://greenteapress.com/thinkstats2/html/thinkstats2005.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The code for this chapter is in `cumulative.py`. For information about downloading
    and working with this code, see Section [0.2](thinkstats2001.html#code).
  prefs: []
  type: TYPE_NORMAL
- en: 4.1  The limits of PMFs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PMFs work well if the number of values is small. But as the number of values
    increases, the probability associated with each value gets smaller and the effect
    of random noise increases.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we might be interested in the distribution of birth weights. In
    the NSFG data, the variable `totalwgt_lb` records weight at birth in pounds. Figure [4.1](#nsfg_birthwgt_pmf)
    shows the PMF of these values for first babies and others.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/ca484416b47aead07e9b7fd39fd2f491.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 4.1: PMF of birth weights. This figure shows a limitation of PMFs:
    they are hard to compare visually. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Overall, these distributions resemble the bell shape of a normal distribution,
    with many values near the mean and a few values much higher and lower.
  prefs: []
  type: TYPE_NORMAL
- en: But parts of this figure are hard to interpret. There are many spikes and valleys,
    and some apparent differences between the distributions. It is hard to tell which
    of these features are meaningful. Also, it is hard to see overall patterns; for
    example, which distribution do you think has the higher mean?
  prefs: []
  type: TYPE_NORMAL
- en: These problems can be mitigated by binning the data; that is, dividing the range
    of values into non-overlapping intervals and counting the number of values in
    each bin. Binning can be useful, but it is tricky to get the size of the bins
    right. If they are big enough to smooth out noise, they might also smooth out
    useful information.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative that avoids these problems is the cumulative distribution function
    (CDF), which is the subject of this chapter. But before I can explain CDFs, I
    have to explain percentiles.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2  Percentiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have taken a standardized test, you probably got your results in the
    form of a raw score and a percentile rank. In this context, the percentile rank
    is the fraction of people who scored lower than you (or the same). So if you are
    “in the 90th percentile,” you did as well as or better than 90% of the people
    who took the exam.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you could compute the percentile rank of a value, `your_score`,
    relative to the values in the sequence `scores`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As an example, if the scores in the sequence were 55, 66, 77, 88 and 99, and
    you got the 88, then your percentile rank would be `100 * 4 / 5` which is 80.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are given a value, it is easy to find its percentile rank; going the
    other way is slightly harder. If you are given a percentile rank and you want
    to find the corresponding value, one option is to sort the values and search for
    the one you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The result of this calculation is a percentile. For example, the 50th percentile
    is the value with percentile rank 50\. In the distribution of exam scores, the
    50th percentile is 77.
  prefs: []
  type: TYPE_NORMAL
- en: 'This implementation of `Percentile` is not efficient. A better approach is
    to use the percentile rank to compute the index of the corresponding percentile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The difference between “percentile” and “percentile rank” can be confusing,
    and people do not always use the terms precisely. To summarize, `PercentileRank`
    takes a value and computes its percentile rank in a set of values; `Percentile`
    takes a percentile rank and computes the corresponding value.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3  CDFs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we understand percentiles and percentile ranks, we are ready to tackle
    the cumulative distribution function (CDF). The CDF is the function that maps
    from a value to its percentile rank.
  prefs: []
  type: TYPE_NORMAL
- en: The CDF is a function of x, where x is any value that might appear in the distribution.
    To evaluate CDF(x) for a particular value of x, we compute the fraction of values
    in the distribution less than or equal to x.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what that looks like as a function that takes a sequence, `sample`,
    and a value, `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This function is almost identical to `PercentileRank`, except that the result
    is a probability in the range 0–1 rather than a percentile rank in the range 0–100.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, suppose we collect a sample with the values `[1, 2, 2, 3, 5]`.
    Here are some values from its CDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '| CDF(0) = 0  |'
  prefs: []
  type: TYPE_TB
- en: '| CDF(1) = 0.2 |'
  prefs: []
  type: TYPE_TB
- en: '| CDF(2) = 0.6 |'
  prefs: []
  type: TYPE_TB
- en: '| CDF(3) = 0.8 |'
  prefs: []
  type: TYPE_TB
- en: '| CDF(4) = 0.8 |'
  prefs: []
  type: TYPE_TB
- en: '| CDF(5) = 1 |'
  prefs: []
  type: TYPE_TB
- en: We can evaluate the CDF for any value of x, not just values that appear in the
    sample. If x is less than the smallest value in the sample, CDF(x) is 0. If x
    is greater than the largest value, CDF(x) is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/29c1a8ff725395d0939152da26755b01.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 4.2: Example of a CDF. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Figure [4.2](#example_cdf) is a graphical representation of this CDF. The CDF
    of a sample is a step function.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4  Representing CDFs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`thinkstats2` provides a class named Cdf that represents CDFs. The fundamental
    methods Cdf provides are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Prob(x)`: Given a value `x`, computes the probability p = CDF(x). The bracket
    operator is equivalent to `Prob`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Value(p)`: Given a probability `p`, computes the corresponding value, `x`;
    that is, the inverse CDF of `p`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e88e671e1ef575f92112902f92b544f1.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 4.3: CDF of pregnancy length. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The Cdf constructor can take as an argument a list of values, a pandas Series,
    a Hist, Pmf, or another Cdf. The following code makes a Cdf for the distribution
    of pregnancy lengths in the NSFG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`thinkplot` provides a function named `Cdf` that plots Cdfs as lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Figure [4.3](#cumulative_prglngth_cdf) shows the result. One way to read a CDF
    is to look up percentiles. For example, it looks like about 10% of pregnancies
    are shorter than 36 weeks, and about 90% are shorter than 41 weeks. The CDF also
    provides a visual representation of the shape of the distribution. Common values
    appear as steep or vertical sections of the CDF; in this example, the mode at
    39 weeks is apparent. There are few values below 30 weeks, so the CDF in this
    range is flat.
  prefs: []
  type: TYPE_NORMAL
- en: It takes some time to get used to CDFs, but once you do, I think you will find
    that they show more information, more clearly, than PMFs.
  prefs: []
  type: TYPE_NORMAL
- en: 4.5  Comparing CDFs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CDFs are especially useful for comparing distributions. For example, here is
    the code that plots the CDF of birth weight for first babies and others.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/8e2e1f18cc1257782a6af70adde754eb.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 4.4: CDF of birth weights for first babies and others. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Figure [4.4](#cumulative_birthwgt_cdf) shows the result. Compared to Figure[4.1](#nsfg_birthwgt_pmf),
    this figure makes the shape of the distributions, and the differences between
    them, much clearer. We can see that first babies are slightly lighter throughout
    the distribution, with a larger discrepancy above the mean.
  prefs: []
  type: TYPE_NORMAL
- en: 4.6  Percentile-based statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have computed a CDF, it is easy to compute percentiles and percentile
    ranks. The Cdf class provides these two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PercentileRank(x)`: Given a value `x`, computes its percentile rank, 100 ·
    CDF(x).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentile(p)`: Given a percentile rank `p`, computes the corresponding value,
    `x`. Equivalent to `Value(p/100)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentile` can be used to compute percentile-based summary statistics. For
    example, the 50th percentile is the value that divides the distribution in half,
    also known as the median. Like the mean, the median is a measure of the central
    tendency of a distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: Actually, there are several definitions of “median,” each with different properties.
    But `Percentile(50)` is simple and efficient to compute.
  prefs: []
  type: TYPE_NORMAL
- en: Another percentile-based statistic is the interquartile range (IQR), which is
    a measure of the spread of a distribution. The IQR is the difference between the
    75th and 25th percentiles.
  prefs: []
  type: TYPE_NORMAL
- en: More generally, percentiles are often used to summarize the shape of a distribution.
    For example, the distribution of income is often reported in “quintiles”; that
    is, it is split at the 20th, 40th, 60th and 80th percentiles. Other distributions
    are divided into ten “deciles”. Statistics like these that represent equally-spaced
    points in a CDF are called quantiles. For more, see [https://en.wikipedia.org/wiki/Quantile](https://en.wikipedia.org/wiki/Quantile).
  prefs: []
  type: TYPE_NORMAL
- en: 4.7  Random numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we choose a random sample from the population of live births and look
    up the percentile rank of their birth weights. Now suppose we compute the CDF
    of the percentile ranks. What do you think the distribution will look like?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how we can compute it. First, we make the Cdf of birth weights:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then we generate a sample and compute the percentile rank of each value in the
    sample.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`sample` is a random sample of 100 birth weights, chosen with replacement;
    that is, the same value could be chosen more than once. `ranks` is a list of percentile
    ranks.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally we make and plot the Cdf of the percentile ranks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/89fd66dbfaa005b184da671df1768a9a.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 4.5: CDF of percentile ranks for a random sample of birth weights.
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Figure [4.5](#cumulative_random) shows the result. The CDF is approximately
    a straight line, which means that the distribution is uniform.
  prefs: []
  type: TYPE_NORMAL
- en: That outcome might be non-obvious, but it is a consequence of the way the CDF
    is defined. What this figure shows is that 10% of the sample is below the 10th
    percentile, 20% is below the 20th percentile, and so on, exactly as we should
    expect.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, regardless of the shape of the CDF, the distribution of percentile ranks
    is uniform. This property is useful, because it is the basis of a simple and efficient
    algorithm for generating random numbers with a given CDF. Here’s how:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose a percentile rank uniformly from the range 0–100.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `Cdf.Percentile` to find the value in the distribution that corresponds
    to the percentile rank you chose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cdf provides an implementation of this algorithm, called `Random`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Cdf also provides `Sample`, which takes an integer, `n`, and returns a list
    of `n` values chosen at random from the Cdf.
  prefs: []
  type: TYPE_NORMAL
- en: 4.8  Comparing percentile ranks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Percentile ranks are useful for comparing measurements across different groups.
    For example, people who compete in foot races are usually grouped by age and gender.
    To compare people in different age groups, you can convert race times to percentile
    ranks.
  prefs: []
  type: TYPE_NORMAL
- en: A few years ago I ran the James Joyce Ramble 10K in Dedham MA; I finished in
    42:44, which was 97th in a field of 1633\. I beat or tied 1537 runners out of
    1633, so my percentile rank in the field is 94%.
  prefs: []
  type: TYPE_NORMAL
- en: 'More generally, given position and field size, we can compute percentile rank:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In my age group, denoted M4049 for “male between 40 and 49 years of age”, I
    came in 26th out of 256\. So my percentile rank in my age group was 90%.
  prefs: []
  type: TYPE_NORMAL
- en: If I am still running in 10 years (and I hope I am), I will be in the M5059
    division. Assuming that my percentile rank in my division is the same, how much
    slower should I expect to be?
  prefs: []
  type: TYPE_NORMAL
- en: 'I can answer that question by converting my percentile rank in M4049 to a position
    in M5059\. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There were 171 people in M5059, so I would have to come in between 17th and
    18th place to have the same percentile rank. The finishing time of the 17th runner
    in M5059 was 46:05, so that’s the time I will have to beat to maintain my percentile
    rank.
  prefs: []
  type: TYPE_NORMAL
- en: 4.9  Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the following exercises, you can start with `chap04ex.ipynb`. My solution
    is in `chap04soln.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1   *How much did you weigh at birth? If you don’t know, call your
    mother or someone else who knows. Using the NSFG data (all live births), compute
    the distribution of birth weights and use it to find your percentile rank. If
    you were a first baby, find your percentile rank in the distribution for first
    babies. Otherwise use the distribution for others. If you are in the 90th percentile
    or higher, call your mother back and apologize.*Exercise 2   *The numbers generated
    by `random.random` are supposed to be uniform between 0 and 1; that is, every
    value in the range should have the same probability.*
  prefs: []
  type: TYPE_NORMAL
- en: '*Generate 1000 numbers from `random.random` and plot their PMF and CDF. Is
    the distribution uniform?*'
  prefs: []
  type: TYPE_NORMAL
- en: 4.10  Glossary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'percentile rank: The percentage of values in a distribution that are less than
    or equal to a given value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'percentile: The value associated with a given percentile rank.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'cumulative distribution function (CDF): A function that maps from values to
    their cumulative probabilities. CDF(x) is the fraction of the sample less than
    or equal to x.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'inverse CDF: A function that maps from a cumulative probability, p, to the
    corresponding value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'median: The 50th percentile, often used as a measure of central tendency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'interquartile range: The difference between the 75th and 25th percentiles,
    used as a measure of spread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'quantile: A sequence of values that correspond to equally spaced percentile
    ranks; for example, the quartiles of a distribution are the 25th, 50th and 75th
    percentiles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'replacement: A property of a sampling process. “With replacement” means that
    the same value can be chosen more than once; “without replacement” means that
    once a value is chosen, it is removed from the population.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
