["```py\nimport pandas as pd\n\nbrfss = pd.read_hdf('brfss.hdf5', 'brfss')\nbrfss.shape \n```", "```py\n(100000, 9) \n```", "```py\nbrfss.head() \n```", "```py\nheight = brfss['HTM4']\nweight = brfss['WTKG3'] \n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.plot(height, weight, 'o')\n\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\nplt.plot(height, weight, 'o', alpha=0.02)\n\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\nplt.plot(height, weight, 'o', alpha=0.02, markersize=1)\n\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\nimport numpy as np\n\nnoise = np.random.normal(0, 2, size=len(brfss))\nheight_jitter = height + noise \n```", "```py\nplt.plot(height_jitter, weight, 'o', \n         alpha=0.02, markersize=1)\n\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\nnoise = np.random.normal(0, 2, size=len(brfss))\nweight_jitter = weight + noise \n```", "```py\nplt.plot(height_jitter, weight_jitter, 'o', \n         alpha=0.02, markersize=1)\n\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\nplt.plot(height_jitter, weight_jitter, 'o', \n         alpha=0.02, markersize=1)\n\nplt.xlim([140, 200])\nplt.ylim([0, 160])\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\n# Set the figure size\nplt.figure(figsize=(8, 3))\n\n# Create subplots with 2 rows, 1 column, and start plot 1\nplt.subplot(1, 2, 1)\nplt.plot(height, weight, 'o')\n\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height')\n\n# Adjust the layout so the two plots don't overlap\nplt.tight_layout()\n\n# Start plot 2\nplt.subplot(1, 2, 2)\n\nplt.plot(height_jitter, weight_jitter, 'o', \n         alpha=0.02, markersize=1)\n\nplt.xlim([140, 200])\nplt.ylim([0, 160])\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height')\nplt.tight_layout() \n```", "```py\nfrom empiricaldist import Pmf \n```", "```py\nPmf.from_seq(weight).bar()\n\nplt.xlabel('Weight in kg')\nplt.ylabel('PMF')\nplt.title('Distribution of weight'); \n```", "```py\nage = brfss['AGE']\nnoise = np.random.normal(0, 1.0, size=len(brfss))\nage_jitter = age + noise\n\nplt.plot(age_jitter, weight_jitter, 'o', \n         alpha=0.01, markersize=1)\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.ylim([0, 200])\nplt.title('Weight versus age'); \n```", "```py\ndata = brfss.dropna(subset=['AGE', 'WTKG3'])\ndata.shape \n```", "```py\n(92729, 9) \n```", "```py\nimport seaborn as sns\n\nsns.violinplot(x='AGE', y='WTKG3', data=data, inner=None)\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Weight versus age'); \n```", "```py\nsns.boxplot(x='AGE', y='WTKG3', data=data, whis=10)\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Weight versus age'); \n```", "```py\nsns.boxplot(x='AGE', y='WTKG3', data=data, whis=10)\n\nplt.yscale('log')\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg (log scale)')\nplt.title('Weight versus age'); \n```", "```py\nplt.xticks(rotation='45') \n```", "```py\ncolumns = ['HTM4', 'WTKG3', 'AGE']\nsubset = brfss[columns] \n```", "```py\nsubset.corr() \n```", "```py\ndata = brfss.dropna(subset=['AGE', 'WTKG3'])\nsns.boxplot(x='AGE', y='WTKG3', data=data, whis=10)\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Weight versus age'); \n```", "```py\nxs = np.linspace(-1, 1)\nys = xs**2 + np.random.normal(0, 0.05, len(xs)) \n```", "```py\nplt.plot(xs, ys, 'o', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Scatter plot of a fake dataset'); \n```", "```py\nnp.corrcoef(xs, ys) \n```", "```py\narray([[ 1\\.        , -0.02804226],\n       [-0.02804226,  1\\.        ]]) \n```", "```py\nnp.random.seed(18)\nxs1 = np.linspace(20, 50)\nys1 = 75 + 0.02 * xs1 + np.random.normal(0, 0.15, len(xs1))\n\nplt.plot(xs1, ys1, 'o', alpha=0.5)\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Fake dataset #1'); \n```", "```py\nnp.random.seed(18)\nxs2 = np.linspace(20, 50)\nys2 = 65 + 0.2 * xs2 + np.random.normal(0, 3, len(xs2))\n\nplt.plot(xs2, ys2, 'o', alpha=0.5)\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Fake dataset #2'); \n```", "```py\nrho1 = np.corrcoef(xs1, ys1)[0][1]\nrho1 \n```", "```py\n0.7579660563439401 \n```", "```py\nrho2 = np.corrcoef(xs2, ys2)[0][1]\nrho2 \n```", "```py\n0.4782776976576317 \n```", "```py\nplt.figure(figsize=(8, 3))\n\nplt.subplot(1, 2, 1)\nplt.plot(xs1, ys1, 'o', alpha=0.5)\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Fake dataset #1')\nplt.tight_layout()\n\nplt.subplot(1, 2, 2)\nplt.plot(xs2, ys2, 'o', alpha=0.5)\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Fake dataset #2')\nplt.tight_layout() \n```", "```py\nfrom scipy.stats import linregress\n\nres1 = linregress(xs1, ys1)\nres1._asdict() \n```", "```py\n{'slope': 0.018821034903244386,\n 'intercept': 75.08049023710964,\n 'rvalue': 0.7579660563439402,\n 'pvalue': 1.8470158725246148e-10,\n 'stderr': 0.002337849260560818,\n 'intercept_stderr': 0.08439154079040358} \n```", "```py\nres1.slope * 30 \n```", "```py\n0.5646310470973316 \n```", "```py\nres2 = linregress(xs2, ys2)\nres2._asdict() \n```", "```py\n{'slope': 0.17642069806488855,\n 'intercept': 66.60980474219305,\n 'rvalue': 0.47827769765763173,\n 'pvalue': 0.0004430600283776241,\n 'stderr': 0.04675698521121631,\n 'intercept_stderr': 1.6878308158080697} \n```", "```py\nres2.slope * 30 \n```", "```py\n5.292620941946657 \n```", "```py\nplt.plot(xs1, ys1, 'o', alpha=0.5)\n\nfx = np.array([xs1.min(), xs1.max()])\nfy = res1.intercept + res1.slope * fx\nplt.plot(fx, fy, '-')\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Fake Dataset #1'); \n```", "```py\nplt.plot(xs2, ys2, 'o', alpha=0.5)\n\nfx = np.array([xs2.min(), xs2.max()])\nfy = res2.intercept + res2.slope * fx\nplt.plot(fx, fy, '-')\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Fake Dataset #2'); \n```", "```py\nplt.plot(height_jitter, weight_jitter, 'o', \n         alpha=0.02, markersize=1)\n\nplt.xlim([140, 200])\nplt.ylim([0, 160])\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\nsubset = brfss.dropna(subset=['WTKG3', 'HTM4'])\nheight_clean = subset['HTM4']\nweight_clean = subset['WTKG3'] \n```", "```py\nres_hw = linregress(height_clean, weight_clean)\nres_hw._asdict() \n```", "```py\n{'slope': 0.9192115381848297,\n 'intercept': -75.12704250330233,\n 'rvalue': 0.47420308979024584,\n 'pvalue': 0.0,\n 'stderr': 0.005632863769802998,\n 'intercept_stderr': 0.9608860265433182} \n```", "```py\nfx = np.array([height_clean.min(), height_clean.max()])\nfy = res_hw.intercept + res_hw.slope * fx \n```", "```py\nplt.plot(height_jitter, weight_jitter, 'o', alpha=0.02, markersize=1)\n\nplt.plot(fx, fy, '-')\n\nplt.xlim([140, 200])\nplt.ylim([0, 160])\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.title('Scatter plot of weight versus height'); \n```", "```py\nplt.plot(age_jitter, weight_jitter, 'o', \n         alpha=0.01, markersize=1)\n\nplt.ylim([0, 160])\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Weight versus age'); \n```", "```py\nsubset = brfss.dropna(subset=['WTKG3', 'AGE'])\nage_clean = subset['AGE']\nweight_clean = subset['WTKG3']\n\nres_aw = linregress(age_clean, weight_clean)\nres_aw._asdict() \n```", "```py\n{'slope': 0.023981159566968724,\n 'intercept': 80.07977583683224,\n 'rvalue': 0.021641432889064068,\n 'pvalue': 4.374327493007566e-11,\n 'stderr': 0.003638139410742186,\n 'intercept_stderr': 0.18688508176870167} \n```", "```py\nplt.plot(age_jitter, weight_jitter, 'o', \n         alpha=0.01, markersize=1)\n\nfx = np.array([age_clean.min(), age_clean.max()])\nfy = res_aw.intercept + res_aw.slope * fx\nplt.plot(fx, fy, '-')\n\nplt.ylim([0, 160])\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.title('Weight versus age'); \n```"]