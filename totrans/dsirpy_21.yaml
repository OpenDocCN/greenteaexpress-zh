- en: Quiz 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/DSIRP/quiz05.html](https://allendowney.github.io/DSIRP/quiz05.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'BEFORE YOU START THIS QUIZ:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on “Copy to Drive” to make a copy of the quiz,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on “Share”,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on “Change” and select “Anyone with this link can edit”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click “Copy link” and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the link into [this Canvas assignment](https://canvas.olin.edu/courses/313/assignments/5075).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This quiz is open notes, open internet.
  prefs: []
  type: TYPE_NORMAL
- en: You can ask for help from the instructor, but not from anyone else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use code you find on the internet, but if you use more than a couple
    of lines from a single source, you should attribute the source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and Start Redis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this quiz, we will run Redis on Colab. The following cells install and start
    the server, install the client, and instantiate a `Redis` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Linda the Banker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a [famous experiment](https://en.wikipedia.org/wiki/Conjunction_fallacy),
    Tversky and Kahneman posed the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: Linda is 31 years old, single, outspoken, and very bright. She majored in philosophy.
    As a student, she was deeply concerned with issues of discrimination and social
    justice, and also participated in anti-nuclear demonstrations. Which is more probable?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Linda is a bank teller.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Linda is a bank teller and is active in the feminist movement.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Many people choose the second answer, presumably because it seems more consistent
    with the description. It seems uncharacteristic if Linda is *just* a bank teller;
    it seems more consistent if she is also a feminist.
  prefs: []
  type: TYPE_NORMAL
- en: But the second answer cannot be “more probable”, as the question asks. To see
    why, let’s explore some data. The following cell downloads data from the [General
    Social Survey](http://www.gss.norc.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The following cell loads the data into a Pandas `DataFrame`. If you are not
    familiar with Pandas, I will explain what you need to know.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `DataFrame` has one row for each person surveyed, called a “respondent”,
    and one column for each variable I selected. The columns are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`caseid`: Identification number for the respondent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`year`: Year when the respondent was surveyed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`age`: Respondent’s age when surveyed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sex`: Male or female.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polviews`: Political views on a range from liberal to conservative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partyid`: Political party affiliation, Democrat, Independent, or Republican.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indus10`: [Code](https://www.census.gov/cgi-bin/sssd/naics/naicsrch?chart=2007)
    for the industry the respondent works in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use Redis sets to explore the relationships among these variables. Specifically,
    we will answer the following questions related to the “Linda problem”.
  prefs: []
  type: TYPE_NORMAL
- en: The number of respondents who are female bankers,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of respondents who are liberal female banker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And we will see that the second number is smaller than the first.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating rows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following loop iterates the first 3 rows in the `DataFrame` and prints the
    `caseid` and the contents of the row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The following loop iterates through the `DataFrame` and makes a set containing
    the `caseid` for the rows where the industry code is 6870, which indicates that
    the respondent works in banking.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s do the same thing using a Redis set.
  prefs: []
  type: TYPE_NORMAL
- en: Question 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following loop creates a Redis set that contains the `caseid` for all respondents
    whose `indus10` is `6870`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Write a Redis command to get the number of elements in the resulting set.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the [documentation for Redis set commands](https://redis.io/commands#set).
  prefs: []
  type: TYPE_NORMAL
- en: Question 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following cell makes a Python set that contains the `caseid` of all respondents
    who identify as female.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The following cell makes a Python set that includes the `caseid` for people
    who self-identify as “Extremely liberal”, “Liberal”, or “Slightly liberal”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Write versions of these loops that create these sets on Redis, and display
    the number of elements in each set. For the keys, use the following strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Before you go on, make sure you have three sets on Redis, and the number of
    elements in each set is consistent with the results we got with Python sets.
  prefs: []
  type: TYPE_NORMAL
- en: If you make a mistake, you can use `delete` to start with a fresh, empty set.
    Or you can use the following loop to start with a fresh, empty database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Question 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the strengths of Redis is that it provides functions that perform computations
    on the server, including a function that computes the intersection of two or more
    sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write Redis commands to compute:'
  prefs: []
  type: TYPE_NORMAL
- en: A set of `caseid` values for respondents who are female bankers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A set of `caseid` values for respondents who are liberal female bankers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the second set is, in fact, smaller than the first.
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now suppose you want to look up a `caseid` and find all of the sets it belongs
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Write a function called `find_tags` that takes a `caseid` and returns a set
    of strings, where each string is the key of a set that contains the `caseid`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the `caseid` is 33, the result should be the set
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: which indicates that this respondent is a female banker (but not liberal).
  prefs: []
  type: TYPE_NORMAL
- en: You can use the following examples to test your function. You should find that
    the respondent with `caseid` 33 is a female banker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: And the respondent with `caseid` 451 is a liberal female banker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Just For Fun Extra Question
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose there are a large number of sets and you often want to look up a `caseid`
    and find the sets it belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Iterate through the sets we’ve defined so far and make a reverse index that
    maps from each `caseid` to a list of keys for the sets it belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: '*Data Structures and Information Retrieval in Python*'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright 2021 Allen Downey
  prefs: []
  type: TYPE_NORMAL
- en: 'License: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  prefs: []
  type: TYPE_NORMAL
