["```py\ndef is_anagram(word1, word2):\n    return False \n```", "```py\nis_anagram('tachymetric', 'mccarthyite') # True \n```", "```py\nFalse \n```", "```py\nis_anagram('post', 'top') # False, letter not present \n```", "```py\nFalse \n```", "```py\nis_anagram('pott', 'top') # False, letter present but not enough copies \n```", "```py\nFalse \n```", "```py\nis_anagram('top', 'post') # False, letters left over at the end \n```", "```py\nFalse \n```", "```py\nis_anagram('topss', 'postt') # False \n```", "```py\nFalse \n```", "```py\n%timeit is_anagram('tops', 'spot') \n```", "```py\n50.8 ns \u00b1 0.779 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each) \n```", "```py\n%timeit is_anagram('tachymetric', 'mccarthyite') \n```", "```py\n49.9 ns \u00b1 3.99 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each) \n```", "```py\nshort_word_list = ['proudest', 'stop', 'pots', 'tops', 'sprouted'] \n```", "```py\ndef all_anagram_pairs(word_list):\n    return [] \n```", "```py\nall_anagram_pairs(short_word_list) \n```", "```py\n[] \n```", "```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/DSIRP/raw/main/american-english') \n```", "```py\ndef read_words(filename):\n  \"\"\"Read lines from a file and split them into words.\"\"\"\n    res = set()\n    for line in open(filename):\n        for word in line.split():\n            res.add(word.strip().lower())\n    return res \n```", "```py\nword_list = read_words('american-english')\nlen(word_list) \n```", "```py\n100781 \n```", "```py\n# pairs = all_anagram_pairs(word_list) \n```", "```py\ndef all_anagram_lists(word_list):\n  \"\"\"Finds all anagrams in a list of words.\n\n word_list: sequence of strings\n \"\"\"\n    return {} \n```", "```py\n%time anagram_map = all_anagram_lists(word_list) \n```", "```py\nCPU times: user 173 ms, sys: 8.02 ms, total: 181 ms\nWall time: 180 ms \n```", "```py\nlen(anagram_map) \n```", "```py\n93406 \n```"]