- en: Resampling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ElementsOfDataScience/11_resampling.html](https://allendowney.github.io/ElementsOfDataScience/11_resampling.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Click here to run this notebook on Colab](https://colab.research.google.com/github/AllenDowney/ElementsOfDataScience/blob/master/11_resampling.ipynb)
    or [click here to download it](https://github.com/AllenDowney/ElementsOfDataScience/raw/master/11_resampling.ipynb).'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces **resampling methods**, which are used to quantify the
    precision of an estimate. As examples, we’ll use results from a vaccine trial
    to estimate the efficacy of the vaccine, data from the Behavioral Risk Factor
    Surveillance System to estimate the average height of men in the U.S., and data
    from the General Social Survey to see how support for gun control has changed
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: Vaccine Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you read a report about a new vaccine and the manufacturer says it is
    67% effective at preventing disease. You might wonder where that number comes
    from, what it means, and how confident we should be that it is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Results like this often come from a randomized controlled trial (RCT), which
    works like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You recruit a large group of volunteers and divide them into two groups at
    random: the “treatment group” receives the vaccine; the “control group” does not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then you follow both groups for a period of time and record the number of people
    in each group who are diagnosed with the disease.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an example, suppose you recruit 43,783 participants and they are assigned
    to groups with approximately the same size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'During the observation period, 468 people are diagnosed with the disease: 352
    in the control group and 116 in the treatment group.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can use these results to compute the risk of getting the disease for each
    group, in cases per 1000 people
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The risk is substantially lower in the treatment group – about 5 per 1000,
    compared to 16 – which suggests that the vaccine is effective. We can summarize
    these results by computing relative risk, which is the ratio of the two risks
    (see [https://en.wikipedia.org/wiki/Relative_risk](https://en.wikipedia.org/wiki/Relative_risk)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The relative risk in this example is about 0.33, which means that the risk
    of disease in the treatment group is 33% of the risk in the control group. Equivalently,
    we could report the complement of relative risk, which is **efficacy**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example the efficacy is `0.67`, which means that the vaccine reduces
    the risk of disease by 67%. That’s good news, but as skeptical data scientists,
    we should not assume that it is perfectly accurate. There are any number of things
    that might have gone wrong.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if people in the treatment group know they have been vaccinated,
    they might take fewer precautions to prevent disease, and people in the control
    group might be more careful. That would affect the estimated efficacy, which is
    why a lot of trials are “blinded”, meaning that the subjects don’t know which
    group they are in.
  prefs: []
  type: TYPE_NORMAL
- en: The estimate would also be less accurate if people in either group don’t follow
    the protocol. For example, someone in the treatment group might not complete treatment,
    or someone in the control group might receive treatment from another source.
  prefs: []
  type: TYPE_NORMAL
- en: And there are many other possible sources of error, including honest mistakes
    and deliberate fraud.
  prefs: []
  type: TYPE_NORMAL
- en: In general it is hard to know whether estimates like this are accurate; nevertheless,
    there are things we can do to assess their quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'When estimates are reported in scientific journals, they almost always include
    one of two measurements of uncertainty: a standard error or a confidence interval.
    In the next section, I’ll explain what they mean and show how to compute them.'
  prefs: []
  type: TYPE_NORMAL
- en: Simulating One Group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our hypothetical example, there are 21 911 people in the treatment group
    and 116 of them got the disease, so the estimated risk is about 5 cases per 1000
    people.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: But it’s easy to imagine that there might have been a few more cases, or fewer,
    just by chance. For example, if there had been 10 more cases, the estimated risk
    would be 5.8 per 1000, and if there had been 10 fewer, it would be 4.8.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s a big enough difference that we should wonder how much variability there
    is in the estimate due to random variation. We’ll answer that question in three
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll write a function that uses a random number generator to simulate the trial.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we’ll run the function 1000 times to see how much the estimate varies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And we’ll summarize the results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following function takes two parameters: `n` is the number of people in
    the group (treatment or control) and `p` is the probability that any of them gets
    the disease.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first line generates an array of `n` random values between 0 and 1. The
    values are distributed uniformly in this range, so the probability that each one
    is less than `p` is… `p`.
  prefs: []
  type: TYPE_NORMAL
- en: The second line counts how many of the values are less than `p`, that is, how
    many people in the simulated group get the disease. Then the function returns
    the estimated risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how we call this function, passing as arguments the size of the treatment
    group and the estimated risk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The result is the estimated risk from a simulated trial. If we run this function
    1000 times, it’s like running the trial over and over.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The result is a list of estimated risks that shows how much we expect the results
    of the trial to vary due to randomness. We can use a KDE plot to visualize the
    distribution of these estimates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/11_resampling_28_0.png](../Images/c2c36832d52ddf94beb0ceedc3a6b9b6.png)'
  prefs: []
  type: TYPE_IMG
- en: The mean of this distribution is about 5.3, which is close to the observed risk,
    as we should expect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The width of this distribution indicates how much variation there is in the
    estimate due to randomness. One way to quantify the width of the distribution
    is the standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This result is called the **standard error** (see [https://en.wikipedia.org/wiki/Standard_error](https://en.wikipedia.org/wiki/Standard_error)).
  prefs: []
  type: TYPE_NORMAL
- en: Another way to quantify the width of the distribution is an interval between
    two percentiles. For example, if we compute the 5th and 95th percentiles, the
    interval we get contains 90% of the simulated estimates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This result is called a **confidence interval** ; specifically, this one is
    a “90% confidence interval”, or 90% CI (see [https://en.wikipedia.org/wiki/Confidence_interval](https://en.wikipedia.org/wiki/Confidence_interval)).
    If we assume that the observed risk is correct, and we run the same trial many
    times, we expect 90% of the estimates to fall in this interval.
  prefs: []
  type: TYPE_NORMAL
- en: Standard errors and confidence intervals quantify our uncertainty about the
    estimate due to random variation from one trial to another.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating the Trial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If that’s not making sense yet, let’s try another example. In the previous section
    we simulated one group and estimated their risk. Now we’ll simulate both groups
    and estimate the efficacy of the vaccine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following function takes four parameters: the sizes of the two groups and
    their actual risks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If we call this function once, it simulates both groups, computes the risks
    in each group, and uses the results to estimate the efficacy of the treatment
    (assuming that the first group is the control).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If we call it 1000 times, the result is a list of estimated efficacies from
    1000 simulated trials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We can use a KDE plot to visualize the distribution of these estimates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/11_resampling_43_0.png](../Images/95fdf8188db6b51293eedaee7b10a89c.png)'
  prefs: []
  type: TYPE_IMG
- en: The mean of this distribution is close to the efficacy we computed with the
    results of the actual trial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The standard deviation of this distribution is the standard error of the estimate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In a scientific paper, we could report the estimated efficacy and standard error
    as 0.67 (SE 0.035). As an alternative, we can use percentiles to compute a 90%
    confidence interval.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In a scientific paper, we could report these results as 0.67, 90% CI [0.61,
    0.72]”.
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard error and confidence interval represent nearly the same information.
    In general, I prefer to report a confidence interval because it is easier to interpret:'
  prefs: []
  type: TYPE_NORMAL
- en: Formally, the confidence interval means that if we run the same experiment again,
    we expect 90% of the results to fall between 61% and 72% (assuming that the estimated
    risks are correct).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More casually, it means that it is plausible that the actually efficacy is as
    low as 61%, or as high as 72% (assuming there are no sources of error other than
    random variation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Estimating Means
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous examples, we’ve estimated risk, which is a proportion, and efficacy,
    which is a ratio of two proportions. As a third example, let’s estimate a mean.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we want to estimate the average height of men in the United States.
    It would be impractical to measure everyone in the country, but if we choose a
    random sample of the population and measure the people in the sample, we can use
    the mean of the measurements to estimate the mean of the population.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, the sample should be **representative**, which means that everyone
    in the population has an equal chance of appearing in the sample. In general,
    that’s not easy to do. Depending on how you recruit people, your sample might
    have too many tall people or too many short people.
  prefs: []
  type: TYPE_NORMAL
- en: But let’s suppose we have a representative sample of 103 adult male residents
    of the United States, the average height in the sample is 177 cm, and the standard
    deviation is 8.4 cm.
  prefs: []
  type: TYPE_NORMAL
- en: If someone asks for your best guess about the height of mean in the U.S., you
    would report 177 cm. But how accurate do you think this estimate is? If you only
    measure 103 people from a population of about 100 million adult males, it seems
    like the actual average in the population might be substantially higher or lower.
  prefs: []
  type: TYPE_NORMAL
- en: Again, we can use random simulation to quantify the uncertainty of this estimate.
    As we did in the previous examples, we will assume for purposes of simulation
    that the estimates are correct, and simulate the sampling process 1000 times.
  prefs: []
  type: TYPE_NORMAL
- en: The following function takes as parameters the size of the sample, `n`, the
    presumed average height in the population, `mu`, and the presumed standard deviation,
    `std`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This function generates `n` random values from a normal distribution with the
    given mean and standard deviation, and returns their mean.
  prefs: []
  type: TYPE_NORMAL
- en: We can run it like this, using the observed mean and standard deviation from
    the sample as the presumed mean and standard deviation of the population.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If we run it 1000 times, it simulates the sampling and measurement process and
    returns a list of results from 1000 simulated experiments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We can use a KDE plot to visualize the distribution of these values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/11_resampling_58_0.png](../Images/d1f25af31549ffb2b7cb993207316ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: This distribution is called a **sampling distribution** because it represents
    the variation in the results due to the random sampling process. If we recruit
    100 people and compute the mean of their heights, the result might be as low as
    175 cm, or as high as 179 cm, due to chance.
  prefs: []
  type: TYPE_NORMAL
- en: The average of the sampling distribution is close to the presumed mean of the
    population.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The standard deviation of the sampling distribution is the standard error of
    the estimate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: And we can use `percentile` to compute a 90% confidence interval.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: If I reported this result in a paper, I would say that the estimated height
    of adult male residents of the U.S. is 177 cm, 90% CI [176, 178] cm.
  prefs: []
  type: TYPE_NORMAL
- en: Informally, that means that the estimate could plausibly be off by about a centimeter
    either way, just due to random sampling. But we should remember that there are
    other possible sources of error, so we might be off by more than that.
  prefs: []
  type: TYPE_NORMAL
- en: The confidence interval puts a best-case bound on the precision of the estimate;
    in this example, the precision of the estimate is 1 cm at best, and might be worse.
  prefs: []
  type: TYPE_NORMAL
- en: The Resampling Framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The examples we’ve done so far fit into the framework shown in this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3bae19c4186703c90aec13ae2c4e4eec.png)'
  prefs: []
  type: TYPE_IMG
- en: Using data from an experiment, we compute a sample statistic. In the vaccine
    example, we computed risks for each group and efficacy. In the height example,
    we computed the average height in the sample.
  prefs: []
  type: TYPE_NORMAL
- en: Then we build a model of the sampling process. In the vaccine example, the model
    assumes that everyone in each group has the same probability of getting sick,
    and we use the data to choose the probability. In the height example, the model
    assumes that heights are drawn from a normal distribution, and we use the data
    to choose the parameters `mu` and `sigma`.
  prefs: []
  type: TYPE_NORMAL
- en: We use the model to simulate the experiment many times. Each simulation generates
    a dataset which we use to compute the sample statistic.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we collect the sample statistics from the simulations, plot the sampling
    distribution, and compute standard error and a confidence interval.
  prefs: []
  type: TYPE_NORMAL
- en: I emphasize the role of the model in this framework because for a given experiment
    there might be several possible models, each including some elements of the real
    world and ignoring others.
  prefs: []
  type: TYPE_NORMAL
- en: For example, our model of the vaccine experiment assumes that everyone in each
    group has the same risk, but that’s probably not true. Here’s another version
    of `simulate_group` that includes variation in risk within each group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This version of the function assumes that each person has a different probability
    of getting sick, drawn from a uniform distribution between `0` and `2*p`. Of course,
    that’s just a guess about how the probabilities might be distributed in the group,
    but we can use it to get a sense of what effect this distribution has on the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the function is the same as the previous version: it generates
    `xs`, which is an array of random values between `0` and `1`. Then it compares
    `xs` and `ps`, counting the number of times `p` exceeds `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how we call this function, simulating the treatment group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The return value is the number of cases per 1000.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** Use this function to run 1000 simulations of the treatment group.
    Compute the mean of the results and confirm that it is close to the observed `risk_treatment`.
    To quantify the spread of the sampling distribution, compute the standard error.
    How does it compare to the standard error we computed with the original model,
    where everyone in the group has the same risk?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** The following is a version of `simulate_trial` that uses `simulate_variable_group`,
    from the previous exercise, to simulate the vaccine trial using the modified model,
    with variation in risk within the groups.'
  prefs: []
  type: TYPE_NORMAL
- en: Use this function to simulate 1000 trials. Compute the mean of the sampling
    distribution and confirm that it is close to the observed `efficacy`. Compute
    the standard error and compare it to the standard error we computed for the original
    model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '**Exercise:** One nice thing about the resampling framework is that it is easy
    to compute the sampling distribution for other statistics.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose we want to estimate the coefficient of variation (standard
    deviation as a fraction of the mean) for adult male height. Here’s how we can
    compute it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the standard deviation is about 4.5% of the mean. The following
    is a version of `simulate_sample` that generates a random sample of heights and
    returns the coefficient of variation, rather than the mean.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Use this function to simulate 1000 samples with size `n=103`, using `mean_height`
    for `mu` and `std_height` for `sigma`. Plot the sampling distribution of the coefficient
    of variation, and compute a 90% confidence interval.
  prefs: []
  type: TYPE_NORMAL
- en: Support for Gun Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 10 we used data from the General Social Survey, specifically a variable
    called `GUNLAW`, to describe support for a gun control law as a function of age,
    sex, and years of education. Now let’s come back to that dataset and see how the
    responses have changed over time.
  prefs: []
  type: TYPE_NORMAL
- en: The following cell reloads the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The column named `GUNLAW` records responses to the question “Would you favor
    or oppose a law which would require a person to obtain a police permit before
    he or she could buy a gun?”
  prefs: []
  type: TYPE_NORMAL
- en: The response code `1` means yes; `2` means no. It will be easier to work with
    this variable if we recode it so `0` means no.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: For each year of the survey, we’ll compute the number of respondents and the
    number who said they favor this law. We can use `groupby` to group the respondents
    by year of interview and `agg` to compute two aggregation functions, `sum` and
    `count`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '|  | sum | count |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| YEAR |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1972 | 1131.0 | 1562 |'
  prefs: []
  type: TYPE_TB
- en: '| 1973 | 1099.0 | 1470 |'
  prefs: []
  type: TYPE_TB
- en: '| 1974 | 1112.0 | 1459 |'
  prefs: []
  type: TYPE_TB
- en: '| 1975 | 1096.0 | 1450 |'
  prefs: []
  type: TYPE_TB
- en: '| 1976 | 1068.0 | 1472 |'
  prefs: []
  type: TYPE_TB
- en: 'The result is a `DataFrame` with two columns: `sum` is the number of respondents
    who said “yes”; `count` is the number of respondents who were asked the question.'
  prefs: []
  type: TYPE_NORMAL
- en: In some years the question was not asked, so I’ll use `drop` to remove those
    rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Now we can plot the percentage of respondents who favor gun control (at least
    for this wording of the question) during each year.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/11_resampling_102_0.png](../Images/bef25f7550a26806a939358f77cde146.png)'
  prefs: []
  type: TYPE_IMG
- en: The results vary from year to year. It is hard to tell how much of this variation
    is due to real changes in opinion, and how much is due to random sampling. In
    the following exercise, you’ll answer that question by computing confidence intervals
    for each of these data points.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** Write a loop that goes through the rows in `agg` and computes
    a confidence interval for each year. You can use `itertuples` to iterate the rows,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: For each row, compute a 90% confidence interval and plot it as a vertical line.
    Then plot the data points and label the axes. The result should give you a sense
    of how much variation we expect to see from year to year due to random sampling.
  prefs: []
  type: TYPE_NORMAL
- en: You might want to use this version of `simulate_group`, which returns results
    as a percentage, rather than per 1000.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s review the examples in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: We started with results from a vaccine trial. We estimated the effectiveness
    of the vaccine and used simulation to draw a random sample from the sampling distribution
    of effectiveness. We used that sample to compute a standard error and a 90% confidence
    interval, which measure the variability we would expect if we ran the experiment
    again (assuming that the observed efficacy is correct).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a second example, we estimated the height of adult males in the U.S. and
    used simulation based on a normal model to compute the sampling distribution of
    the mean, standard error, and a confidence interval.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I presented the resampling framework, which shows what these examples have in
    common. We implemented a second model of the vaccine trial, based on the assumption
    that there is variation in risk within the treatment and control groups. The results
    from both models are similar, which suggests that the simple model is good enough
    for practical purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the advantages of resampling, compared to mathematical analysis, is that
    it is easy to compute the sampling distribution of almost any statistic. As an
    exercise, you computed the sampling distribution of the coefficient of variation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we used data from the General Social Survey to explore changes in support
    for gun control over time. We used resampling to compute and plot a confidence
    interval for the percentage of respondents in favor of a proposed law, for each
    year of the survey.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next chapter presents bootstrap sampling, which is a kind of resampling
    particularly well suited for the kind of survey data we’ve been working with.
  prefs: []
  type: TYPE_NORMAL
