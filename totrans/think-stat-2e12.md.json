["```py\n import statsmodels.formula.api as smf\n\n    live, firsts, others = first.MakeFrames()\n    formula = 'totalwgt_lb ~ agepreg'\n    model = smf.ols(formula, data=live)\n    results = model.fit() \n```", "```py\n inter = results.params['Intercept']\n    slope = results.params['agepreg'] \n```", "```py\n slope_pvalue = results.pvalues['agepreg'] \n```", "```py\n print(results.summary()) \n```", "```py\nIntercept       6.83    (0)\nagepreg         0.0175  (5.72e-11)\nR^2 0.004738\nStd(ys) 1.408\nStd(res) 1.405 \n```", "```py\ndiff_weight = firsts.totalwgt_lb.mean() - others.totalwgt_lb.mean() \n```", "```py\ndiff_age = firsts.agepreg.mean() - others.agepreg.mean() \n```", "```py\nresults = smf.ols('totalwgt_lb ~ agepreg', data=live).fit()\nslope = results.params['agepreg'] \n```", "```py\nslope * diff_age \n```", "```py\n live['isfirst'] = live.birthord == 1\n    formula = 'totalwgt_lb ~ isfirst'\n    results = smf.ols(formula, data=live).fit() \n```", "```py\nIntercept         7.33   (0)\nisfirst[T.True]  -0.125  (2.55e-05)\nR^2 0.00196 \n```", "```py\nIntercept       6.83    (0)\nagepreg         0.0175  (5.72e-11)\nR^2 0.004738 \n```", "```py\nIntercept        6.91    (0)\nisfirst[T.True] -0.0698  (0.0253)\nagepreg          0.0154  (3.93e-08)\nR^2 0.005289 \n```", "```py\n live['agepreg2'] = live.agepreg**2\n    formula = 'totalwgt_lb ~ isfirst + agepreg + agepreg2' \n```", "```py\nIntercept        5.69     (1.38e-86)\nisfirst[T.True] -0.0504   (0.109)\nagepreg          0.112    (3.23e-07)\nagepreg2        -0.00185  (8.8e-06)\nR^2 0.007462 \n```", "```py\n live = live[live.prglngth>30]\n    resp = chap01soln.ReadFemResp()\n    resp.index = resp.caseid\n    join = live.join(resp, on='caseid', rsuffix='_r') \n```", "```py\n t = []\n    for name in join.columns:\n        try:\n            if join[name].var() < 1e-7:\n                continue\n\n            formula = 'totalwgt_lb ~ agepreg + ' + name\n            model = smf.ols(formula, data=join)\n            if model.nobs < len(join)/2:\n                continue\n\n            results = model.fit()\n        except (ValueError, TypeError):\n            continue\n\n        t.append((results.rsquared, name)) \n```", "```py\n t.sort(reverse=True)\n    for mse, name in t[:30]:\n        print(name, mse) \n```", "```py\n formula = ('totalwgt_lb ~ agepreg + C(race) + babysex==1 + '\n               'nbrnaliv>1 + paydu==1 + totincr')\n    results = smf.ols(formula, data=join).fit() \n```", "```py\nIntercept               6.63    (0)\nC(race)[T.2]            0.357   (5.43e-29)\nC(race)[T.3]            0.266   (2.33e-07)\nbabysex == 1[T.True]    0.295   (5.39e-29)\nnbrnaliv > 1[T.True]   -1.38    (5.1e-37)\npaydu == 1[T.True]      0.12    (0.000114)\nagepreg                 0.00741 (0.0035)\ntotincr                 0.0122  (0.00188) \n```", "```py\n o = p / (1-p) \n```", "```py\n p = o / (o+1) \n```", "```py\n o = np.exp(log_o)\n    p = o / (o+1) \n```", "```py\n>>> y = np.array([0, 1, 0, 1])\n>>> x1 = np.array([0, 0, 0, 1])\n>>> x2 = np.array([0, 1, 1, 1]) \n```", "```py\n>>> beta = [-1.5, 2.8, 1.1] \n```", "```py\n>>> log_o = beta[0] + beta[1] * x1 + beta[2] * x2\n[-1.5 -0.4 -0.4  2.4] \n```", "```py\n>>> o = np.exp(log_o)\n[  0.223   0.670   0.670  11.02  ]\n\n>>> p = o / (o+1)\n[ 0.182  0.401  0.401  0.916 ] \n```", "```py\n>>> likes = y * p + (1-y) * (1-p)\n[ 0.817  0.401  0.598  0.916 ] \n```", "```py\n>>> like = np.prod(likes)\n0.18 \n```", "```py\n live, firsts, others = first.MakeFrames()\n    df = live[live.prglngth>30] \n```", "```py\n df['boy'] = (df.babysex==1).astype(int) \n```", "```py\n import statsmodels.formula.api as smf\n\n    model = smf.logit('boy ~ agepreg', data=df)\n    results = model.fit()\n    SummarizeResults(results) \n```", "```py\n endog = pandas.DataFrame(model.endog, columns=[model.endog_names])\n    exog = pandas.DataFrame(model.exog, columns=model.exog_names) \n```", "```py\nIntercept   0.00579   (0.953)\nagepreg     0.00105   (0.783)\nR^2 6.144e-06 \n```", "```py\n formula = 'boy ~ agepreg + hpagelb + birthord + C(race)'\n    model = smf.logit(formula, data=df)\n    results = model.fit() \n```", "```py\nIntercept      -0.0301     (0.772)\nC(race)[T.2]   -0.0224     (0.66)\nC(race)[T.3]   -0.000457   (0.996)\nagepreg        -0.00267    (0.629)\nhpagelb         0.0047     (0.266)\nbirthord        0.00501    (0.821)\nR^2 0.000144 \n```", "```py\n actual = endog['boy']\n    baseline = actual.mean() \n```", "```py\n predict = (results.predict() >= 0.5)\n    true_pos = predict * actual\n    true_neg = (1 - predict) * (1 - actual) \n```", "```py\n acc = (sum(true_pos) + sum(true_neg)) / len(actual) \n```", "```py\n columns = ['agepreg', 'hpagelb', 'birthord', 'race']\n    new = pandas.DataFrame([[35, 39, 3, 2]], columns=columns)\n    y = results.predict(new) \n```"]