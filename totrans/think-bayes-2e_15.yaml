- en: Classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ThinkBayes2/chap12.html](https://allendowney.github.io/ThinkBayes2/chap12.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Classification might be the most well-known application of Bayesian methods,
    made famous in the 1990s as the basis of the first generation of [spam filters](https://en.wikipedia.org/wiki/Naive_Bayes_spam_filtering).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I’ll demonstrate Bayesian classification using data collected
    and made available by Dr. Kristen Gorman at the Palmer Long-Term Ecological Research
    Station in Antarctica (see Gorman, Williams, and Fraser, [“Ecological Sexual Dimorphism
    and Environmental Variability within a Community of Antarctic Penguins (Genus
    *Pygoscelis*)”](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081),
    March 2014). We’ll use this data to classify penguins by species.
  prefs: []
  type: TYPE_NORMAL
- en: Penguin Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ll use Pandas to load the data into a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The dataset contains one row for each penguin and one column for each variable.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|  | studyName | Sample Number | Species | Region | Island | Stage | Individual
    ID | Clutch Completion | Date Egg | Culmen Length (mm) | Culmen Depth (mm) | Flipper
    Length (mm) | Body Mass (g) | Sex | Delta 15 N (o/oo) | Delta 13 C (o/oo) | Comments
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | PAL0708 | 1 | Adelie Penguin (Pygoscelis adeliae) | Anvers | Torgersen
    | Adult, 1 Egg Stage | N1A1 | Yes | 2007-11-11 | 39.1 | 18.7 | 181.0 | 3750.0
    | MALE | NaN | NaN | Not enough blood for isotopes. |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | PAL0708 | 2 | Adelie Penguin (Pygoscelis adeliae) | Anvers | Torgersen
    | Adult, 1 Egg Stage | N1A2 | Yes | 2007-11-11 | 39.5 | 17.4 | 186.0 | 3800.0
    | FEMALE | 8.94956 | -24.69454 | NaN |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | PAL0708 | 3 | Adelie Penguin (Pygoscelis adeliae) | Anvers | Torgersen
    | Adult, 1 Egg Stage | N2A1 | Yes | 2007-11-16 | 40.3 | 18.0 | 195.0 | 3250.0
    | FEMALE | 8.36821 | -25.33302 | NaN |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | PAL0708 | 5 | Adelie Penguin (Pygoscelis adeliae) | Anvers | Torgersen
    | Adult, 1 Egg Stage | N3A1 | Yes | 2007-11-16 | 36.7 | 19.3 | 193.0 | 3450.0
    | FEMALE | 8.76651 | -25.32426 | NaN |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | PAL0708 | 6 | Adelie Penguin (Pygoscelis adeliae) | Anvers | Torgersen
    | Adult, 1 Egg Stage | N3A2 | Yes | 2007-11-16 | 39.3 | 20.6 | 190.0 | 3650.0
    | MALE | 8.66496 | -25.29805 | NaN |</details>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Three species of penguins are represented in the dataset: Adélie, Chinstrap
    and Gentoo.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The measurements we’ll use are:'
  prefs: []
  type: TYPE_NORMAL
- en: Body Mass in grams (g).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flipper Length in millimeters (mm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Culmen Length in millimeters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Culmen Depth in millimeters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are not familiar with the word “culmen”, it refers to the [top margin
    of the beak](https://en.wikipedia.org/wiki/Bird_measurement#Culmen).
  prefs: []
  type: TYPE_NORMAL
- en: These measurements will be most useful for classification if there are substantial
    differences between species and small variation within species. To see whether
    that is true, and to what degree, I’ll plot cumulative distribution functions
    (CDFs) of each measurement for each species.
  prefs: []
  type: TYPE_NORMAL
- en: The following function takes the `DataFrame` and a column name. It returns a
    dictionary that maps from each species name to a `Cdf` of the values in the column
    named `colname`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function plots a `Cdf` of the values in the given column for
    each species:'
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what the distributions look like for culmen length.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]</details> ![_images/5ab5a7f798da6866fe44a8dafc0c49397cfd4f7e232ed60472f2dde56db06b37.png](../Images/b8c137a38b5c6f3c2e546ece3011011d.png)'
  prefs: []
  type: TYPE_NORMAL
- en: It looks like we can use culmen length to identify Adélie penguins, but the
    distributions for the other two species almost entirely overlap.
  prefs: []
  type: TYPE_NORMAL
- en: Here are the distributions for flipper length.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]</details> ![_images/a80e125cfdfe3dce6670cd38ddc6e2979b6337b9e02e863814498185ffb511d8.png](../Images/4a99d73ebdecfc30ee33286333f883ab.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Using flipper length, we can distinguish Gentoo penguins from the other two
    species. So with just these two features, it seems like we should be able to classify
    penguins with some accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: All of these CDFs show the sigmoid shape characteristic of the normal distribution;
    I will take advantage of that observation in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Here are the distributions for culmen depth.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/f46f0996d70e07608878a6c5ba386bbe9d8e8f82ad722907e1b56bc241b32a5d.png](../Images/b323583fb9232123a6225fc7bf2534da.png)</details>'
  prefs: []
  type: TYPE_NORMAL
- en: And here are the distributions of body mass.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/bf89e4f54544ba5a119c06047fc01d36885bdcb9e1049ed5bb58d827a108a394.png](../Images/f2b66ccc02c0cfdaf0c50274c3a0ca2f.png)</details>'
  prefs: []
  type: TYPE_NORMAL
- en: Culmen depth and body mass distinguish Gentoo penguins from the other two species,
    but these features might not add a lot of additional information, beyond what
    we get from flipper length and culmen length.
  prefs: []
  type: TYPE_NORMAL
- en: Normal Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s use these features to classify penguins. We’ll proceed in the usual Bayesian
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a prior distribution with the three possible species and a prior probability
    for each,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute the likelihood of the data for each hypothetical species, and then
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute the posterior probability of each hypothesis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To compute the likelihood of the data under each hypothesis, I’ll use the data
    to estimate the parameters of a normal distribution for each species.
  prefs: []
  type: TYPE_NORMAL
- en: The following function takes a `DataFrame` and a column name; it returns a dictionary
    that maps from each species name to a `norm` object.
  prefs: []
  type: TYPE_NORMAL
- en: '`norm` is defined in SciPy; it represents a normal distribution with a given
    mean and standard deviation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, here’s the dictionary of `norm` objects for flipper length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now suppose we measure a penguin and find that its flipper is 193 cm. What is
    the probability of that measurement under each hypothesis?
  prefs: []
  type: TYPE_NORMAL
- en: The `norm` object provides `pdf`, which computes the probability density function
    (PDF) of the normal distribution. We can use it to compute the likelihood of the
    observed data in a given distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The result is a probability density, so we can’t interpret it as a probability.
    But it is proportional to the likelihood of the data, so we can use it to update
    the prior.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how we compute the likelihood of the data in each distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now we’re ready to do the update.
  prefs: []
  type: TYPE_NORMAL
- en: The Update
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual I’ll use a `Pmf` to represent the prior distribution. For simplicity,
    let’s assume that the three species are equally likely.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Adelie | 0.333333 |'
  prefs: []
  type: TYPE_TB
- en: '| Chinstrap | 0.333333 |'
  prefs: []
  type: TYPE_TB
- en: '| Gentoo | 0.333333 |'
  prefs: []
  type: TYPE_TB
- en: Now we can do the update in the usual way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Adelie | 0.513860 |'
  prefs: []
  type: TYPE_TB
- en: '| Chinstrap | 0.485589 |'
  prefs: []
  type: TYPE_TB
- en: '| Gentoo | 0.000551 |'
  prefs: []
  type: TYPE_TB
- en: A penguin with a 193 mm flipper is unlikely to be a Gentoo, but might be either
    an Adélie or Chinstrap (assuming that the three species were equally likely before
    the measurement).
  prefs: []
  type: TYPE_NORMAL
- en: The following function encapsulates the steps we just ran. It takes a `Pmf`
    representing the prior distribution, the observed data, and a map from each hypothesis
    to the distribution of the feature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The return value is the posterior distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the previous example again, using `update_penguin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Adelie | 0.513860 |'
  prefs: []
  type: TYPE_TB
- en: '| Chinstrap | 0.485589 |'
  prefs: []
  type: TYPE_TB
- en: '| Gentoo | 0.000551 |'
  prefs: []
  type: TYPE_TB
- en: As we saw in the CDFs, flipper length does not distinguish strongly between
    Adélie and Chinstrap penguins.
  prefs: []
  type: TYPE_NORMAL
- en: 'But culmen length *can* make this distinction, so let’s use it to do a second
    round of classification. First we estimate distributions of culmen length for
    each species like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now suppose we see a penguin with culmen length 48 mm. We can use this data
    to update the prior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Adelie | 0.001557 |'
  prefs: []
  type: TYPE_TB
- en: '| Chinstrap | 0.474658 |'
  prefs: []
  type: TYPE_TB
- en: '| Gentoo | 0.523785 |'
  prefs: []
  type: TYPE_TB
- en: A penguin with culmen length 48 mm is about equally likely to be a Chinstrap
    or Gentoo.
  prefs: []
  type: TYPE_NORMAL
- en: Using one feature at a time, we can often rule out one species or another, but
    we generally can’t identify species with confidence. We can do better using multiple
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Naive Bayesian Classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make it easier to do multiple updates, I’ll use the following function, which
    takes a prior `Pmf`, a sequence of measurements and a corresponding sequence of
    dictionaries containing estimated distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It performs a series of updates, using one variable at a time, and returns the
    posterior `Pmf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test it, I’ll use the same features we looked at in the previous section:
    culmen length and flipper length.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now suppose we find a penguin with flipper length 193 mm and culmen length
    48. Here’s the update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Adelie | 0.003455 |'
  prefs: []
  type: TYPE_TB
- en: '| Chinstrap | 0.995299 |'
  prefs: []
  type: TYPE_TB
- en: '| Gentoo | 0.001246 |'
  prefs: []
  type: TYPE_TB
- en: It is almost certain to be a Chinstrap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We can loop through the dataset and classify each penguin with these two features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This loop adds a column called `Classification` to the `DataFrame`; it contains
    the species with the maximum posterior probability for each penguin.
  prefs: []
  type: TYPE_NORMAL
- en: So let’s see how many we got right.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: There are 344 penguins in the dataset, but two of them are missing measurements,
    so we have 342 valid cases. Of those, 324 are classified correctly, which is almost
    95%.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The following function encapsulates these steps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The classifier we used in this section is called “naive” because it ignores
    correlations between the features. To see why that matters, I’ll make a less naive
    classifier: one that takes into account the joint distribution of the features.'
  prefs: []
  type: TYPE_NORMAL
- en: Joint Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ll start by making a scatter plot of the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Here’s a scatter plot of culmen length and flipper length for the three species.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/d96a227c04944a1a0218d1fa9e149290f1b76c465aed44f063e014a885c7da90.png](../Images/05e910ded4f9a2362d822d7dd7c7567e.png)'
  prefs: []
  type: TYPE_IMG
- en: Within each species, the joint distribution of these measurements forms an oval
    shape, at least roughly. The orientation of the ovals is along a diagonal, which
    indicates that there is a correlation between culmen length and flipper length.
  prefs: []
  type: TYPE_NORMAL
- en: If we ignore these correlations, we are assuming that the features are independent.
    To see what that looks like, I’ll make a joint distribution for each species assuming
    independence.
  prefs: []
  type: TYPE_NORMAL
- en: The following function makes a discrete `Pmf` that approximates a normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We can use it, along with `make_joint`, to make a joint distribution of culmen
    length and flipper length for each species.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The following figure compares a scatter plot of the data to the contours of
    the joint distributions, assuming independence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/0e26242ba1711182e3b00a74d762ad21182ab3b9d34bde74b0516a1e48f57d75.png](../Images/3852694f6babd3aaccf3151fc6949f89.png)'
  prefs: []
  type: TYPE_IMG
- en: The contours of a joint normal distribution form ellipses. In this example,
    because the features are uncorrelated, the ellipses are aligned with the axes.
    But they are not well aligned with the data.
  prefs: []
  type: TYPE_NORMAL
- en: We can make a better model of the data, and use it to compute better likelihoods,
    with a multivariate normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Multivariate Normal Distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen, a univariate normal distribution is characterized by its mean
    and standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: A multivariate normal distribution is characterized by the means of the features
    and the **covariance matrix**, which contains **variances**, which quantify the
    spread of the features, and the **covariances**, which quantify the relationships
    among them.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the data to estimate the means and covariance matrix for the population
    of penguins. First I’ll select the columns we want.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: And compute the means.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also compute the covariance matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '|  | Flipper Length (mm) | Culmen Length (mm) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Flipper Length (mm) | 197.731792 | 50.375765 |'
  prefs: []
  type: TYPE_TB
- en: '| Culmen Length (mm) | 50.375765 | 29.807054 |'
  prefs: []
  type: TYPE_TB
- en: The result is a `DataFrame` with one row and one column for each feature. The
    elements on the diagonal are the variances; the elements off the diagonal are
    covariances.
  prefs: []
  type: TYPE_NORMAL
- en: By themselves, variances and covariances are hard to interpret. We can use them
    to compute standard deviations and correlation coefficients, which are easier
    to interpret, but the details of that calculation are not important right now.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we’ll pass the covariance matrix to `multivariate_normal`, which is
    a SciPy function that creates an object that represents a multivariate normal
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'As arguments it takes a sequence of means and a covariance matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The following function makes a `multivariate_normal` object for each species.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Here’s how we make this map for the first two features, flipper length and culmen
    length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing a Multivariate Normal Distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section uses some NumPy magic to generate contour plots for multivariate
    normal distributions. If that’s interesting for you, great! Otherwise, feel free
    to skip to the results. In the next section we’ll do the actual classification,
    which turns out to be easier than the visualization.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll start by making a contour map for the distribution of features among Adélie
    penguins.
  prefs: []
  type: TYPE_NORMAL
- en: Here are the univariate distributions for the two features we’ll use and the
    multivariate distribution we just computed.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll make a discrete `Pmf` approximation for each of the univariate distributions.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: And use them to make a mesh grid that contains all pairs of values.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: 'The mesh is represented by two arrays: the first contains the quantities from
    `pmf1` along the `x` axis; the second contains the quantities from `pmf2` along
    the `y` axis.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to evaluate the multivariate distribution for each pair of values,
    we have to “stack” the arrays.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: The result is a 3-D array that you can think of as a 2-D array of pairs. When
    we pass this array to `multinorm.pdf`, it evaluates the probability density function
    of the distribution for each pair of values.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: The result is an array of probability densities. If we put them in a `DataFrame`
    and normalize them, the result is a discrete approximation of the joint distribution
    of the two features.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what the result looks like.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/f3a72939d6d0caab91885ed82624e972b4ec70bbf8414ced4530d78dc006626f.png](../Images/b9c688d93ec6509847a39b2b77b5523f.png)</details>'
  prefs: []
  type: TYPE_NORMAL
- en: The contours of a multivariate normal distribution are still ellipses, but now
    that we have taken into account the correlation between the features, the ellipses
    are no longer aligned with the axes.
  prefs: []
  type: TYPE_NORMAL
- en: The following function encapsulate the steps we just did.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows a scatter plot of the data along with the contours
    of the multivariate normal distribution for each species.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]</details> ![_images/08de60fde36512b3133ebdbb5b01ec9ca075bca22b44eae1e7dab0dc614b04e7.png](../Images/57660d1dd8078042b67f801db25b8a03.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Because the multivariate normal distribution takes into account the correlations
    between features, it is a better model for the data. And there is less overlap
    in the contours of the three distributions, which suggests that they should yield
    better classifications.
  prefs: []
  type: TYPE_NORMAL
- en: A Less Naive Classifier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a previous section we used `update_penguin` to update a prior `Pmf` based
    on observed data and a collection of `norm` objects that model the distribution
    of observations under each hypothesis. Here it is again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Last time we used this function, the values in `norm_map` were `norm` objects,
    but it also works if they are `multivariate_normal` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use it to classify a penguin with flipper length 193 and culmen length
    48:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Adelie | 0.002740 |'
  prefs: []
  type: TYPE_TB
- en: '| Chinstrap | 0.997257 |'
  prefs: []
  type: TYPE_TB
- en: '| Gentoo | 0.000003 |'
  prefs: []
  type: TYPE_TB
- en: A penguin with those measurements is almost certainly a Chinstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s see if this classifier does any better than the naive Bayesian classifier.
    I’ll apply it to each penguin in the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'And compute the accuracy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'It turns out to be only a little better: the accuracy is 95.3%, compared to
    94.7% for the naive Bayesian classifier.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we implemented a naive Bayesian classifier, which is “naive”
    in the sense that it assumes that the features it uses for classification are
    independent.
  prefs: []
  type: TYPE_NORMAL
- en: To see how bad that assumption is, we also implemented a classifier that uses
    a multivariate normal distribution to model the joint distribution of the features,
    which includes their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the non-naive classifier is only marginally better. In one
    way, that’s disappointing. After all that work, it would have been nice to see
    a bigger improvement. But in another way, it’s good news. In general, a naive
    Bayesian classifier is easier to implement and requires less computation. If it
    works nearly as well as a more complex algorithm, it might be a good choice for
    practical purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of practical purposes, you might have noticed that this example isn’t
    very useful. If we want to identify the species of a penguin, there are easier
    ways than measuring its flippers and beak.
  prefs: []
  type: TYPE_NORMAL
- en: 'But there *are* scientific uses for this type of classification. One of them
    is the subject of the research paper we started with: [sexual dimorphism](https://en.wikipedia.org/wiki/Sexual_dimorphism),
    that is, differences in shape between male and female animals.'
  prefs: []
  type: TYPE_NORMAL
- en: In some species, like angler fish, males and females look very different. In
    other species, like mockingbirds, they are difficult to tell apart. And dimorphism
    is worth studying because it provides insight into social behavior, sexual selection,
    and evolution.
  prefs: []
  type: TYPE_NORMAL
- en: One way to quantify the degree of sexual dimorphism in a species is to use a
    classification algorithm like the one in this chapter. If you can find a set of
    features that makes it possible to classify individuals by sex with high accuracy,
    that’s evidence of high dimorphism.
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, you can use the dataset from this chapter to classify penguins
    by sex and see which of the three species is the most dimorphic.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Exercise:** In my example I used culmen length and flipper length because
    they seemed to provide the most power to distinguish the three species. But maybe
    we can do better by using more features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a naive Bayesian classifier that uses all four measurements in the dataset:
    culmen length and depth, flipper length, and body mass. Is it more accurate than
    the model with two features?'
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** One of the reasons the penguin dataset was collected was to quantify
    sexual dimorphism in different penguin species, that is, physical differences
    between male and female penguins. One way to quantify dimorphism is to use measurements
    to classify penguins by sex. If a species is more dimorphic, we expect to be able
    to classify them more accurately.'
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, pick a species and use a Bayesian classifier (naive or not)
    to classify the penguins by sex. Which features are most useful? What accuracy
    can you achieve?
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: One Gentoo penguin has an invalid value for `Sex`. I used the following
    code to select one species and filter out invalid data.'
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: OK, you can finish it off from here.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/593695247d65a10544511b5927c317a34961b74aa28b0b8262f09e23dc689ed0.png](../Images/6f185a1764714033ce3fadae7faa3dd2.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/849af936f99c3a4d8967490da0ee99cf202b4ae1d50a9228de5bd1cf929ff2c6.png](../Images/478c601e168af9c1103e0a86f2b8ee43.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/00a72695a4dabd6313d863e44bab5a4aa428ed6f1190b4fb1ad50bc1dd4e7785.png](../Images/a8ee412d8b0bfcc92548ac420df21575.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/ff52a4c0adc07d4e1fa5c37434ef6ce625f9b8f831b1ea9da492b30eb5ee5a05.png](../Images/de3f103c40a5b9d88fda92d0ad0b3c28.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| FEMALE | 0.5 |'
  prefs: []
  type: TYPE_TB
- en: '| MALE | 0.5 |</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]</details>'
  prefs: []
  type: TYPE_NORMAL
