- en: Quiz 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/DSIRP/quiz02.html](https://allendowney.github.io/DSIRP/quiz02.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'BEFORE YOU START THIS QUIZ:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on “Copy to Drive” to make a copy of the quiz,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on “Share”,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on “Change” and select “Anyone with this link can edit”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click “Copy link” and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the link into [this Canvas assignment](https://canvas.olin.edu/courses/313/assignments/4929).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This quiz is open notes, open internet. The only thing you can’t do is ask for
    help.
  prefs: []
  type: TYPE_NORMAL
- en: Copyright 2021 Allen Downey, [MIT License](http://opensource.org/licenses/MIT)
  prefs: []
  type: TYPE_NORMAL
- en: Question 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you have a function that takes a lot of options; some are required and
    some are optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you run the function, you might want to check that:'
  prefs: []
  type: TYPE_NORMAL
- en: All required options are provided, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No illegal options are provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, suppose this dictionary contains the provided options and their
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And suppose that only `a` is required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And the optional arguments are `b`, and `c`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: An option is legal if it is required or optional. All other options are illegal.
  prefs: []
  type: TYPE_NORMAL
- en: Write a function called `check_options` that takes a dictionary of options and
    their values, a sequence of required options, and a sequence of options that are
    legal but not required.
  prefs: []
  type: TYPE_NORMAL
- en: It should check that all required options are provided and, if not, print an
    error message that lists the ones that are missing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It should check that all provided options are legal and, if not, print an error
    message that lists the ones that are illegal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For full credit, you must use set operations when they are appropriate rather
    than writing `for` loops.
  prefs: []
  type: TYPE_NORMAL
- en: The following test should display nothing because the dictionary contains all
    required options and no illegal ones.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The following test should print an error message because the dictionary is missing
    a required option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The following test should display an error message because the dictionary contains
    an illegal option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Question 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The set method `symmetric_difference` operates on two sets and computes the
    set of elements that appear in either set but not both.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The symmetric difference operation is also defined for more that two sets. It
    computes **the set of elements that appear in an odd number of sets**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `symmetric_difference` method can only handle two sets (unlike some of
    the other set methods), but you can chain the method like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: However, for the sake of the exercise, let’s suppose we don’t have the set method
    `symmetric_difference` the equivalent `^` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Write a function that takes a list of sets as a parameter, computes their symmetric
    difference, and returns the result as a `set`.
  prefs: []
  type: TYPE_NORMAL
- en: Use the following tests to check your function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Question 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write a generator function called `evens_and_odds` that takes a list of integers
    and yields:'
  prefs: []
  type: TYPE_NORMAL
- en: All of the elements of the list that are even, followed by
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the elements of the list that are odd.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, if the list is `[1, 2, 4, 7]`, the sequence of values generated
    should be `2, 4, 1, 7`.
  prefs: []
  type: TYPE_NORMAL
- en: Use this example to test your function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As a challenge, JUST FOR FUN, write a version of this function that works if
    the argument is an iterator that you can only iterate once.
  prefs: []
  type: TYPE_NORMAL
- en: Question 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following string contains the lyrics of a [well-known song](https://youtu.be/dQw4w9WgXcQ?t=43).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The following generator function yields the words in `lyrics` one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Write a few lines of code that use `generate_lyrics` to iterate through the
    words **only once** and build a dictionary that maps from each word to the set
    of words that follow it.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the first two entries in the dictionary should be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: because in `lyrics`, the word “Never” is always followed by “gonna”, and the
    word “gonna” is followed by six different words.
  prefs: []
  type: TYPE_NORMAL
