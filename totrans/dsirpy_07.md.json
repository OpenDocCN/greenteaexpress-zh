["```py\ndef fibonacci(stop):\n    a, b = 0, 1\n    while a < stop:\n        yield a\n        a, b = b, a + b \n```", "```py\nf = {n for n in fibonacci(10)}\nf \n```", "```py\n{0, 1, 2, 3, 5, 8} \n```", "```py\ndef primes(stop):\n    m = {}\n    q = 2\n    while q < stop:\n        if q not in m:\n            yield q \n            m[q*q] = [q]\n        else:\n            for p in m[q]:\n                m.setdefault(p+q, []).append(p)\n            del m[q]\n        q += 1 \n```", "```py\np = {n for n in primes(10)}\np \n```", "```py\n{2, 3, 5, 7} \n```", "```py\n8 in f \n```", "```py\nTrue \n```", "```py\n8 in p \n```", "```py\nFalse \n```", "```py\nf & p \n```", "```py\n{2, 3, 5} \n```", "```py\nf | p \n```", "```py\n{0, 1, 2, 3, 5, 7, 8} \n```", "```py\nf ^ p \n```", "```py\n{0, 1, 7, 8} \n```", "```py\nf - p \n```", "```py\n{0, 1, 8} \n```", "```py\np - f \n```", "```py\n{7} \n```", "```py\nf >= p \n```", "```py\nFalse \n```", "```py\np >= f \n```", "```py\nFalse \n```", "```py\nf >= {1, 2, 3} \n```", "```py\nTrue \n```", "```py\np >= {1, 2, 3} \n```", "```py\nFalse \n```", "```py\ntry:\n    f >= [1, 2, 3]\nexcept TypeError as e:\n    print(e) \n```", "```py\n'>=' not supported between instances of 'set' and 'list' \n```", "```py\nf.issuperset([1,2,3]) \n```", "```py\nTrue \n```", "```py\nf.union([1,2,3], (3,4,5), {5,6,7}, {7:'a', 8:'b'}) \n```", "```py\n{0, 1, 2, 3, 4, 5, 6, 7, 8} \n```", "```py\nset().union([1,2,3], (3,4,5), {5,6,7}, {7:'a', 8:'b'}) \n```", "```py\n{1, 2, 3, 4, 5, 6, 7, 8} \n```", "```py\ndef uses_only(word, letters):\n    for letter in word:\n        if letter not in letters:\n            return False\n    return True \n```", "```py\nletters = \"dehiklo\"\nuses_only('lode', letters) \n```", "```py\nTrue \n```", "```py\nuses_only('implode', letters) \n```", "```py\nFalse \n```", "```py\nuses_only('lode', letters) \n```", "```py\nTrue \n```", "```py\nuses_only('implode', letters) \n```", "```py\nFalse \n```", "```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/DSIRP/raw/main/american-english') \n```", "```py\nword_list = open('american-english').read().split()\nlen(word_list) \n```", "```py\n102401 \n```", "```py\ndef bad_letters(word, letters):\n    return set(word) - set(letters) \n```", "```py\nbad_letters('oilfield', letters) \n```", "```py\n{'f'} \n```"]