["```py\nimport sys\n\nIN_COLAB = 'google.colab' in sys.modules\n\nif IN_COLAB:\n    !pip  install  redis-server\n    !/usr/local/lib/python*/dist-packages/redis_server/bin/redis-server  --daemonize  yes\nelse:\n    !redis-server  --daemonize  yes \n```", "```py\n341134:C 20 Dec 2021 15:10:27.756 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n341134:C 20 Dec 2021 15:10:27.756 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=341134, just started\n341134:C 20 Dec 2021 15:10:27.756 # Configuration loaded \n```", "```py\ntry:\n    import redis\nexcept ImportError:\n    !pip  install  redis \n```", "```py\nimport redis\n\nr = redis.Redis() \n```", "```py\nr.set('key', 'value') \n```", "```py\nTrue \n```", "```py\nr.get('key') \n```", "```py\nb'value' \n```", "```py\nr.set('x', 5) \n```", "```py\nTrue \n```", "```py\nr.incr('x') \n```", "```py\n6 \n```", "```py\nvalue = r.get('x')\nvalue \n```", "```py\nb'6' \n```", "```py\nint(value) \n```", "```py\n6 \n```", "```py\nd = dict(x=5, y='string', z=1.23)\nr.mset(d) \n```", "```py\nTrue \n```", "```py\nr.get('y') \n```", "```py\nb'string' \n```", "```py\nr.get('z') \n```", "```py\nb'1.23' \n```", "```py\nfrom redis import DataError\n\nt = [1, 2, 3]\n\ntry:\n    r.set('t', t)\nexcept DataError as e:\n    print(e) \n```", "```py\nInvalid input of type: 'list'. Convert to a bytes, string, int or float first. \n```", "```py\nimport json\n\nt = [1, 2, 3]\ns = json.dumps(t)\ns \n```", "```py\n'[1, 2, 3]' \n```", "```py\nt = json.loads(s)\nt \n```", "```py\n[1, 2, 3] \n```", "```py\nr.rpush('t', 1, 2, 3) \n```", "```py\n3 \n```", "```py\nr.llen('t') \n```", "```py\n3 \n```", "```py\nr.lrange('t', 0, -1) \n```", "```py\n[b'1', b'2', b'3'] \n```", "```py\nr.rpop('t') \n```", "```py\nb'3' \n```", "```py\nr.lpush('t', -3, -2, -1) \n```", "```py\n5 \n```", "```py\nr.lpop('t') \n```", "```py\nb'-1' \n```", "```py\nr.hset('h', 'field', 'value') \n```", "```py\n1 \n```", "```py\nr.hget('h', 'field') \n```", "```py\nb'value' \n```", "```py\nd = dict(a=1, b=2, c=3)\nr.hset('h', mapping=d) \n```", "```py\n3 \n```", "```py\nfor field, value in r.hscan_iter('h'):\n    print(field, value) \n```", "```py\nb'field' b'value'\nb'a' b'1'\nb'b' b'2'\nb'c' b'3' \n```", "```py\nfor key in r.keys():\n    r.delete(key) \n```", "```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/DSIRP/raw/main/american-english') \n```", "```py\ndef iterate_words(filename):\n  \"\"\"Read lines from a file and split them into words.\"\"\"\n    for line in open(filename):\n        for word in line.split():\n            yield word.strip() \n```", "```py\ndef signature(word):\n    return ''.join(sorted(word)) \n```", "```py\nanagram_dict = {}\nfor word in iterate_words('american-english'):\n    key = signature(word)\n    anagram_dict.setdefault(key, []).append(word) \n```", "```py\nfor v in anagram_dict.values():\n    if len(v) >= 6:\n        print(len(v), v) \n```", "```py\n6 ['abets', 'baste', 'bates', 'beast', 'beats', 'betas']\n6 ['aster', 'rates', 'stare', 'tares', 'taser', 'tears']\n6 ['caret', 'cater', 'crate', 'react', 'recta', 'trace']\n7 ['carets', 'caster', 'caters', 'crates', 'reacts', 'recast', 'traces']\n6 ['drapes', 'padres', 'parsed', 'rasped', 'spared', 'spread']\n6 ['lapse', 'leaps', 'pales', 'peals', 'pleas', 'sepal']\n6 ['least', 'slate', 'stale', 'steal', 'tales', 'teals']\n6 ['opts', 'post', 'pots', 'spot', 'stop', 'tops']\n6 ['palest', 'pastel', 'petals', 'plates', 'pleats', 'staple']\n7 ['pares', 'parse', 'pears', 'rapes', 'reaps', 'spare', 'spear'] \n```", "```py\nfor word in iterate_words('american-english'):\n    key = f'Anagram:{signature(word)}'\n    r.rpush(key, word) \n```", "```py\nkeys = r.keys('Anagram*')\nlen(keys) \n```", "```py\n96936 \n```", "```py\nr.delete(*keys) \n```", "```py\n96936 \n```", "```py\nhash_key = 'AnagramHash'\nfor field, t in anagram_dict.items():\n    value = json.dumps(t)\n    r.hset(hash_key, field, value) \n```", "```py\nr.delete(hash_key) \n```", "```py\n1 \n```", "```py\n!killall  redis-server \n```"]