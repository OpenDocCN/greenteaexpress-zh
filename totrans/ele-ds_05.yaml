- en: Lists and Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ElementsOfDataScience/03_arrays.html](https://allendowney.github.io/ElementsOfDataScience/03_arrays.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Click here to run this notebook on Colab](https://colab.research.google.com/github/AllenDowney/ElementsOfDataScience/blob/master/03_arrays.ipynb)
    or [click here to download it](https://github.com/AllenDowney/ElementsOfDataScience/raw/master/03_arrays.ipynb).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter we used tuples to represent latitude and longitude.
    In this chapter, you’ll see how to use tuples more generally to represent a sequence
    of values. And we’ll see two more ways to represent sequences: lists and arrays.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: You might wonder why we need three ways to represent the same thing. Most of
    the time we don’t, but each of them has different capabilities. For work with
    data, we will use arrays most of the time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we will use a small dataset from an article in *The Economist*
    about the price of sandwiches. It’s a silly example, but I’ll use it to introduce
    the idea of relative differences and different ways to summarize them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Tuples
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A tuple is a sequence of elements. When we use a tuple to represent latitude
    and longitude, the sequence only contains two elements, and they are both floating-point
    numbers. But in general a tuple can contain any number of elements, and the elements
    can be values of any type. The following is a tuple of three integers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that when Python displays a tuple, it puts the elements in parentheses.
    When you type a tuple, you can put it in parentheses if you think it is easier
    to read that way, but you don’t have to.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'The elements can be any type. Here’s a tuple of strings:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The elements don’t have to be the same type. Here’s a tuple with a string, an
    integer, and a floating-point number.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you have a string, you can convert it to a tuple using the `tuple` function:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The result is a tuple of single-character strings.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a tuple, the parentheses are optional, but the commas are required.
    So how do you think you create a tuple with a single element? You might be tempted
    to write:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'But you will find that the result is just a number, not a tuple. To make a
    tuple with a single element, you need a comma:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That might look funny, but it does the job.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python provides another way to store a sequence of elements: a **list**.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: To create a list, you put a sequence of elements in square brackets.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Lists and tuples are very similar. They can contain any number of elements,
    the elements can be any type, and the elements don’t have to be the same type.
    The difference is that you can modify a list; tuples are **immutable** (cannot
    be modified). This difference will matter later, but for now we can ignore it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'When you make a list, the brackets are required, but if there is a single element,
    you don’t need a comma. So you can make a list like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It is also possible to make a list with no elements, like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `len` function returns the length (number of elements) in a list or tuple.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Exercise:** Create a list with 4 elements; then use `type` to confirm that
    it’s a list, and `len` to confirm that it has 4 elements.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot more we could do with lists, but that’s enough to get started.
    In the next section, we’ll use lists to store data about sandwich prices.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Sandwich Prices
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In September 2019, *The Economist* published an article comparing sandwich
    prices in Boston and London: “[Why Americans pay more for lunch than Britons do](https://www.economist.com/finance-and-economics/2019/09/07/why-americans-pay-more-for-lunch-than-britons-do)”.
    It includes this graph showing prices of several sandwiches in the two cities:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5feb03c573c0b858be44a006b68b3324.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Here are the sandwich names from the graph, as a list of strings.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'I contacted *The Economist* to ask for the data they used to create that graph,
    and they were kind enough to share it with me. Here are the sandwich prices in
    Boston:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here are the prices in London, converted to dollars at $1.25 / £1.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是伦敦的价格，以1.25美元/英镑的汇率转换成美元。
- en: '[PRE20]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Lists provide some arithmetic operators, but they might not do what you want.
    For example, you can “add” two lists:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列表提供了一些算术运算符，但它们可能不会得到你想要的结果。例如，你可以“相加”两个列表：
- en: '[PRE21]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: But it concatenates the two lists, which is not very useful in this example.
    To compute differences between prices, you might try subtracting lists, but you
    would get an error.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但它连接了这两个列表，在这个例子中并不是很有用。要计算价格之间的差异，你可以尝试减去列表，但会得到一个错误。
- en: We can solve this problem with NumPy.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用NumPy解决这个问题。
- en: NumPy Arrays
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy数组
- en: We’ve already seen that the NumPy library provides math functions. It also provides
    a type of sequence called an **array**. You can create a new array with the `np.array`
    function, starting with a list or tuple.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到NumPy库提供了数学函数。它还提供了一种称为**数组**的序列类型。你可以使用`np.array`函数创建一个新数组，从一个列表或元组开始。
- en: '[PRE23]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The type of the result is `numpy.ndarray`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的类型是`numpy.ndarray`。
- en: '[PRE24]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The “nd” stands for “n-dimensional”, which indicates that NumPy arrays can
    have any number of dimensions. But for now we will work with one-dimensional sequences.
    If you display an array, Python displays the elements:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “nd”代表“n维”，这表明NumPy数组可以有任意数量的维度。但现在我们将使用一维序列。如果你显示一个数组，Python会显示元素：
- en: '[PRE26]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can also display the **data type** of the array, which is the type of the
    elements:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以显示数组的**数据类型**，即元素的类型：
- en: '[PRE28]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`float64` means that the elements are floating-point numbers that take up 64
    bits each. You don’t need to know about the storage format of these numbers, but
    if you are curious, you can read about it at [https://en.wikipedia.org/wiki/Floating-point_arithmetic#Internal_representation](https://en.wikipedia.org/wiki/Floating-point_arithmetic#Internal_representation).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`float64`表示元素是占据64位的浮点数。你不需要了解这些数字的存储格式，但如果你感兴趣，可以在[https://en.wikipedia.org/wiki/Floating-point_arithmetic#Internal_representation](https://en.wikipedia.org/wiki/Floating-point_arithmetic#Internal_representation)上阅读相关内容。'
- en: The elements of a NumPy array can be any type, but they all have to be the same
    type. Most often the elements are numbers, but you can also make an array of strings.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组的元素可以是任何类型，但它们都必须是相同的类型。最常见的情况是元素是数字，但你也可以创建一个字符串数组。
- en: '[PRE30]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this example, the `dtype` is `<U17`. The `U` indicates that the elements
    are Unicode strings; Unicode is the standard Python uses to represent strings.
    The number `17` is the length of the longest string in the array.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`dtype`是`<U17`。`U`表示元素是Unicode字符串；Unicode是Python用来表示字符串的标准。数字`17`是数组中最长字符串的长度。
- en: 'Now, here’s why NumPy arrays are useful: they can do arithmetic. For example,
    to compute the differences between Boston and London prices, we can write:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这就是为什么NumPy数组很有用的原因：它们可以进行算术运算。例如，要计算波士顿和伦敦价格之间的差异，我们可以这样写：
- en: '[PRE32]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Subtraction is done **elementwise**; that is, NumPy lines up the two arrays
    and subtracts corresponding elements. The result is a new array.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 减法是**逐元素**进行的；也就是说，NumPy将两个数组对齐并相减对应的元素。结果是一个新数组。
- en: Statistical Summaries
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 统计摘要
- en: 'NumPy provides functions that compute statistical summaries like the mean:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy提供了计算统计摘要的函数，比如均值：
- en: '[PRE34]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'So we could describe the difference in prices like this: “Sandwiches in Boston
    are more expensive by $2.64, on average”. We could also compute the means first,
    and then compute their difference:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以这样描述价格的差异：“波士顿的三明治平均更贵2.64美元”。我们也可以先计算均值，然后计算它们的差异：
- en: '[PRE36]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'And that turns out to be the same thing: the difference in means is the same
    as the mean of the differences. As an aside, many of the NumPy functions also
    work with lists, so we could also do this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一样的：均值的差异与差异的均值是一样的。顺便说一句，许多NumPy函数也适用于列表，所以我们也可以这样做：
- en: '[PRE38]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Exercise:** Standard deviation is way to quantify the variability in a set
    of numbers. The NumPy function that computes standard deviation is `np.std`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**标准差是衡量一组数字变异性的方法。计算标准差的NumPy函数是`np.std`。'
- en: Compute the standard deviation of sandwich prices in Boston and London. By this
    measure, which set of prices is more variable?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 计算波士顿和伦敦三明治价格的标准差。按照这个度量，哪组价格更具变异性？
- en: '**Exercise:** The definition of the mean, in math notation, is'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**均值的定义，在数学符号中，是'
- en: \(\mu = \frac{1}{N} \sum_i x_i\)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: \(\mu = \frac{1}{N} \sum_i x_i\)
- en: where \(x\) is a sequence of elements, \(x_i\) is the element with index \(i\),
    and \(N\) is the number of elements. The definition of standard deviation is
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其中\(x\)是一个元素序列，\(x_i\)是索引为\(i\)的元素，\(N\)是元素的数量。标准差的定义是
- en: \(\sigma = \sqrt{\frac{1}{N} \sum_i (x_i - \mu)^2}\)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: \(\sigma = \sqrt{\frac{1}{N} \sum_i (x_i - \mu)^2}\)
- en: Compute the standard deviation of `boston_price_list` using NumPy functions
    `np.mean` and `np.sqrt` and see if you get the same result as `np.std`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NumPy函数`np.mean`和`np.sqrt`计算`boston_price_list`的标准差，看看是否得到与`np.std`相同的结果。
- en: You can (and should) do this exercise using only features we have discussed
    so far.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以（也应该）只使用我们到目前为止讨论过的功能来完成这个练习。
- en: This definition of standard deviation is sometimes called the “population standard
    deviation”. You might have seen another definition with \(N-1\) in the denominator;
    that’s the “sample standard deviation”. We’ll use the population standard deviation
    for now and come back to this issue later.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这种标准差的定义有时被称为“总体标准差”。你可能见过分母中有\(N-1\)的另一种定义；那是“样本标准差”。我们现在使用总体标准差，稍后再回到这个问题。
- en: Relative Difference
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相对差异
- en: In the previous section we computed differences between prices. But often when
    we make this kind of comparison, we are interested in **relative differences**,
    which are differences expressed as a fraction or percentage of a quantity.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们计算了价格之间的差异。但通常当我们进行这种比较时，我们对**相对差异**感兴趣，这是以某个数量的分数或百分比表示的差异。
- en: 'Taking the lobster roll as an example, the difference in price is:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以龙虾卷为例，价格的差异是：
- en: '[PRE40]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We can express that difference as a fraction of the London price, like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这种差异表示为伦敦价格的一部分，就像这样：
- en: '[PRE42]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Or as a *percentage* of the London price, like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 或者作为伦敦价格的*百分比*，就像这样：
- en: '[PRE44]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'So we might say that the lobster roll is 33% more expensive in Boston. But
    putting London in the denominator was an arbitrary choice. We could also compute
    the difference as a percentage of the Boston price:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以说波士顿的龙虾卷贵了33%。但将伦敦放在分母是一个任意的选择。我们也可以将差异计算为波士顿价格的百分比：
- en: '[PRE46]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If we do that calculation, we might say the lobster roll is 25% cheaper in London.
    When you read this kind of comparison, you should make sure you understand which
    quantity is in the denominator, and you might want to think about why that choice
    was made. In this example, if you want to make the difference seem bigger, you
    might put London prices in the denominator.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进行这样的计算，我们可能会说在伦敦龙虾卷要便宜25%。当你阅读这种比较时，你应该确保你理解了分母是哪个量，并且你可能想想为什么会做出这样的选择。在这个例子中，如果你想让差异看起来更大，你可能会把伦敦的价格放在分母中。
- en: 'If we do the same calculation with the arrays `boston_price_array` and `boston_price_array`,
    we can compute the relative differences for all sandwiches:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用`boston_price_array`和`boston_price_array`数组进行相同的计算，我们可以计算所有三明治的相对差异：
- en: '[PRE48]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: And the percent differences.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以及百分差异。
- en: '[PRE50]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Summarizing Relative Differences
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结相对差异
- en: Now let’s think about how to summarize an array of percentage differences. One
    option is to report the range, which we can compute with `np.min` and `np.max`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑如何总结百分差异的数组。一个选择是报告范围，我们可以用`np.min`和`np.max`来计算。
- en: '[PRE52]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The lobster roll is only 33% more expensive in Boston; the egg sandwich is 121%
    percent more (that is, more than twice the price).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在波士顿，龙虾卷只贵了33%；而鸡蛋三明治贵了121%（也就是说，价格是原来的两倍多）。
- en: '**Exercise:** What are the percent differences if we put the Boston prices
    in the denominator? What is the range of those differences? Write a sentence that
    summarizes the results.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**如果我们把波士顿的价格放在分母，百分差异是多少？这些差异的范围是多少？写一句话总结结果。'
- en: Another way to summarize percentage differences is to report the mean.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 总结百分差异的另一种方法是报告平均值。
- en: '[PRE54]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'So we might say, on average, sandwiches are 65% more expensive in Boston. But
    another way to summarize the data is to compute the mean price in each city, and
    then compute the percentage difference of the means:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以说，平均而言，波士顿的三明治价格要贵65%。但另一种总结数据的方法是计算每个城市的平均价格，然后计算平均数的百分比差异：
- en: '[PRE56]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'So we might say that the average sandwich price is 56% higher in Boston. As
    this example demonstrates:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以说波士顿的三明治平均价格要高56%。正如这个例子所示：
- en: With relative and percentage differences, the mean of the differences is not
    the same as the difference of the means.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于相对和百分差异，差异的平均值与平均数的差异不同。
- en: When you report data like this, you should think about different ways to summarize
    the data.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你报告这样的数据时，你应该考虑不同的总结数据的方法。
- en: When you read a summary of data like this, make sure you understand what summary
    was chosen and what it means.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你阅读这样的数据总结时，确保你理解选择了什么总结以及它的含义。
- en: In this example, I think the second option (the relative difference in the means)
    is more meaningful, because it reflects the difference in price between “baskets
    of goods” that include one of each sandwich.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我认为第二个选择（平均数的相对差异）更有意义，因为它反映了包括每种三明治的“商品篮子”之间的价格差异。
- en: Debugging
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: So far, most of the exercises have only required a few lines of code. If you
    made errors along the way, you probably found them quickly.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，大多数练习只需要几行代码。如果你在这个过程中犯了错误，你可能会很快发现它们。
- en: As we go along, the exercises will be more substantial, and you may find yourself
    spending more time debugging. Here are a couple of suggestions to help you find
    errors quickly – and avoid them in the first place.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 随着练习的进行，难度会更大，你可能会花更多时间进行调试。以下是一些建议，可以帮助你快速找到错误，并在一开始就避免错误。
- en: Most importantly, you should develop code incrementally; that is, you should
    write a small amount of code and test it. If it works, add more code; otherwise,
    debug what you have.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的是，你应该逐步开发代码；也就是说，你应该编写少量的代码并进行测试。如果它有效，就添加更多的代码；否则，调试你已经有的代码。
- en: Conversely, if you have written too much code, and you are having a hard time
    debugging it, split it into smaller chunks and debug them separately.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相反，如果你写了太多的代码，而且很难进行调试，可以将其分成较小的块，并分别进行调试。
- en: 'For example, suppose you want to compute, for each sandwich in the sandwich
    list, the midpoint of the Boston and London prices. As a first draft, you might
    write something like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想计算三明治列表中每个三明治的波士顿和伦敦价格的中点。作为初稿，你可能会写出类似这样的东西：
- en: '[PRE58]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This code runs, and it produces an answer, but the answer is a single number
    rather than the list we were expecting.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码运行了，并且得到了一个答案，但这个答案是一个单一的数字，而不是我们期望的列表。
- en: You might have already spotted the error, but let’s suppose you did not. To
    debug this code, I would start by splitting the computation into smaller steps
    and displaying the intermediate results. For example, we might add the two lists
    and display the result, like this.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经发现了错误，但假设你没有。要调试这段代码，我会从将计算分成较小的步骤并显示中间结果开始。例如，我们可以将两个列表相加并显示结果，就像这样。
- en: '[PRE60]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Looking at the result, we see that it did not add the sandwich prices elementwise,
    as we intended. Because the arguments are lists, the `+` operator concatenates
    them rather than adding the elements.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 看结果，我们发现它没有按我们的意图对三明治的价格进行逐个元素相加。因为参数是列表，`+`运算符连接它们而不是将元素相加。
- en: We can solve this problem by converting the lists to arrays.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将列表转换为数组来解决这个问题。
- en: '[PRE62]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'And then computing the midpoint of each pair of prices, like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后计算每对价格的中点，就像这样：
- en: '[PRE64]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: As you gain experience, you will be able to write bigger chunks of code before
    testing. But while you are getting started, keep it simple! As a general rule,
    each line of code should perform a small number of operations, and each cell should
    contain a small number of statements. When you are getting started, this number
    should be one.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 随着经验的积累，你将能够在测试之前编写更多的代码。但在开始阶段，保持简单！一般规则是，每行代码应执行少量操作，每个单元格应包含少量语句。在开始阶段，这个数量应该是一个。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter presents three ways to represent a sequence of values: tuples,
    list, and Numpy arrays. Working with data, we will primarily use arrays.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了表示一系列值的三种方式：元组、列表和Numpy数组。在处理数据时，我们主要会使用数组。
- en: 'It also introduces three ways to represent differences: absolute, relative,
    and percentage; and several ways to summarize a set of values: minimum, maximum,
    mean, and standard deviation.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 它还介绍了表示差异的三种方式：绝对值、相对值和百分比；以及总结一组值的几种方式：最小值、最大值、平均值和标准差。
- en: In the next chapter we’ll start working with data files, and we’ll use loops
    to process letters and words.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始处理数据文件，并使用循环处理字母和单词。
