- en: Implementing Mapping Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现映射类型
- en: 原文：[https://allendowney.github.io/DSIRP/hashmap.html](https://allendowney.github.io/DSIRP/hashmap.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/DSIRP/hashmap.html](https://allendowney.github.io/DSIRP/hashmap.html)
- en: '[Click here to run this chapter on Colab](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/hashmap.ipynb)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[单击此处在Colab上运行本章](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/hashmap.ipynb)'
- en: Analysis of search algorithms
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索算法分析
- en: A **search** is an algorithm that takes a collection and a target item and determines
    whether the target is in the collection, often returning the index of the target.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**搜索**是一种算法，它接受一个集合和一个目标项，并确定目标是否在集合中，通常返回目标的索引。'
- en: The simplest search algorithm is a “linear search”, which traverses the items
    of the collection in order, stopping if it finds the target. In the worst case
    it has to traverse the entire collection, so the run time is linear.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的搜索算法是“线性搜索”，它按顺序遍历集合的项，如果找到目标，则停止。在最坏的情况下，它必须遍历整个集合，因此运行时间是线性的。
- en: The `in` operator for sequences uses a linear search; so do string methods like
    `find` and `count`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的`in`运算符使用线性搜索；字符串方法如`find`和`count`也是如此。
- en: If the elements of the sequence are in order, you can use a **bisection search**,
    which is \(O(\log n)\). Bisection search is similar to the algorithm you might
    use to look a word up in a dictionary (a paper dictionary, not the data structure).
    Instead of starting at the beginning and checking each item in order, you start
    with the item in the middle and check whether the word you are looking for comes
    before or after. If it comes before, then you search the first half of the sequence.
    Otherwise you search the second half. Either way, you cut the number of remaining
    items in half.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果序列的元素是有序的，可以使用**二分搜索**，其时间复杂度为\(O(\log n)\)。二分搜索类似于您在字典中查找单词的算法（纸质字典，而不是数据结构）。您不是从开头开始按顺序检查每个项目，而是从中间开始检查您要查找的单词是在之前还是之后。如果在之前，那么您搜索序列的前半部分。否则，您搜索后半部分。无论哪种方式，剩余项的数量都减少了一半。
- en: If the sequence has 1,000,000 items, it will take about 20 steps to find the
    word or conclude that it’s not there. So that’s about 50,000 times faster than
    a linear search.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果序列有100万个项，将需要大约20步来查找单词或得出结论它不在那里。因此，这比线性搜索快约50,000倍。
- en: Bisection search can be much faster than linear search, but it requires the
    sequence to be in order, which might require extra work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 二分搜索可能比线性搜索快得多，但它要求序列有序，这可能需要额外的工作。
- en: There is another data structure, called a **hashtable** that is even faster—it
    can do a search in constant time—and it doesn’t require the items to be sorted.
    Python dictionaries are implemented using hashtables, which is why most dictionary
    operations, including the `in` operator, are constant time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种数据结构，称为**哈希表**，它甚至更快 - 它可以在常数时间内进行搜索 - 而且不需要对项进行排序。Python字典是使用哈希表实现的，这就是为什么大多数字典操作，包括`in`运算符，都是常数时间。
- en: LinearMap
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LinearMap
- en: To explain how hashtables work and why their performance is so good, I start
    with a simple implementation of a map and gradually improve it until it’s a hashtable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释哈希表的工作原理以及它们的性能为何如此出色，我从一个简单的映射实现开始，逐渐改进，直到它成为一个哈希表。
- en: I use Python to demonstrate these implementations, but in real life you wouldn’t
    write code like this in Python; you would just use a dictionary! So this notebook,
    you have to imagine that dictionaries don’t exist and you want to implement a
    data structure that maps from keys to values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Python来演示这些实现，但在现实生活中，您不会在Python中编写这样的代码；您只需使用字典！因此，在这个笔记本中，您必须想象字典不存在，并且您想要实现一个从键到值的映射的数据结构。
- en: 'The operations we’ll implement are:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现的操作是：
- en: '`add(k, v)`: Add a new item that maps from key `k` to value `v`. With a Python
    dictionary, `d`, this operation is written `d[k] = v`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add(k, v)`: 添加一个新项，将键`k`映射到值`v`。使用Python字典`d`，此操作写为`d[k] = v`。'
- en: '`get(k)`: Look up and return the value that corresponds to key `k`. With a
    Python dictionary, `d`, this operation is written `d[k]` or `d.get(k)`.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get(k)`: 查找并返回与键`k`对应的值。使用Python字典`d`，此操作写为`d[k]`或`d.get(k)`。'
- en: For now, I assume that each key only appears once.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我假设每个键只出现一次。
- en: Here’s a simple implementation of this interface using a list of tuples, where
    each tuple is a key-value pair.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用元组列表实现此接口的简单实现，其中每个元组都是一个键值对。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`__init__` creates a new map with an empty list of items, so that’s constant
    time.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`创建一个带有空项列表的新映射，因此这需要常数时间。'
- en: '`add` appends a key-value tuple to the list of items, which takes constant
    time.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`add`将一个键值元组附加到项的列表中，这需要常数时间。'
- en: '`get` uses a `for` loop to search the list: if it finds the target key it returns
    the corresponding value; otherwise it raises a `KeyError`. So `get` is linear.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`get`使用`for`循环搜索列表：如果找到目标键，则返回相应的值；否则引发`KeyError`。因此，`get`是线性的。'
- en: Let’s try out this implementation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下这个实现。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An alternative is to keep the list sorted by key. Then `get` could use a bisection
    search, which is \(O(\log n)\). But inserting a new item in the middle of a list
    is linear, so this might not be the best option.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是按键排序列表。然后`get`可以使用二分搜索，其时间复杂度为\(O(\log n)\)。但是在列表中间插入新项是线性的，因此这可能不是最佳选择。
- en: We could also use a binary search tree, which can implement `add` and `get`
    in log time, but that’s still not as good as constant time, so let’s move on.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用二叉搜索树，它可以在对数时间内实现`add`和`get`，但这仍然不如常数时间好，所以让我们继续前进。
- en: BetterMap
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BetterMap
- en: 'One way to improve `LinearMap` is to break the list of key-value pairs into
    smaller lists. Here’s an implementation called `BetterMap`, which is a list of
    100 LinearMaps. As we’ll see in a second, the order of growth for `get` is still
    linear, but `BetterMap` is a step on the path toward hashtables:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一种改进`LinearMap`的方法是将键值对列表分成较小的列表。这里有一个名为`BetterMap`的实现，它是100个LinearMaps的列表。正如我们将在下面看到的，`get`的增长顺序仍然是线性的，但`BetterMap`是通向哈希表的一步：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`__init__` makes a list of `LinearMap` objects.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`创建了一个`LinearMap`对象的列表。'
- en: '`find_map` is used by `add` and `get` to figure out which map to put the new
    item in, or which map to search.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_map`被`add`和`get`使用，以确定要将新项目放在哪个地图中，或者要搜索哪个地图。'
- en: '`find_map` uses the built-in function `hash`, which takes almost any Python
    object and returns an integer. A limitation of this implementation is that it
    only works with hashable keys. Mutable types like lists and dictionaries are unhashable.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_map`使用内置函数`hash`，它接受几乎任何Python对象并返回一个整数。这种实现的局限性在于它只能使用可哈希的键。像列表和字典这样的可变类型是不可哈希的。'
- en: 'Hashable objects that are considered equivalent return the same hash value,
    but the converse is not necessarily true: two objects with different values can
    return the same hash value.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 被认为是等价的可哈希对象返回相同的哈希值，但反之则不一定成立：具有不同值的两个对象可以返回相同的哈希值。
- en: '`find_map` uses the modulus operator to wrap the hash values into the range
    from 0 to `len(self.maps)`, so the result is a legal index into the list. Of course,
    this means that many different hash values will wrap onto the same index. But
    if the hash function spreads things out pretty evenly (which is what hash functions
    are designed to do), then we expect \(n/100\) items per `LinearMap`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_map`使用模运算符将哈希值包装到0到`len(self.maps)`的范围内，因此结果是列表中的合法索引。当然，这意味着许多不同的哈希值将包装到相同的索引上。但是，如果哈希函数将事物相当均匀地分布开来（这就是哈希函数的设计目的），那么我们期望每个`LinearMap`有\(n/100\)个项目。'
- en: 'Let’s try it out:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since the run time of `LinearMap.get` is proportional to the number of items,
    we expect BetterMap to be about 100 times faster than LinearMap. The order of
    growth is still linear, but the leading coefficient is smaller.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`LinearMap.get`的运行时间与项目数量成正比，我们期望`BetterMap`比`LinearMap`快大约100倍。增长的顺序仍然是线性的，但是主导系数更小。
- en: Hash Functions
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哈希函数
- en: '`BetterMap.find_map` uses the [built-in function `hash`](https://docs.python.org/3/library/functions.html#hash),
    which takes any hashable object and returns an integer:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`BetterMap.find_map`使用[内置函数`hash`](https://docs.python.org/3/library/functions.html#hash)，它接受任何可哈希对象并返回一个整数：'
- en: '`hash(object)`'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`hash(object)`'
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the hash value of the object (if it has one). Hash values are integers.
    They are used to quickly compare dictionary keys during a dictionary lookup. Numeric
    values that compare equal have the same hash value (even if they are of different
    types, as is the case for 1 and 1.0).
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 返回对象的哈希值（如果有）。哈希值是整数。它们用于在字典查找期间快速比较字典键。比较相等的数值具有相同的哈希值（即使它们是不同类型的，就像1和1.0一样）。
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: HashMap
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HashMap
- en: 'Here (finally) is the crucial idea that makes hashtables fast: if you can keep
    the maximum length of the LinearMaps bounded, `LinearMap.get` is constant time.
    All you have to do is keep track of the number of items and when the number of
    items per LinearMap exceeds a threshold, resize the hashtable by adding more LinearMaps.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这（最后）是使哈希表快速的关键思想：如果你可以保持`LinearMaps`的最大长度有限，`LinearMap.get`就是常数时间。你所需要做的就是跟踪项目的数量，当每个`LinearMap`的项目数量超过阈值时，通过添加更多的`LinearMaps`来调整哈希表的大小。
- en: 'Here is an implementation of a hashtable:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个哈希表的实现：
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`__init__` creates a `BetterMap` and initializes `num`, which keeps track of
    the number of items.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`创建了一个`BetterMap`并初始化了`num`，用于跟踪项目的数量。'
- en: '`get` just invokes `BetterMap.get`, which uses `find_map` to figure out which
    `LinearMap` to search.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`get`只是调用`BetterMap.get`，它使用`find_map`来确定要搜索哪个`LinearMap`。'
- en: 'The real work happens in `add`, which checks the number of items and the size
    of the `BetterMap`: if they are equal, the average number of items per LinearMap
    is 1, so it calls `resize`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的工作发生在`add`中，它检查了项目的数量和`BetterMap`的大小：如果它们相等，每个LinearMap的平均项目数为1，因此调用`resize`。
- en: '`resize` makes a new `BetterMap`, twice as big as the previous one, and then
    “rehashes” the items from the old map to the new.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`resize`创建一个新的`BetterMap`，比以前的大一倍，然后将旧地图中的项目“重新散列”到新地图中。'
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Rehashing is necessary because changing the number of `LinearMap` objects changes
    the denominator of the modulus operator in `find_map`. That means that some objects
    that used to hash into the same LinearMap will get split up (which is what we
    wanted, right?).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 重新散列是必要的，因为改变`LinearMap`对象的数量会改变`find_map`中模运算符的分母。这意味着一些以前散列到相同`LinearMap`的对象将被分割（这正是我们想要的，对吧？）。
- en: Rehashing is linear, so `resize` is linear, which might seem bad, since I promised
    that `add` would be constant time. But remember that we don’t have to resize every
    time, so `add` is usually constant time and only occasionally linear. The total
    amount of work to run `add` \(n\) times is proportional to \(n\), so the average
    time of each `add` is constant time!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重新散列是线性的，因此`resize`是线性的，这可能看起来很糟糕，因为我承诺`add`将是常数时间。但请记住，我们不必每次都调整大小，因此`add`通常是常数时间，只偶尔是线性时间。运行`add`
    \(n\) 次的总工作量与 \(n\) 成正比，因此每次`add`的平均时间是常数时间！
- en: To see how this works, think about starting with an empty `HashTable` and adding
    a sequence of items. We start with 2 `LinearMap` objects, so the first 2 adds
    are fast (no resizing required). Let’s say that they take one unit of work each.
    The next add requires a resize, so we have to rehash the first two items (let’s
    call that 2 more units of work) and then add the third item (one more unit). Adding
    the next item costs 1 unit, so the total so far is 6 units of work for 4 items.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这是如何工作的，请考虑从空的`HashTable`开始并添加一系列项目。我们从2个`LinearMap`对象开始，因此前2个添加很快（不需要调整大小）。假设它们每个需要一个单位的工作。下一个添加需要调整大小，因此我们必须重新散列前两个项目（让我们称之为2个单位的工作），然后添加第三个项目（再增加一个单位）。添加下一个项目的成本为1个单位，因此到目前为止，前4个项目的总成本为6个单位的工作。
- en: The next `add` costs 5 units, but the next three are only one unit each, so
    the total is 14 units for the first 8 adds.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个`add`成本为5个单位，但接下来的三个单位每个只有一个单位，因此前8个添加的总成本为14个单位。
- en: The next `add` costs 9 units, but then we can add 7 more before the next resize,
    so the total is 30 units for the first 16 adds.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个`add`成本为9个单位，但然后我们可以在下一次调整大小之前再添加7个，因此前16个添加的总成本为30个单位。
- en: After 32 adds, the total cost is 62 units, and I hope you are starting to see
    a pattern. After \(n\) adds, where \(n\) is a power of two, the total cost is
    \(2n-2\) units, so the average work per add is a little less than 2 units. When
    \(n\) is a power of two, that’s the best case; for other values of \(n\) the average
    work is a little higher, but that’s not important. The important thing is that
    it is \(O(1)\).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 32次添加后，总成本为62个单位，我希望你开始看到一个模式。在\(n\)次添加后，其中\(n\)是2的幂，总成本为\(2n-2\)个单位，因此每次添加的平均工作量略低于2个单位。当\(n\)是2的幂时，这是最佳情况；对于其他值的\(n\)，平均工作量略高，但这并不重要。重要的是它是\(O(1)\)。
- en: 'The following figure shows how this works graphically. Each block represents
    a unit of work. The columns show the total work for each add in order from left
    to right: the first two adds cost 1 unit each, the third costs 3 units, etc.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了这个图形化的工作原理。每个块代表一个工作单位。列显示了从左到右每次添加的总工作量：前两次添加每次花费1个单位，第三次花费3个单位，依此类推。
- en: '![](../Images/c0ae01719289215337b138f0fca24a50.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c0ae01719289215337b138f0fca24a50.png)'
- en: The extra work of rehashing appears as a sequence of increasingly tall towers
    with increasing space between them. Now if you knock over the towers, spreading
    the cost of resizing over all adds, you can see graphically that the total cost
    after \(n\) adds is \(2n - 2\).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重新哈希的额外工作表现为一系列越来越高的塔，它们之间的空间越来越大。现在，如果你推倒这些塔，将调整大小的成本分摊到所有添加中，你可以图形化地看到，\(n\)次添加后的总成本是\(2n-2\)。
- en: An important feature of this algorithm is that when we resize the `HashTable`
    it grows geometrically; that is, we multiply the size by a constant. If you increase
    the size arithmetically—adding a fixed number each time—the average time per `add`
    is linear.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的一个重要特点是，当我们调整`HashTable`的大小时，它呈几何增长；也就是说，我们将大小乘以一个常数。如果你以算术方式增加大小——每次添加一个固定数量——那么每次`add`的平均时间是线性的。
- en: Run Time
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时间
- en: For the implementation of a dictionary, a good hash function is one that spreads
    out the values so the number of items in each of the `LinearMap` objects is about
    the same.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字典的实现，一个好的哈希函数是那种能够将值分散开来，使得每个`LinearMap`对象中的项目数量大致相同。
- en: In the worst case, if the hash function returns the same value for all objects,
    they would all be in the same `LinearMap`, and the `get` operation would be linear.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在最坏的情况下，如果哈希函数为所有对象返回相同的值，它们将全部在同一个`LinearMap`中，`get`操作将是线性的。
- en: Hash functions can be expensive to compute, especially if the keys are large
    objects (like long strings, for example). So dictionaries are “fast” because the
    operations are constant time, but they can be “slow” because the leading constant
    is relatively high.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数可能计算成本很高，特别是如果键是大对象（比如长字符串）。因此，字典之所以“快”，是因为操作是常数时间，但它们可能“慢”，因为前导常数相对较高。
- en: If the number of items in the dictionary is small, other implementations might
    be faster.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字典中的项目数量很少，其他实现可能会更快。
- en: '**Exercise:** What are the orders of growth for these two functions? Which
    one is faster when the words are 11 letters long?'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**这两个函数的增长顺序是什么？当单词长度为11个字母时，哪一个更快？'
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*Data Structures and Information Retrieval in Python*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python中的数据结构和信息检索*'
- en: Copyright 2021 Allen Downey
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2021 Allen Downey
- en: 'License: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证：[知识共享署名-非商业性使用-相同方式共享4.0国际许可协议](https://creativecommons.org/licenses/by-nc-sa/4.0/)
