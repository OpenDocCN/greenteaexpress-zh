["```py\nn_control = 314\nn_treatment = 314 \n```", "```py\nk_control = 54\nk_treatment = 10 \n```", "```py\nrisk_control = k_control / n_control * 100\nrisk_control \n```", "```py\n17.197452229299362 \n```", "```py\nrisk_treatment = k_treatment / n_treatment * 100\nrisk_treatment \n```", "```py\n3.1847133757961785 \n```", "```py\nrelative_risk_actual = risk_treatment / risk_control\nrelative_risk_actual \n```", "```py\n0.1851851851851852 \n```", "```py\nn_all = n_control + n_treatment\nk_all = k_control + k_treatment\nrisk_all = k_all / n_all\nrisk_all \n```", "```py\n0.10191082802547771 \n```", "```py\nimport numpy as np\n\ndef simulate_group_percent(n, p):\n    xs = np.random.random(size=n)\n    k = np.sum(xs < p)\n    return k / n * 100 \n```", "```py\nt1 = [simulate_group_percent(n_treatment, risk_all)\n      for i in range(1000)] \n```", "```py\nt2 = [simulate_group_percent(n_control, risk_all)\n      for i in range(1000)] \n```", "```py\nrelative_risks = np.divide(t2, t1) \n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.kdeplot(relative_risks)\n\nplt.xlabel('Relative risk')\nplt.ylabel('Probability density')\nplt.title('Relative risks from simulation with risk_all'); \n```", "```py\nn_placebo = 314\nk_placebo = 42\n\nrisk_placebo = k_placebo / n_placebo * 100\nrisk_placebo \n```", "```py\n13.375796178343949 \n```", "```py\nrelative_risk_placebo = risk_placebo / risk_control\nrelative_risk_placebo \n```", "```py\n0.7777777777777778 \n```", "```py\np_value = (relative_risks <= relative_risk_placebo).mean()\np_value \n```", "```py\n0.137 \n```", "```py\nimport pandas as pd\n\nnsfg = pd.read_hdf('nsfg.hdf', 'nsfg')\nnsfg.head() \n```", "```py\nlive = (nsfg['OUTCOME'] == 1)\nlive.sum() \n```", "```py\n6693 \n```", "```py\nfullterm = (nsfg['PRGLNGTH'] >= 37) & (nsfg['PRGLNGTH'] < 48) \n```", "```py\nfirst = live & fullterm & (nsfg['BIRTHORD'] == 1)\nn_first = first.sum()\nn_first \n```", "```py\n2724 \n```", "```py\nother = live & fullterm & (nsfg['BIRTHORD'] > 1)\nn_other = other.sum()\nn_other \n```", "```py\n3115 \n```", "```py\nlength = nsfg['PRGLNGTH']\nlength_first = length[first]\nlength_other = length[other] \n```", "```py\nprint(length_first.mean(), length_other.mean()) \n```", "```py\n39.39647577092511 39.19775280898877 \n```", "```py\ndiff_actual = length_first.mean() - length_other.mean()\ndiff_actual, diff_actual * 7 * 24 \n```", "```py\n(0.19872296193634043, 33.38545760530519) \n```", "```py\nlength_live_full = length[live&fullterm]\nmean = length_live_full.mean()\nstd = length_live_full.std()\nmean, std \n```", "```py\n(39.29046069532454, 1.1864094701037506) \n```", "```py\ndef simulate_sample_mean(n, mu, sigma):\n    sample = np.random.normal(mu, sigma, size=n)\n    return sample.mean() \n```", "```py\nt_first = [simulate_sample_mean(n_first, mean, std)\n           for i in range(1000)] \n```", "```py\nt_other = [simulate_sample_mean(n_other, mean, std)\n           for i in range(1000)] \n```", "```py\ndiffs = np.subtract(t_first, t_other) \n```", "```py\nsns.kdeplot(diffs)\n\nplt.xlabel('Difference in pregnancy length (weeks)')\nplt.ylabel('Probability density')\nplt.title('Distribution of differences'); \n```", "```py\ndef simulate_two_groups(data1, data2):\n    n, m = len(data1), len(data2)\n    data = np.append(data1, data2)\n    np.random.shuffle(data)\n    group1 = data[:n]\n    group2 = data[n:]\n    return group1.mean() - group2.mean() \n```", "```py\nsimulate_two_groups(length_first, length_other) \n```", "```py\n-0.03111395525888838 \n```", "```py\nnsfg['BIRTHWGT_LB1'].replace([0, 98, 99], np.nan, inplace=True)\nnsfg['BIRTHWGT_OZ1'].replace([0, 98, 99], np.nan, inplace=True) \n```", "```py\nbirthwgt = nsfg['BIRTHWGT_LB1'] + nsfg['BIRTHWGT_OZ1'] / 16 \n```", "```py\nbirthwgt_first = birthwgt[first].dropna()\nbirthwgt_other = birthwgt[other].dropna() \n```", "```py\nprint(birthwgt_first.mean(), birthwgt_other.mean()) \n```", "```py\n7.3370276162790695 7.507115749525616 \n```", "```py\nimport pandas as pd\n\nbrfss = pd.read_hdf('brfss.hdf', 'brfss')\nbrfss.shape \n```", "```py\n(418268, 9) \n```", "```py\ncolumns = ['HTM4', 'WTKG3', 'AGE']\nsubset = brfss[columns]\ncorr_actual = subset.corr()\ncorr_actual \n```", "```py\nseries = brfss['HTM4']\nseries.head() \n```", "```py\n0    157.0\n1    163.0\n2    165.0\n3    165.0\n4    152.0\nName: HTM4, dtype: float64 \n```", "```py\nshuffled = series.sample(frac=1)\nshuffled.head() \n```", "```py\n56215     165.0\n306509    152.0\n358724    165.0\n150802    178.0\n221703    168.0\nName: HTM4, dtype: float64 \n```", "```py\ncorr = shuffled.corr(brfss['WTKG3'])\ncorr \n```", "```py\n0.47715146283881316 \n```", "```py\nshuffled = series.sample(frac=1).reset_index(drop=True) \n```", "```py\ncorr = shuffled.corr(brfss['WTKG3'])\ncorr \n```", "```py\n-0.003417891522999634 \n```", "```py\ndef shuffle(series):\n    return series.sample(frac=1).reset_index(drop=True) \n```", "```py\ndef simulate_correlation(df, var1, var2):\n    corr = shuffle(df[var1]).corr(df[var2])\n    return corr \n```", "```py\nt = [simulate_correlation(brfss, 'HTM4', 'WTKG3')\n     for i in range(200)] \n```", "```py\nsns.kdeplot(t)\n\nplt.xlabel('Correlation')\nplt.ylabel('Probability density')\nplt.title('Correlation from simulations with permutation'); \n```", "```py\nnsfg['BIRTHWGT'] = birthwgt\nnsfg['FIRST'] = first \n```", "```py\nsubset = nsfg[live & fullterm].copy()\nn = len(subset)\nn \n```", "```py\n5839 \n```", "```py\nbins = np.arange(15, 40, 3)\nlabels = (bins + 1)[:-1]\n\nsubset['AGEGRP'] = pd.cut(subset['AGECON'], \n                          bins, labels=labels) \n```", "```py\nsns.boxplot(x='AGEGRP', y='BIRTHWGT', data=subset, \n            whis=None, color='plum')\n\nplt.xlabel(\"Mother's age (years)\")\nplt.ylabel('Birthweight (pounds)'); \n```", "```py\nimport statsmodels.formula.api as smf\n\nresults = smf.ols('BIRTHWGT ~ AGECON', data=subset).fit()\nresults.params \n```", "```py\nIntercept    7.025486\nAGECON       0.016407\ndtype: float64 \n```", "```py\nresults.rsquared \n```", "```py\n0.007578923866134457 \n```", "```py\ndef simulate_rsquared(df):\n    df['SHUFFLED'] = shuffle(df['AGECON'])\n    formula = 'BIRTHWGT ~ SHUFFLED'\n    results = smf.ols(formula, data=df).fit()\n    return results.rsquared \n```", "```py\nrsquared_null = [simulate_rsquared(subset)\n                 for i in range(200)] \n```", "```py\nprint(np.max(rsquared_null), results.rsquared) \n```", "```py\n0.0018894074007291817 0.007578923866134457 \n```", "```py\nsubset['AGECON2'] = subset['AGECON']**2 \n```", "```py\nformula = 'BIRTHWGT ~ AGECON + AGECON2'\nresults2 = smf.ols(formula, data=subset).fit()\nresults2.params \n```", "```py\nIntercept    5.894125\nAGECON       0.109487\nAGECON2     -0.001810\ndtype: float64 \n```", "```py\nresults2.rsquared \n```", "```py\n0.01186101019657615 \n```", "```py\nformula = 'BIRTHWGT ~ FIRST'\nresults = smf.ols(formula, data=subset).fit()\nresults.params \n```", "```py\nIntercept        7.507116\nFIRST[T.True]   -0.170088\ndtype: float64 \n```", "```py\nformula = 'BIRTHWGT ~ FIRST + AGECON'\nresults = smf.ols(formula, data=subset).fit()\nresults.params \n```", "```py\nIntercept        7.163240\nFIRST[T.True]   -0.121771\nAGECON           0.013145\ndtype: float64 \n```", "```py\nformula = 'BIRTHWGT ~ FIRST + AGECON + AGECON2'\nresults = smf.ols(formula, data=subset).fit()\nresults.params \n```", "```py\nIntercept        6.128590\nFIRST[T.True]   -0.099338\nAGECON           0.096781\nAGECON2         -0.001615\ndtype: float64 \n```", "```py\nslope_actual = results.params['FIRST[T.True]']\nslope_actual \n```", "```py\n-0.0993380612156034 \n```", "```py\ndef simulate_slope(df):\n    df['SHUFFLED'] = shuffle(df['FIRST'])\n    formula = 'BIRTHWGT ~ AGECON + AGECON2 + C(SHUFFLED)'\n    results = smf.ols(formula, data=df).fit()\n    return results.params['C(SHUFFLED)[T.True]'] \n```", "```py\nslopes_null = [simulate_slope(subset)\n               for i in range(200)] \n```", "```py\nprint(min(slopes_null), max(slopes_null)) \n```", "```py\n-0.11032834278896282 0.13869713337268225 \n```", "```py\np_value = (np.abs(slopes_null) > np.abs(slope_actual)).mean()\np_value \n```", "```py\n0.015 \n```", "```py\nsubset['HPAGELB'].replace([98, 99], np.nan, inplace=True)\nsubset['HPAGELB'].value_counts().sort_index() \n```", "```py\n1.0     478\n2.0    1391\n3.0    1650\n4.0    1225\n5.0     592\n6.0     411\nName: HPAGELB, dtype: int64 \n```", "```py\nsubset['YO_DAD'] = subset['HPAGELB'].isin([1, 6]) \n```", "```py\nformula = 'BIRTHWGT ~ YO_DAD'\nresults = smf.ols(formula, data=subset).fit()\nresults.params \n```", "```py\nIntercept         7.447477\nYO_DAD[T.True]   -0.140045\ndtype: float64 \n```"]