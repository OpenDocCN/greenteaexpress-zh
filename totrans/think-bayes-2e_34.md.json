["```py\n# If we're running on Colab, install empiricaldist\n# https://pypi.org/project/empiricaldist/\n\nimport sys\nIN_COLAB = 'google.colab' in sys.modules\n\nif IN_COLAB:\n    !pip  install  empiricaldist \n```", "```py\n# Get utils.py\n\nimport os\n\nif not os.path.exists('utils.py'):\n    !wget  https://github.com/AllenDowney/ThinkBayes2/raw/master/soln/utils.py \n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom empiricaldist import Pmf\nfrom utils import decorate \n```", "```py\nks = np.arange(1, 11)\nprior_k = Pmf(1, ks)\nprior_k.normalize()\nprior_k.index.name = 'k' \n```", "```py\nts = np.linspace(0, 1, 21)\nprior_t = Pmf(1, ts)\nprior_t.normalize()\nprior_t.index.name = 't' \n```", "```py\nfrom scipy.stats import norm\n\n\u03bbs = np.linspace(0.01, 20, 50)\nqs = np.log(\u03bbs)\n\nmu, sigma = 0.3, 0.7\nps = norm.pdf(qs, mu, sigma)\n\nprior_\u03bb = Pmf(ps, \u03bbs)\nprior_\u03bb.normalize()\nprior_\u03bb.index.name = '\u03bb'\n\nprior_\u03bb.mean() \n```", "```py\n2.7952013319456332 \n```", "```py\nprior_\u03bb.plot()\ndecorate(xlabel='Book selling rate',\n        ylabel='PMF',\n        title='Prior') \n```", "```py\ndef meshgrid(*args, **options):\n    if 'indexing' not in options:\n        options['indexing'] = 'ij'\n    return np.meshgrid(*args, **options) \n```", "```py\nPK, P\u03bb, PT = meshgrid(prior_k, prior_\u03bb, prior_t)\nprior = PK * P\u03bb * PT\nprior.shape \n```", "```py\n(10, 50, 21) \n```", "```py\nfrom scipy.stats import poisson\n\ndef update(prior, n):\n    K, \u03bb, T = meshgrid(ks, \u03bbs, ts)\n\n    like = poisson(mu=\u03bb*T).pmf(K-n)\n    if n == 0:\n        like += poisson(mu=\u03bb*T).sf(K)\n\n    posterior = prior * like\n    posterior /= posterior.sum()\n\n    return posterior \n```", "```py\nn = 2\nposterior = update(prior, n) \n```", "```py\nposterior_k = Pmf(posterior.sum(axis=(1, 2)), ks)\nposterior_\u03bb = Pmf(posterior.sum(axis=(0, 2)), \u03bbs)\n\nposterior_k.mean(), posterior_\u03bb.mean() \n```", "```py\n(3.294088962095148, 2.720709517121936) \n```", "```py\nprior_k.plot(label=f'prior', color='gray')\nposterior_k.plot(label=f'n = {n}')\ndecorate(xlabel='Number of books, k',\n         ylabel='PMF',\n         title='Posterior distribution of k') \n```", "```py\nprior_\u03bb.plot(label='prior', color='gray')\nposterior_\u03bb.plot(label=f'n = {n}')\ndecorate(xlabel='Book-selling rate, \u03bb',\n         ylabel='PMF',\n         title='Posterior distribution of \u03bb') \n```", "```py\ndef make_poisson(\u03bb, k):\n  \"\"\"Make a truncated Poisson distribution.\n \"\"\"\n    qs = np.arange(k+1)\n    ps = poisson.pmf(qs, \u03bb)\n    pmf = Pmf(ps, qs)\n\n    # assign the total probability mass above `k` to `k`.\n    pmf[k] += poisson.sf(k, \u03bb)\n    return pmf \n```", "```py\npmf = make_poisson(5, 10)\npmf.bar() \n```", "```py\ndef compute_sales(posterior):\n  \"\"\"Expected number of books sold per cycle.\n\n posterior: array of posterior probabilities for k, \u03bb, t\n \"\"\"\n    # make the marginal joint posterior of k, \u03bb\n    posterior_joint = pd.DataFrame(posterior.sum(axis=2), \n                                   index=ks, columns=\u03bbs)\n\n    res = []\n    for (k, lam), p in posterior_joint.stack().items():\n        exp_sales = make_poisson(lam, k).mean()\n        res.append((p, exp_sales))\n\n    ps, qs = np.transpose(res)\n    pmf = Pmf(ps, qs)\n    return pmf.mean() \n```", "```py\ncompute_sales(posterior) \n```", "```py\n2.0364396231583672 \n```", "```py\nres = []\n\nfor n in range(11):\n    posterior = update(prior, n)\n    posterior_k = Pmf(posterior.sum(axis=(1, 2)), ks)\n    posterior_\u03bb = Pmf(posterior.sum(axis=(0, 2)), \u03bbs)\n\n    k, \u03bb = posterior_k.mean(), posterior_\u03bb.mean()\n    sales = compute_sales(posterior)\n    res.append((n, k, \u03bb, sales))\n\ndf = pd.DataFrame(res, columns=['n', 'mean k', 'mean \u03bb', 'exp sales'])\ndf \n```", "```py\ndf['mean \u03bb'].plot()\ndecorate(xlabel='Observed number of books',\n         ylabel='Average sales rate') \n```", "```py\ndf['exp sales'].plot()\ndecorate(xlabel='Observed number of books',\n         ylabel='Expected sales')\ndf['exp sales'].argmax() \n```", "```py\n5 \n```"]