["```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/DSIRP/raw/main/american-english') \n```", "```py\nnumber    Gray code\n------    ---------\n0         00\n1         01\n2         11\n3         10 \n```", "```py\n['000', '001', '011', '010', '110', '111', '101', '100'] \n```", "```py\n# Buggy solution\n\ndef gray_code(n, codes=['0', '1']):\n    if n <= 1:\n        return codes\n\n    r = codes[::-1]\n\n    for i, code in enumerate(codes):\n        codes[i] = '0' + code\n\n    for i, code in enumerate(r):\n        r[i] = '1' + code\n\n    codes.extend(r)\n\n    return gray_code(n-1, codes) \n```", "```py\ngray_code(1)   # should be ['0', '1'] \n```", "```py\n['0', '1'] \n```", "```py\ngray_code(2)   # should be ['00', '01', '11', '10'] \n```", "```py\n['00', '01', '11', '10'] \n```", "```py\ngray_code(3)   # see above \n```", "```py\n['0000',\n '0001',\n '0011',\n '0010',\n '0110',\n '0111',\n '0101',\n '0100',\n '1100',\n '1101',\n '1111',\n '1110',\n '1010',\n '1011',\n '1001',\n '1000'] \n```", "```py\ngray_code(4)   # see above \n```", "```py\n['0000000',\n '0000001',\n '0000011',\n '0000010',\n '0000110',\n '0000111',\n '0000101',\n '0000100',\n '0001100',\n '0001101',\n '0001111',\n '0001110',\n '0001010',\n '0001011',\n '0001001',\n '0001000',\n '0011000',\n '0011001',\n '0011011',\n '0011010',\n '0011110',\n '0011111',\n '0011101',\n '0011100',\n '0010100',\n '0010101',\n '0010111',\n '0010110',\n '0010010',\n '0010011',\n '0010001',\n '0010000',\n '0110000',\n '0110001',\n '0110011',\n '0110010',\n '0110110',\n '0110111',\n '0110101',\n '0110100',\n '0111100',\n '0111101',\n '0111111',\n '0111110',\n '0111010',\n '0111011',\n '0111001',\n '0111000',\n '0101000',\n '0101001',\n '0101011',\n '0101010',\n '0101110',\n '0101111',\n '0101101',\n '0101100',\n '0100100',\n '0100101',\n '0100111',\n '0100110',\n '0100010',\n '0100011',\n '0100001',\n '0100000',\n '1100000',\n '1100001',\n '1100011',\n '1100010',\n '1100110',\n '1100111',\n '1100101',\n '1100100',\n '1101100',\n '1101101',\n '1101111',\n '1101110',\n '1101010',\n '1101011',\n '1101001',\n '1101000',\n '1111000',\n '1111001',\n '1111011',\n '1111010',\n '1111110',\n '1111111',\n '1111101',\n '1111100',\n '1110100',\n '1110101',\n '1110111',\n '1110110',\n '1110010',\n '1110011',\n '1110001',\n '1110000',\n '1010000',\n '1010001',\n '1010011',\n '1010010',\n '1010110',\n '1010111',\n '1010101',\n '1010100',\n '1011100',\n '1011101',\n '1011111',\n '1011110',\n '1011010',\n '1011011',\n '1011001',\n '1011000',\n '1001000',\n '1001001',\n '1001011',\n '1001010',\n '1001110',\n '1001111',\n '1001101',\n '1001100',\n '1000100',\n '1000101',\n '1000111',\n '1000110',\n '1000010',\n '1000011',\n '1000001',\n '1000000'] \n```", "```py\nfrom random import shuffle\n\nsequence = list(range(10))\nshuffle(sequence)\nsequence \n```", "```py\n[4, 3, 0, 7, 1, 5, 9, 6, 8, 2] \n```", "```py\nk_largest(sequence, 3)   # should return [7, 8, 9] \n```", "```py\n[7, 9, 8] \n```", "```py\nfrom collections import namedtuple\n\nNode = namedtuple('Node', ['data', 'left', 'right']) \n```", "```py\noperand1 = Node(1, None, None)\noperand1 \n```", "```py\nNode(data=1, left=None, right=None) \n```", "```py\noperand2 = Node(2, None, None)\noperand2 \n```", "```py\nNode(data=2, left=None, right=None) \n```", "```py\nfrom operator import add, sub, mul \n```", "```py\netree = Node(add, operand1, operand2)\netree \n```", "```py\nNode(data=<built-in function add>, left=Node(data=1, left=None, right=None), right=Node(data=2, left=None, right=None)) \n```", "```py\nfunc = etree.data\nleft = operand1.data\nright = operand2.data\nfunc(left, right) \n```", "```py\n3 \n```", "```py\netree \n```", "```py\nNode(data=<built-in function add>, left=Node(data=1, left=None, right=None), right=Node(data=2, left=None, right=None)) \n```", "```py\nevaluate(etree)  # result should be 3 \n```", "```py\n3 \n```", "```py\noperand3 = Node(3, None, None)\netree2 = Node(mul, etree, operand3) \n```", "```py\nevaluate(etree2)  # result should be 9 \n```", "```py\n9 \n```", "```py\noperand4 = Node(4, None, None)\netree3 = Node(sub, etree2, operand4) \n```", "```py\nevaluate(etree3) # result should be 5 \n```", "```py\n5 \n```"]