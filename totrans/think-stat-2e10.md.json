["```py\nclass HypothesisTest(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.MakeModel()\n        self.actual = self.TestStatistic(data)\n\n    def PValue(self, iters=1000):\n        self.test_stats = [self.TestStatistic(self.RunModel())\n                           for _ in range(iters)]\n\n        count = sum(1 for x in self.test_stats if x >= self.actual)\n        return count / iters\n\n    def TestStatistic(self, data):\n        raise UnimplementedMethodException()\n\n    def MakeModel(self):\n        pass\n\n    def RunModel(self):\n        raise UnimplementedMethodException() \n```", "```py\nclass CoinTest(thinkstats2.HypothesisTest):\n\n    def TestStatistic(self, data):\n        heads, tails = data\n        test_stat = abs(heads - tails)\n        return test_stat\n\n    def RunModel(self):\n        heads, tails = self.data\n        n = heads + tails\n        sample = [random.choice('HT') for _ in range(n)]\n        hist = thinkstats2.Hist(sample)\n        data = hist['H'], hist['T']\n        return data \n```", "```py\n ct = CoinTest((140, 110))\n    pvalue = ct.PValue() \n```", "```py\nclass DiffMeansPermute(thinkstats2.HypothesisTest):\n\n    def TestStatistic(self, data):\n        group1, group2 = data\n        test_stat = abs(group1.mean() - group2.mean())\n        return test_stat\n\n    def MakeModel(self):\n        group1, group2 = self.data\n        self.n, self.m = len(group1), len(group2)\n        self.pool = np.hstack((group1, group2))\n\n    def RunModel(self):\n        np.random.shuffle(self.pool)\n        data = self.pool[:self.n], self.pool[self.n:]\n        return data \n```", "```py\n live, firsts, others = first.MakeFrames()\n    data = firsts.prglngth.values, others.prglngth.values\n    ht = DiffMeansPermute(data)\n    pvalue = ht.PValue() \n```", "```py\n ht.PlotCdf()\n    thinkplot.Show(xlabel='test statistic',\n                   ylabel='CDF') \n```", "```py\nclass DiffMeansOneSided(DiffMeansPermute):\n\n    def TestStatistic(self, data):\n        group1, group2 = data\n        test_stat = group1.mean() - group2.mean()\n        return test_stat \n```", "```py\nclass DiffStdPermute(DiffMeansPermute):\n\n    def TestStatistic(self, data):\n        group1, group2 = data\n        test_stat = group1.std() - group2.std()\n        return test_stat \n```", "```py\nclass CorrelationPermute(thinkstats2.HypothesisTest):\n\n    def TestStatistic(self, data):\n        xs, ys = data\n        test_stat = abs(thinkstats2.Corr(xs, ys))\n        return test_stat\n\n    def RunModel(self):\n        xs, ys = self.data\n        xs = np.random.permutation(xs)\n        return xs, ys \n```", "```py\n live, firsts, others = first.MakeFrames()\n    live = live.dropna(subset=['agepreg', 'totalwgt_lb'])\n    data = live.agepreg.values, live.totalwgt_lb.values\n    ht = CorrelationPermute(data)\n    pvalue = ht.PValue() \n```", "```py\nclass DiceTest(thinkstats2.HypothesisTest):\n\n    def TestStatistic(self, data):\n        observed = data\n        n = sum(observed)\n        expected = np.ones(6) * n / 6\n        test_stat = sum(abs(observed - expected))\n        return test_stat\n\n    def RunModel(self):\n        n = sum(self.data)\n        values = [1, 2, 3, 4, 5, 6]\n        rolls = np.random.choice(values, n, replace=True)\n        hist = thinkstats2.Hist(rolls)\n        freqs = hist.Freqs(values)\n        return freqs \n```", "```py\nclass DiceChiTest(DiceTest):\n\n    def TestStatistic(self, data):\n        observed = data\n        n = sum(observed)\n        expected = np.ones(6) * n / 6\n        test_stat = sum((observed - expected)**2 / expected)\n        return test_stat \n```", "```py\nclass PregLengthTest(thinkstats2.HypothesisTest):\n\n    def MakeModel(self):\n        firsts, others = self.data\n        self.n = len(firsts)\n        self.pool = np.hstack((firsts, others))\n\n        pmf = thinkstats2.Pmf(self.pool)\n        self.values = range(35, 44)\n        self.expected_probs = np.array(pmf.Probs(self.values))\n\n    def RunModel(self):\n        np.random.shuffle(self.pool)\n        data = self.pool[:self.n], self.pool[self.n:]\n        return data \n```", "```py\n# class PregLengthTest:\n\n    def TestStatistic(self, data):\n        firsts, others = data\n        stat = self.ChiSquared(firsts) + self.ChiSquared(others)\n        return stat\n\n    def ChiSquared(self, lengths):\n        hist = thinkstats2.Hist(lengths)\n        observed = np.array(hist.Freqs(self.values))\n        expected = self.expected_probs * len(lengths)\n        stat = sum((observed - expected)**2 / expected)\n        return stat \n```", "```py\ndef FalseNegRate(data, num_runs=100):\n    group1, group2 = data\n    count = 0\n\n    for i in range(num_runs):\n        sample1 = thinkstats2.Resample(group1)\n        sample2 = thinkstats2.Resample(group2)\n\n        ht = DiffMeansPermute((sample1, sample2))\n        pvalue = ht.PValue(iters=101)\n        if pvalue > 0.05:\n            count += 1\n\n    return count / num_runs \n```", "```py\ndef Resample(xs):\n    return np.random.choice(xs, len(xs), replace=True) \n```", "```py\n live, firsts, others = first.MakeFrames()\n    data = firsts.prglngth.values, others.prglngth.values\n    neg_rate = FalseNegRate(data) \n```"]