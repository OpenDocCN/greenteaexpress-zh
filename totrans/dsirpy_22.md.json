["```py\nclass Node:\n    def __init__(self, data, left=None, right=None):\n        self.data = data\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return f'Node({self.data})' \n```", "```py\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\nnode1 \n```", "```py\nNode(1) \n```", "```py\nnode1.right = node2\nnode2.right = node3\n\nnode2.left = node1\nnode3.left = node2 \n```", "```py\nnode = node1\nwhile node:\n    print(node)\n    node = node.right \n```", "```py\nNode(1)\nNode(2)\nNode(3) \n```", "```py\nnode = node3\nwhile node:\n    print(node)\n    node = node.left \n```", "```py\nNode(3)\nNode(2)\nNode(1) \n```", "```py\nclass Deque:\n    def __init__(self, head=None, tail=None):\n        self.head = head\n        self.tail = tail\n\n    def __repr__(self):\n        return f'LinkedList({self.head}, {self.tail})' \n```", "```py\ndeque = Deque(node1, node3)\ndeque \n```", "```py\nLinkedList(Node(1), Node(3)) \n```", "```py\ndef print_deque(deque):\n    node = deque.head\n    while node:\n        print(node.data, end=', ')\n        node = node.right\n    print()\n\n    node = deque.tail\n    while node:\n        print(node.data, end=', ')\n        node = node.left\n    print() \n```", "```py\nprint_deque(deque) \n```", "```py\n1, 2, 3, \n3, 2, 1, \n```", "```py\ndef push_first(deque, value):\n    deque.head = deque.tail = Node(value, None, None) \n```", "```py\ndeque = Deque()\npush_first(deque, 1)\nprint_deque(deque) \n```", "```py\n1, \n1, \n```", "```py\ndeque = Deque()\nleft_push(deque, 2)\nprint_deque(deque) \n```", "```py\n2, \n2, \n```", "```py\nleft_push(deque, 1)\nprint_deque(deque) \n```", "```py\n1, 2, \n2, 1, \n```", "```py\ndeque = Deque()\nright_push(deque, 3)\nprint_deque(deque) \n```", "```py\n3, \n3, \n```", "```py\nright_push(deque, 4)\nprint_deque(deque) \n```", "```py\n3, 4, \n4, 3, \n```", "```py\ndef pop_last(deque):\n    if deque.head is None:\n        raise ValueError('Tried to pop from empty deque')\n\n    old_head = deque.head\n    deque.head = deque.tail = None\n    return old_head.data \n```", "```py\ndeque = Deque()\nleft_push(deque, 1)\npop_last(deque) \n```", "```py\n1 \n```", "```py\nprint_deque(deque) \n```", "```py\ndeque = Deque()\nleft_push(deque, 2)\nleft_push(deque, 1)\nprint_deque(deque) \n```", "```py\n1, 2, \n2, 1, \n```", "```py\nleft_pop(deque) \n```", "```py\n1 \n```", "```py\nprint_deque(deque) \n```", "```py\n2, \n2, \n```", "```py\nleft_pop(deque) \n```", "```py\n2 \n```", "```py\ntry:\n    left_pop(deque)\nexcept ValueError as e:\n    print(e) \n```", "```py\nTried to pop from empty deque \n```", "```py\ndeque = Deque()\nleft_push(deque, 2)\nleft_push(deque, 1)\nprint(deque) \n```", "```py\nLinkedList(Node(1), Node(2)) \n```", "```py\nright_pop(deque) \n```", "```py\n2 \n```", "```py\nprint_deque(deque) \n```", "```py\n1, \n1, \n```", "```py\nright_pop(deque) \n```", "```py\n1 \n```", "```py\ntry:\n    right_pop(deque)\nexcept ValueError as e:\n    print(e) \n```", "```py\nTried to pop from empty deque \n```", "```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/DSIRP/raw/main/timing.py') \n```", "```py\nfrom collections import deque\n\ndef appendleft(n):\n    d = deque()\n    [d.appendleft(x) for x in range(n)] \n```", "```py\ndef popleft(n):\n    d = deque()\n    [d.appendleft(x) for x in range(n)]    \n    [d.popleft() for _ in range(n)] \n```", "```py\nfrom timing import run_timing_test\n\nns, ts = run_timing_test(appendleft) \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.0\n32768 0.0\n65536 0.009999999999999787\n131072 0.0\n262144 0.010000000000000231\n524288 0.029999999999999805\n1048576 0.06999999999999984\n2097152 0.1200000000000001\n4194304 0.25\n8388608 0.5100000000000002\n16777216 1.0299999999999998 \n```", "```py\ndef append(n):\n    d = deque()\n    [d.append(x) for x in range(n)] \n```", "```py\nfrom timing import plot_timing_test\n\nplot_timing_test(ns, ts, scale='linear') \n```"]