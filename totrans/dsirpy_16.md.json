["```py\nhtml_doc = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n(<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>),\n<i><a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and</i>\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\" \n```", "```py\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html_doc)\ntype(soup) \n```", "```py\nbs4.BeautifulSoup \n```", "```py\ndef iterative_DFS(root):\n    stack = [root]\n\n    while(stack):\n        element = stack.pop()\n        yield element\n\n        children = getattr(element, \"contents\", [])\n        stack.extend(reversed(children)) \n```", "```py\nfrom bs4 import NavigableString\n\nfor element in iterative_DFS(soup):\n    if isinstance(element, NavigableString):\n        print(element.string, end='') \n```", "```py\nThe Dormouse's story\n\nThe Dormouse's story\nOnce upon a time there were three little sisters; and their names were\n(Elsie),\nLacie and\nTillie;\nand they lived at the bottom of a well.\n... \n```", "```py\nfor element in soup.descendants:\n    if isinstance(element, NavigableString):\n        print(element.string, end='') \n```", "```py\nThe Dormouse's story\n\nThe Dormouse's story\nOnce upon a time there were three little sisters; and their names were\n(Elsie),\nLacie and\nTillie;\nand they lived at the bottom of a well.\n... \n```", "```py\nfrom bs4 import Tag\n\ndef link_generator(root):\n    paren_stack = []\n\n    for element in root.descendants:\n        if isinstance(element, NavigableString):\n            for char in element.string:\n                if char == '(':\n                    paren_stack.append(char)\n                if char == ')':\n                    paren_stack.pop()\n\n        if isinstance(element, Tag) and element.name == \"a\":\n            if len(paren_stack) == 0:\n                yield element \n```", "```py\nfor link in link_generator(soup):\n    print(link) \n```", "```py\n<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a> \n```", "```py\nlink = next(link_generator(soup))\nlink \n```", "```py\n<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a> \n```", "```py\nparent = link.parent\nisinstance(parent, Tag) \n```", "```py\nTrue \n```", "```py\nparent.name \n```", "```py\n'i' \n```", "```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local) \n```", "```py\nurl = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\ndownload(url) \n```", "```py\nfilename = basename(url)\nfp = open(filename)\nsoup2 = BeautifulSoup(fp) \n```", "```py\nroot = soup2.find(class_='mw-body-content') \n```", "```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nfrom time import time, sleep\n\nclass WikiFetcher:\n    next_request_time = None\n    min_interval = 1  # second\n\n    def fetch_wikipedia(self, url):\n        self.sleep_if_needed()\n        fp = urlopen(url)\n        soup = BeautifulSoup(fp, 'html.parser')\n        return soup\n\n    def sleep_if_needed(self):\n        if self.next_request_time:\n            sleep_time = self.next_request_time - time()    \n            if sleep_time > 0:\n                sleep(sleep_time)\n\n        self.next_request_time = time() + self.min_interval \n```", "```py\nwf = WikiFetcher()\nurl = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\n\nprint(time())\nwf.fetch_wikipedia(url)\nprint(time())\nwf.fetch_wikipedia(url)\nprint(time()) \n```", "```py\n1640031013.2612915\n1640031013.7938814\n1640031014.7832372 \n```", "```py\nfrom urllib.parse import urljoin\n\nurl = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\nrelative_path = \"/wiki/Interpreted_language\"\n\nurljoin(url, relative_path) \n```", "```py\n'https://en.wikipedia.org/wiki/Interpreted_language' \n```", "```py\nget_to_philosophy(url) \n```", "```py\nhttps://en.wikipedia.org/wiki/Python_(programming_language)\nhttps://en.wikipedia.org/wiki/Interpreted_language\nhttps://en.wikipedia.org/wiki/Computer_science\nhttps://en.wikipedia.org/wiki/Computation\nhttps://en.wikipedia.org/wiki/Calculation\nhttps://en.wikipedia.org/wiki/Arithmetic\nhttps://en.wikipedia.org/wiki/Mathematics\nhttps://en.wikipedia.org/wiki/Epistemology\nhttps://en.wikipedia.org/wiki/Outline_of_philosophy\nGot there in 9 steps! \n```", "```py\n['https://en.wikipedia.org/wiki/Python_(programming_language)',\n 'https://en.wikipedia.org/wiki/Interpreted_language',\n 'https://en.wikipedia.org/wiki/Computer_science',\n 'https://en.wikipedia.org/wiki/Computation',\n 'https://en.wikipedia.org/wiki/Calculation',\n 'https://en.wikipedia.org/wiki/Arithmetic',\n 'https://en.wikipedia.org/wiki/Mathematics',\n 'https://en.wikipedia.org/wiki/Epistemology',\n 'https://en.wikipedia.org/wiki/Outline_of_philosophy'] \n```"]