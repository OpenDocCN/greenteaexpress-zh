["```py\nimport os\n\ndef etime():\n  \"\"\"Measures user and system time this process has used.\n\n Returns the sum of user and system time.\"\"\"\n    user, sys, chuser, chsys, real = os.times()\n    return user+sys \n```", "```py\nstart = etime()\nt = [x**2 for x in range(10000)]\nend = etime()\nend - start \n```", "```py\n0.0 \n```", "```py\nfrom time import sleep\n\nsleep(1) \n```", "```py\ndef time_func(func, n):\n  \"\"\"Run a function and return the elapsed time.\n\n func: function\n n: problem size, passed as an argument to func\n\n returns: user+sys time in seconds\n \"\"\"\n    start = etime()\n    func(n)\n    end = etime()\n    elapsed = end - start\n    return elapsed \n```", "```py\ndef list_append(n):\n    t = []\n    [t.append(x) for x in range(n)] \n```", "```py\n%timeit list_append(10000) \n```", "```py\n427 \u00b5s \u00b1 6.66 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) \n```", "```py\ntime_func(list_append, 10000) \n```", "```py\n0.0 \n```", "```py\ndef run_timing_test(func, max_time=1):\n  \"\"\"Tests the given function with a range of values for n.\n\n func: function object\n\n returns: list of ns and a list of run times.\n \"\"\"\n    ns = []\n    ts = []\n    for i in range(10, 28):\n        n = 2**i\n        t = time_func(func, n)\n        print(n, t)\n        if t > 0:\n            ns.append(n)\n            ts.append(t)\n        if t > max_time:\n            break\n\n    return ns, ts \n```", "```py\nns, ts = run_timing_test(list_append) \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.009999999999999787\n32768 0.0\n65536 0.0\n131072 0.020000000000000462\n262144 0.019999999999999574\n524288 0.02999999999999936\n1048576 0.08000000000000096\n2097152 0.15999999999999925\n4194304 0.27000000000000046\n8388608 0.5700000000000003\n16777216 1.0399999999999991 \n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.plot(ns, ts, 'o-')\nplt.xlabel('Problem size (n)')\nplt.ylabel('Runtime (seconds)'); \n```", "```py\ndef fit(ns, ts, exp=1.0, index=-1):\n  \"\"\"Fits a curve with the given exponent.\n\n ns: sequence of problem sizes\n ts: sequence of times\n exp: exponent of the fitted curve\n index: index of the element the fitted line should go through\n\n returns: sequence of fitted times\n\n \"\"\"\n    # Use the element with the given index as a reference point,\n    # and scale all other points accordingly.\n    nref = ns[index]\n    tref = ts[index]\n\n    tfit = []\n    for n in ns:\n        ratio = n / nref\n        t = ratio**exp * tref\n        tfit.append(t)\n\n    return tfit \n```", "```py\nts_fit = fit(ns, ts)\nts_fit \n```", "```py\n[0.0010156249999999992,\n 0.008124999999999993,\n 0.016249999999999987,\n 0.03249999999999997,\n 0.06499999999999995,\n 0.1299999999999999,\n 0.2599999999999998,\n 0.5199999999999996,\n 1.0399999999999991] \n```", "```py\ndef plot_timing_test(ns, ts, label='', color='C0', exp=1.0, scale='log'):\n  \"\"\"Plots data and a fitted curve.\n\n ns: sequence of n (problem size)\n ts: sequence of t (run time)\n label: string label for the data curve\n color: string color for the data curve\n exp: exponent (slope) for the fitted curve\n scale: string passed to xscale and yscale\n \"\"\"\n    ts_fit = fit(ns, ts, exp)\n    fit_label = 'exp = %d' % exp\n    plt.plot(ns, ts_fit, label=fit_label, color='0.7', linestyle='dashed')\n    plt.plot(ns, ts, 'o-', label=label, color=color, alpha=0.7)\n    plt.xlabel('Problem size (n)')\n    plt.ylabel('Runtime (seconds)')\n    plt.xscale(scale)\n    plt.yscale(scale)\n    plt.legend() \n```", "```py\nplot_timing_test(ns, ts, scale='linear')\nplt.title('list append'); \n```", "```py\nplot_timing_test(ns, ts, scale='log')\nplt.title('list append'); \n```", "```py\ndef list_pop(n):\n    t = []\n    [t.append(x) for x in range(n)]\n    [t.pop() for _ in range(n)]\n\nns, ts = run_timing_test(list_pop)\nplot_timing_test(ns, ts, scale='log')\nplt.title('list pop'); \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.010000000000001563\n16384 0.0\n32768 0.0\n65536 0.009999999999999787\n131072 0.009999999999999787\n262144 0.03999999999999915\n524288 0.05000000000000071\n1048576 0.11000000000000121\n2097152 0.22999999999999865\n4194304 0.4800000000000004\n8388608 0.8699999999999992\n16777216 1.6900000000000013 \n```", "```py\ndef list_pop0(n):\n    t = []\n    [t.append(x) for x in range(n)]\n    [t.pop(0) for _ in range(n)]\n\nns, ts = run_timing_test(list_pop0)\nplot_timing_test(ns, ts, scale='log', exp=1)\nplt.title('list pop(0)'); \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.010000000000001563\n16384 0.019999999999999574\n32768 0.08999999999999986\n65536 0.39000000000000057\n131072 1.7199999999999989 \n```", "```py\ndef list_index0(n):\n    t = []\n    [t.append(x) for x in range(n)]\n    [t.index(0) for _ in range(n)]\n\nns, ts = run_timing_test(list_index0)\n\nplot_timing_test(ns, ts, scale='log', exp=1)\nplt.title('list index(0)'); \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.0\n32768 0.0\n65536 0.009999999999999787\n131072 0.019999999999999574\n262144 0.030000000000001137\n524288 0.05999999999999872\n1048576 0.10999999999999943\n2097152 0.26000000000000156\n4194304 0.5500000000000007\n8388608 1.0\n16777216 1.9100000000000001 \n```", "```py\ndef list_index_n(n):\n    t = []\n    [t.append(x) for x in range(n)]\n    [t.index(n-1) for _ in range(n)]\n\nns, ts = run_timing_test(list_index_n)\n\nplot_timing_test(ns, ts, scale='log', exp=1)\nplt.title('list index(n-1)'); \n```", "```py\n1024 0.00999999999999801\n2048 0.03999999999999915\n4096 0.14000000000000057\n8192 0.5499999999999972\n16384 2.1400000000000006 \n```", "```py\ndef dict_add(n):\n    d = {}\n    [d.setdefault(x, x) for x in range(n)]\n\nns, ts = run_timing_test(dict_add)\n\nplot_timing_test(ns, ts, scale='log', exp=1)\nplt.title('dict add'); \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.0\n32768 0.0\n65536 0.00999999999999801\n131072 0.0\n262144 0.030000000000001137\n524288 0.04999999999999716\n1048576 0.11000000000000298\n2097152 0.23999999999999844\n4194304 0.4400000000000013\n8388608 0.9400000000000013\n16777216 1.8699999999999974 \n```", "```py\ndef dict_lookup(n):\n    d = {}\n    [d.setdefault(x, x) for x in range(n)]\n    [d[x] for x in range(n)]\n\nns, ts = run_timing_test(dict_lookup)\n\nplot_timing_test(ns, ts, scale='log', exp=1)\nplt.title('dict lookup'); \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.0\n32768 0.00999999999999801\n65536 0.010000000000005116\n131072 0.01999999999999602\n262144 0.05000000000000071\n524288 0.06999999999999673\n1048576 0.1600000000000037\n2097152 0.33999999999999986\n4194304 0.6600000000000001\n8388608 1.3900000000000006 \n```"]