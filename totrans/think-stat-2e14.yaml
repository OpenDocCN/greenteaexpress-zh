- en: Chapter 13  Survival analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://greenteapress.com/thinkstats2/html/thinkstats2014.html](https://greenteapress.com/thinkstats2/html/thinkstats2014.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Survival analysis is a way to describe how long things last. It is often used
    to study human lifetimes, but it also applies to “survival” of mechanical and
    electronic components, or more generally to intervals in time before an event.
  prefs: []
  type: TYPE_NORMAL
- en: If someone you know has been diagnosed with a life-threatening disease, you
    might have seen a “5-year survival rate,” which is the probability of surviving
    five years after diagnosis. That estimate and related statistics are the result
    of survival analysis.
  prefs: []
  type: TYPE_NORMAL
- en: The code in this chapter is in `survival.py`. For information about downloading
    and working with this code, see Section [0.2](thinkstats2001.html#code).
  prefs: []
  type: TYPE_NORMAL
- en: 13.1  Survival curves
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The fundamental concept in survival analysis is the survival curve, S(t), which
    is a function that maps from a duration, t, to the probability of surviving longer
    than t. If you know the distribution of durations, or “lifetimes”, finding the
    survival curve is easy; it’s just the complement of the CDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '| S(t) = 1 − CDF (t)  |'
  prefs: []
  type: TYPE_TB
- en: where CDF (t) is the probability of a lifetime less than or equal to t.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the NSFG dataset, we know the duration of 11189 complete pregnancies.
    We can read this data and compute the CDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The outcome codes `1, 3, 4` indicate live birth, stillbirth, and miscarriage.
    For this analysis I am excluding induced abortions, ectopic pregnancies, and pregnancies
    that were in progress when the respondent was interviewed.
  prefs: []
  type: TYPE_NORMAL
- en: The DataFrame method `query` takes a boolean expression and evaluates it for
    each row, selecting the rows that yield True.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/8ea3f9be2a9ea8f19e95caa5a8d61c75.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 13.1: Cdf and survival curve for pregnancy length (top), hazard curve
    (bottom). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure [13.1](#survival1) (top) shows the CDF of pregnancy length and its complement,
    the survival curve. To represent the survival curve, I define an object that wraps
    a Cdf and adapts the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`SurvivalFunction` provides two properties: `ts`, which is the sequence of
    lifetimes, and `ss`, which is the survival curve. In Python, a “property” is a
    method that can be invoked as if it were a variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can instantiate a `SurvivalFunction` by passing the CDF of lifetimes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`SurvivalFunction` also provides `__getitem__` and `Prob`, which evaluates
    the survival curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, `sf[13]` is the fraction of pregnancies that proceed past the
    first trimester:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: About 86% of pregnancies proceed past the first trimester; about 14% do not.
  prefs: []
  type: TYPE_NORMAL
- en: '`SurvivalFunction` provides `Render`, so we can plot `sf` using the functions
    in `thinkplot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Figure [13.1](#survival1) (top) shows the result. The curve is nearly flat between
    13 and 26 weeks, which shows that few pregnancies end in the second trimester.
    And the curve is steepest around 39 weeks, which is the most common pregnancy
    length.
  prefs: []
  type: TYPE_NORMAL
- en: 13.2  Hazard function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the survival curve we can derive the hazard function; for pregnancy lengths,
    the hazard function maps from a time, t, to the fraction of pregnancies that continue
    until t and then end at t. To be more precise:'
  prefs: []
  type: TYPE_NORMAL
- en: '| λ(t) =  |'
  prefs: []
  type: TYPE_TB
- en: '&#124; S(t) − S(t+1) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; S(t) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|   |'
  prefs: []
  type: TYPE_TB
- en: The numerator is the fraction of lifetimes that end at t, which is also PMF(t).
  prefs: []
  type: TYPE_NORMAL
- en: '`SurvivalFunction` provides `MakeHazard`, which calculates the hazard function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `HazardFunction` object is a wrapper for a pandas Series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`d` can be a dictionary or any other type that can initialize a Series, including
    another Series. `label` is a string used to identify the HazardFunction when plotted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`HazardFunction` provides `__getitem__`, so we can evaluate it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So of all pregnancies that proceed until week 39, about 50% end in week 39.
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure [13.1](#survival1) (bottom) shows the hazard function for pregnancy
    lengths. For times after week 42, the hazard function is erratic because it is
    based on a small number of cases. Other than that the shape of the curve is as
    expected: it is highest around 39 weeks, and a little higher in the first trimester
    than in the second.'
  prefs: []
  type: TYPE_NORMAL
- en: The hazard function is useful in its own right, but it is also an important
    tool for estimating survival curves, as we’ll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 13.3  Inferring survival curves
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If someone gives you the CDF of lifetimes, it is easy to compute the survival
    and hazard functions. But in many real-world scenarios, we can’t measure the distribution
    of lifetimes directly. We have to infer it.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you are following a group of patients to see how long they
    survive after diagnosis. Not all patients are diagnosed on the same day, so at
    any point in time, some patients have survived longer than others. If some patients
    have died, we know their survival times. For patients who are still alive, we
    don’t know survival times, but we have a lower bound.
  prefs: []
  type: TYPE_NORMAL
- en: If we wait until all patients are dead, we can compute the survival curve, but
    if we are evaluating the effectiveness of a new treatment, we can’t wait that
    long! We need a way to estimate survival curves using incomplete information.
  prefs: []
  type: TYPE_NORMAL
- en: As a more cheerful example, I will use NSFG data to quantify how long respondents
    “survive” until they get married for the first time. The range of respondents’
    ages is 14 to 44 years, so the dataset provides a snapshot of women at different
    stages in their lives.
  prefs: []
  type: TYPE_NORMAL
- en: For women who have been married, the dataset includes the date of their first
    marriage and their age at the time. For women who have not been married, we know
    their age when interviewed, but have no way of knowing when or if they will get
    married.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we know the age at first marriage for *some* women, it might be tempting
    to exclude the rest and compute the CDF of the known data. That is a bad idea.
    The result would be doubly misleading: (1) older women would be overrepresented,
    because they are more likely to be married when interviewed, and (2) married women
    would be overrepresented! In fact, this analysis would lead to the conclusion
    that all women get married, which is obviously incorrect.'
  prefs: []
  type: TYPE_NORMAL
- en: 13.4  Kaplan-Meier estimation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example it is not only desirable but necessary to include observations
    of unmarried women, which brings us to one of the central algorithms in survival
    analysis, Kaplan-Meier estimation.
  prefs: []
  type: TYPE_NORMAL
- en: The general idea is that we can use the data to estimate the hazard function,
    then convert the hazard function to a survival curve. To estimate the hazard function,
    we consider, for each age, (1) the number of women who got married at that age
    and (2) the number of women “at risk” of getting married, which includes all women
    who were not married at an earlier age.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`complete` is the set of complete observations; in this case, the ages when
    respondents got married. `ongoing` is the set of incomplete observations; that
    is, the ages of unmarried women when they were interviewed.'
  prefs: []
  type: TYPE_NORMAL
- en: First, we precompute `hist_complete`, which is a Counter that maps from each
    age to the number of women married at that age, and `hist_ongoing` which maps
    from each age to the number of unmarried women interviewed at that age.
  prefs: []
  type: TYPE_NORMAL
- en: '`ts` is the union of ages when respondents got married and ages when unmarried
    women were interviewed, sorted in increasing order.'
  prefs: []
  type: TYPE_NORMAL
- en: '`at_risk` keeps track of the number of respondents considered “at risk” at
    each age; initially, it is the total number of respondents.'
  prefs: []
  type: TYPE_NORMAL
- en: The result is stored in a Pandas `Series` that maps from each age to the estimated
    hazard function at that age.
  prefs: []
  type: TYPE_NORMAL
- en: Each time through the loop, we consider one age, `t`, and compute the number
    of events that end at `t` (that is, the number of respondents married at that
    age) and the number of events censored at `t` (that is, the number of women interviewed
    at `t` whose future marriage dates are censored). In this context, “censored”
    means that the data are unavailable because of the data collection process.
  prefs: []
  type: TYPE_NORMAL
- en: The estimated hazard function is the fraction of the cases at risk that end
    at `t`.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the loop, we subtract from `at_risk` the number of cases that
    ended or were censored at `t`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we pass `lams` to the `HazardFunction` constructor and return the result.
  prefs: []
  type: TYPE_NORMAL
- en: 13.5  The marriage curve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test this function, we have to do some data cleaning and transformation.
    The NSFG variables we need are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cmbirth`: The respondent’s date of birth, known for all respondents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmintvw`: The date the respondent was interviewed, known for all respondents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmmarrhx`: The date the respondent was first married, if applicable and known.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`evrmarry`: 1 if the respondent had been married prior to the date of interview,
    0 otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first three variables are encoded in “century-months”; that is, the integer
    number of months since December 1899\. So century-month 1 is January 1900.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we read the respondent file and replace invalid values of `cmmarrhx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we compute each respondent’s age when married and age when interviewed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we extract `complete`, which is the age at marriage for women who have
    been married, and `ongoing`, which is the age at interview for women who have
    not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally we compute the hazard function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Figure [13.2](#survival2) (top) shows the estimated hazard function; it is low
    in the teens, higher in the 20s, and declining in the 30s. It increases again
    in the 40s, but that is an artifact of the estimation process; as the number of
    respondents “at risk” decreases, a small number of women getting married yields
    a large estimated hazard. The survival curve will smooth out this noise.
  prefs: []
  type: TYPE_NORMAL
- en: 13.6  Estimating the survival curve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we have the hazard function, we can estimate the survival curve. The chance
    of surviving past time `t` is the chance of surviving all times up through `t`,
    which is the cumulative product of the complementary hazard function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [1−λ(0)] [1−λ(1)] … [1−λ(t)]  |'
  prefs: []
  type: TYPE_TB
- en: 'The `HazardFunction` class provides `MakeSurvival`, which computes this product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`ts` is the sequence of times where the hazard function is estimated. `ss`
    is the cumulative product of the complementary hazard function, so it is the survival
    curve.'
  prefs: []
  type: TYPE_NORMAL
- en: Because of the way `SurvivalFunction` is implemented, we have to compute the
    complement of `ss`, make a Cdf, and then instantiate a SurvivalFunction object.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/7a39b9965926fb27c901966fb3fd3b9e.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 13.2: Hazard function for age at first marriage (top) and survival
    curve (bottom). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Figure [13.2](#survival2) (bottom) shows the result. The survival curve is steepest
    between 25 and 35, when most women get married. Between 35 and 45, the curve is
    nearly flat, indicating that women who do not marry before age 35 are unlikely
    to get married.
  prefs: []
  type: TYPE_NORMAL
- en: A curve like this was the basis of a famous magazine article in 1986; Newsweek
    reported that a 40-year old unmarried woman was “more likely to be killed by a
    terrorist” than get married. These statistics were widely reported and became
    part of popular culture, but they were wrong then (because they were based on
    faulty analysis) and turned out to be even more wrong (because of cultural changes
    that were already in progress and continued). In 2006, Newsweek ran an another
    article admitting that they were wrong.
  prefs: []
  type: TYPE_NORMAL
- en: I encourage you to read more about this article, the statistics it was based
    on, and the reaction. It should remind you of the ethical obligation to perform
    statistical analysis with care, interpret the results with appropriate skepticism,
    and present them to the public accurately and honestly.
  prefs: []
  type: TYPE_NORMAL
- en: 13.7  Confidence intervals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kaplan-Meier analysis yields a single estimate of the survival curve, but it
    is also important to quantify the uncertainty of the estimate. As usual, there
    are three possible sources of error: measurement error, sampling error, and modeling
    error.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, measurement error is probably small. People generally know
    when they were born, whether they’ve been married, and when. And they can be expected
    to report this information accurately.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can quantify sampling error by resampling. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`ResampleSurvival` takes `resp`, a DataFrame of respondents, and `iters`, the
    number of times to resample. It computes `ts`, which is the sequence of ages where
    we will evaluate the survival curves.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the loop, `ResampleSurvival`:'
  prefs: []
  type: TYPE_NORMAL
- en: Resamples the respondents using `ResampleRowsWeighted`, which we saw in Section [10.7](thinkstats2011.html#weighted).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls `EstimateSurvival`, which uses the process in the previous sections to
    estimate the hazard and survival curves, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluates the survival curve at each age in `ts`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ss_seq` is a sequence of evaluated survival curves. `PercentileRows` takes
    this sequence and computes the 5th and 95th percentiles, returning a 90% confidence
    interval for the survival curve.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/92878845eb42d820b753106a008dd5c1.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 13.3: Survival curve for age at first marriage (dark line) and a 90%
    confidence interval based on weighted resampling (gray line). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Figure [13.3](#survival3) shows the result along with the survival curve we
    estimated in the previous section. The confidence interval takes into account
    the sampling weights, unlike the estimated curve. The discrepancy between them
    indicates that the sampling weights have a substantial effect on the estimate—we
    will have to keep that in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 13.8  Cohort effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the challenges of survival analysis is that different parts of the estimated
    curve are based on different groups of respondents. The part of the curve at time
    `t` is based on respondents whose age was at least `t` when they were interviewed.
    So the leftmost part of the curve includes data from all respondents, but the
    rightmost part includes only the oldest respondents.
  prefs: []
  type: TYPE_NORMAL
- en: If the relevant characteristics of the respondents are not changing over time,
    that’s fine, but in this case it seems likely that marriage patterns are different
    for women born in different generations. We can investigate this effect by grouping
    respondents according to their decade of birth. Groups like this, defined by date
    of birth or similar events, are called cohorts, and differences between the groups
    are called cohort effects.
  prefs: []
  type: TYPE_NORMAL
- en: To investigate cohort effects in the NSFG marriage data, I gathered the Cycle
    6 data from 2002 used throughout this book; the Cycle 7 data from 2006–2010 used
    in Section [9.11](thinkstats2010.html#replication); and the Cycle 5 data from
    1995\. In total these datasets include 30,769 respondents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For each DataFrame, `resp`, I use `cmbirth` to compute the decade of birth
    for each respondent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`cmbirth` is encoded as the integer number of months since December 1899; `month0`
    represents that date as a Timestamp object. For each birth date, we instantiate
    a `DateOffset` that contains the century-month and add it to `month0`; the result
    is a sequence of Timestamps, which is converted to a `DateTimeIndex`. Finally,
    we extract `year` and compute decades.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To take into account the sampling weights, and also to show variability due
    to sampling error, I resample the data, group respondents by decade, and plot
    survival curves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Data from the three NSFG cycles use different sampling weights, so I resample
    them separately and then use `concat` to merge them into a single DataFrame. The
    parameter `ignore_index` tells `concat` not to match up respondents by index;
    instead it creates a new index from 0 to 30768.
  prefs: []
  type: TYPE_NORMAL
- en: '`EstimateSurvivalByDecade` plots survival curves for each cohort:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3b27a833c0d7ebce0e83f5d13a54d9ce.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 13.4: Survival curves for respondents born during different decades.
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Figure [13.4](#survival4) shows the results. Several patterns are visible:'
  prefs: []
  type: TYPE_NORMAL
- en: Women born in the 50s married earliest, with successive cohorts marrying later
    and later, at least until age 30 or so.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Women born in the 60s follow a surprising pattern. Prior to age 25, they were
    marrying at slower rates than their predecessors. After age 25, they were marrying
    faster. By age 32 they had overtaken the 50s cohort, and at age 44 they are substantially
    more likely to have married.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Women born in the 60s turned 25 between 1985 and 1995\. Remembering that the
    Newsweek article I mentioned was published in 1986, it is tempting to imagine
    that the article triggered a marriage boom. That explanation would be too pat,
    but it is possible that the article and the reaction to it were indicative of
    a mood that affected the behavior of this cohort.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The pattern of the 70s cohort is similar. They are less likely than their predecessors
    to be married before age 25, but at age 35 they have caught up with both of the
    previous cohorts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Women born in the 80s are even less likely to marry before age 25\. What happens
    after that is not clear; for more data, we have to wait for the next cycle of
    the NSFG.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the meantime we can make some predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 13.9  Extrapolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The survival curve for the 70s cohort ends at about age 38; for the 80s cohort
    it ends at age 28, and for the 90s cohort we hardly have any data at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can extrapolate these curves by “borrowing” data from the previous cohort.
    HazardFunction provides a method, `Extend`, that copies the tail from another
    longer HazardFunction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As we saw in Section [13.2](#hazard), the HazardFunction contains a Series that
    maps from t to λ(t). `Extend` finds `last`, which is the last index in `self.series`,
    selects values from `other` that come later than `last`, and appends them onto
    `self.series`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can extend the HazardFunction for each cohort, using values from the
    predecessor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`groups` is a GroupBy object with respondents grouped by decade of birth. The
    first loop computes the HazardFunction for each group.'
  prefs: []
  type: TYPE_NORMAL
- en: The second loop extends each HazardFunction with values from its predecessor,
    which might contain values from the previous group, and so on. Then it converts
    each HazardFunction to a SurvivalFunction and plots it.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/49c5cc772d8b7ffffa8e0a6142c96cd1.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 13.5: Survival curves for respondents born during different decades,
    with predictions for the later cohorts. |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Figure [13.5](#survival5) shows the results; I’ve removed the 50s cohort to
    make the predictions more visible. These results suggest that by age 40, the most
    recent cohorts will converge with the 60s cohort, with fewer than 20% never married.
  prefs: []
  type: TYPE_NORMAL
- en: 13.10  Expected remaining lifetime
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given a survival curve, we can compute the expected remaining lifetime as a
    function of current age. For example, given the survival curve of pregnancy length
    from Section [13.1](#survival), we can compute the expected time until delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to extract the PMF of lifetimes. `SurvivalFunction` provides
    a method that does that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the SurvivalFunction contains the Cdf of lifetimes. The loop copies
    the values and probabilities from the Cdf into a Pmf.
  prefs: []
  type: TYPE_NORMAL
- en: '`cutoff` is the highest probability in the Cdf, which is 1 if the Cdf is complete,
    and otherwise less than 1. If the Cdf is incomplete, we plug in the provided value,
    `filler`, to cap it off.'
  prefs: []
  type: TYPE_NORMAL
- en: The Cdf of pregnancy lengths is complete, so we don’t have to worry about this
    detail yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to compute the expected remaining lifetime, where “expected”
    means average. `SurvivalFunction` provides a method that does that, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`RemainingLifetime` takes `filler`, which is passed along to `MakePmf`, and
    `func` which is the function used to summarize the distribution of remaining lifetimes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pmf` is the Pmf of lifetimes extracted from the SurvivalFunction. `d` is a
    dictionary that contains the results, a map from current age, `t`, to expected
    remaining lifetime.'
  prefs: []
  type: TYPE_NORMAL
- en: The loop iterates through the values in the Pmf. For each value of `t` it computes
    the conditional distribution of lifetimes, given that the lifetime exceeds `t`.
    It does that by removing values from the Pmf one at a time and renormalizing the
    remaining values.
  prefs: []
  type: TYPE_NORMAL
- en: Then it uses `func` to summarize the conditional distribution. In this example
    the result is the mean pregnancy length, given that the length exceeds `t`. By
    subtracting `t` we get the mean remaining pregnancy length.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3f058a0b02cf7630155cbfd229586e79.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| Figure 13.6: Expected remaining pregnancy length (left) and years until first
    marriage (right). |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Figure [13.6](#survival6) (left) shows the expected remaining pregnancy length
    as a function of the current duration. For example, during Week 0, the expected
    remaining duration is about 34 weeks. That’s less than full term (39 weeks) because
    terminations of pregnancy in the first trimester bring the average down.
  prefs: []
  type: TYPE_NORMAL
- en: The curve drops slowly during the first trimester. After 13 weeks, the expected
    remaining lifetime has dropped by only 9 weeks, to 25\. After that the curve drops
    faster, by about a week per week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Between Week 37 and 42, the curve levels off between 1 and 2 weeks. At any
    time during this period, the expected remaining lifetime is the same; with each
    week that passes, the destination gets no closer. Processes with this property
    are called memoryless because the past has no effect on the predictions. This
    behavior is the mathematical basis of the infuriating mantra of obstetrics nurses:
    “any day now.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure [13.6](#survival6) (right) shows the median remaining time until first
    marriage, as a function of age. For an 11 year-old girl, the median time until
    first marriage is about 14 years. The curve decreases until age 22 when the median
    remaining time is about 7 years. After that it increases again: by age 30 it is
    back where it started, at 14 years.'
  prefs: []
  type: TYPE_NORMAL
- en: Based on this data, young women have decreasing remaining “lifetimes”. Mechanical
    components with this property are called NBUE for “new better than used in expectation,”
    meaning that a new part is expected to last longer.
  prefs: []
  type: TYPE_NORMAL
- en: Women older than 22 have increasing remaining time until first marriage. Components
    with this property are called UBNE for “used better than new in expectation.”
    That is, the older the part, the longer it is expected to last. Newborns and cancer
    patients are also UBNE; their life expectancy increases the longer they live.
  prefs: []
  type: TYPE_NORMAL
- en: For this example I computed median, rather than mean, because the Cdf is incomplete;
    the survival curve projects that about 20% of respondents will not marry before
    age 44\. The age of first marriage for these women is unknown, and might be non-existent,
    so we can’t compute a mean.
  prefs: []
  type: TYPE_NORMAL
- en: I deal with these unknown values by replacing them with `np.inf`, a special
    value that represents infinity. That makes the mean infinity for all ages, but
    the median is well-defined as long as more than 50% of the remaining lifetimes
    are finite, which is true until age 30\. After that it is hard to define a meaningful
    expected remaining lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code that computes and plots these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`sf1` is the survival curve for pregnancy length; in this case we can use the
    default values for `RemainingLifetime`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sf2` is the survival curve for age at first marriage; `func` is a function
    that takes a Pmf and computes its median (50th percentile).'
  prefs: []
  type: TYPE_NORMAL
- en: 13.11  Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My solution to this exercise is in `chap13soln.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1   *In NSFG Cycles 6 and 7, the variable `cmdivorcx` contains the
    date of divorce for the respondent’s first marriage, if applicable, encoded in
    century-months.*
  prefs: []
  type: TYPE_NORMAL
- en: '*Compute the duration of marriages that have ended in divorce, and the duration,
    so far, of marriages that are ongoing. Estimate the hazard and survival curve
    for the duration of marriage.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Use resampling to take into account sampling weights, and plot data from several
    resamples to visualize sampling error.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Consider dividing the respondents into groups by decade of birth, and possibly
    by age at first marriage.*'
  prefs: []
  type: TYPE_NORMAL
- en: 13.12  Glossary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'survival analysis: A set of methods for describing and predicting lifetimes,
    or more generally time until an event occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'survival curve: A function that maps from a time, t, to the probability of
    surviving past t.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'hazard function: A function that maps from t to the fraction of people alive
    until t who die at t.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kaplan-Meier estimation: An algorithm for estimating hazard and survival functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'cohort: a group of subjects defined by an event, like date of birth, in a particular
    interval of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'cohort effect: a difference between cohorts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NBUE: A property of expected remaining lifetime, “New better than used in expectation.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UBNE: A property of expected remaining lifetime, “Used better than new in expectation.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
