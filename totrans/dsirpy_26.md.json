["```py\nclass Node:\n    def __init__(self):\n        self.children = [None, None, None, None]\n        self.end = False\n\n    def __repr__(self):\n        return f'Node({self.end}, {self.children})' \n```", "```py\nindex_map = dict(A=0, C=1, G=2, T=3)\nindex_map \n```", "```py\n{'A': 0, 'C': 1, 'G': 2, 'T': 3} \n```", "```py\ndef insert(root, sequence):\n    node = root\n    for base in sequence:\n        i = index_map[base]\n        if node.children[i] is None:\n            node.children[i] = Node()\n        node = node.children[i]\n    node.end = True \n```", "```py\nnode = Node()\ninsert(node, 'CA')\nnode \n```", "```py\nNode(False, [None, Node(False, [Node(True, [None, None, None, None]), None, None, None]), None, None]) \n```", "```py\nchild = node.children[1]\nchild \n```", "```py\nNode(False, [Node(True, [None, None, None, None]), None, None, None]) \n```", "```py\ngrandchild = child.children[0]\ngrandchild \n```", "```py\nNode(True, [None, None, None, None]) \n```", "```py\ntree = Node()\nfor sequence in ['ACGT', 'ACAT', 'CAT', 'CATATTAC']:\n    insert(tree, sequence) \n```", "```py\ntry:\n    import EoN\nexcept ImportError:\n    !pip  install  EoN \n```", "```py\nimport networkx as nx\n\ndef add_edges(parent, G):\n  \"\"\"Traverse the tree and add edges to G.\"\"\"\n    for child in parent.children:\n        if child:\n            G.add_edge(parent, child)\n            add_edges(child, G) \n```", "```py\nG = nx.DiGraph()\nadd_edges(tree, G) \n```", "```py\ndef get_labels(parent, labels):\n  \"\"\"Traverse the tree and add node labels to a dictionary.\"\"\"\n    if parent.end:\n        labels[parent] = '*'\n    else:\n        labels[parent] = ''\n\n    for child in parent.children:\n        if child:\n            get_labels(child, labels) \n```", "```py\ndef get_edge_labels(parent, edge_labels):\n  \"\"\"Traverse the tree and add edge labels to a dictionary.\"\"\"\n    bases = 'ACGT'\n    for i, child in enumerate(parent.children):\n        if child:\n            edge_labels[parent, child] = bases[i]\n            get_edge_labels(child, edge_labels) \n```", "```py\nfrom EoN import hierarchy_pos\n\ndef draw_tree(tree):\n    G = nx.DiGraph()\n    add_edges(tree, G)\n    pos = hierarchy_pos(G)\n    labels = {}\n    get_labels(tree, labels)\n    edge_labels = {}\n    get_edge_labels(tree, edge_labels)\n    nx.draw(G, pos, labels=labels, alpha=0.4)\n    nx.draw_networkx_edge_labels(G, pos, \n                                 edge_labels=edge_labels, \n                                 font_color='C1') \n```", "```py\ndraw_tree(tree) \n```", "```py\nfind(tree, 'CAT')  # should be True \n```", "```py\nTrue \n```", "```py\nfind(tree, 'ACAT') # should be True \n```", "```py\nTrue \n```", "```py\nfind(tree, 'TAG') # should be False \n```", "```py\nFalse \n```", "```py\nfind(tree, 'CA') # should be False \n```", "```py\nFalse \n```", "```py\nt = []\nfind_all_rec(tree, '', t)\nt \n```", "```py\n['ACAT', 'ACGT', 'CAT', 'CATATTAC'] \n```", "```py\n['ACAT', 'ACGT', 'CAT', 'CATATTAC'] \n```", "```py\nfind_all(tree, 'CA')   # Should return ['CAT', 'CATATTAC'] \n```", "```py\n['CAT', 'CATATTAC'] \n```", "```py\nfind_all(tree, 'A')    # Should return ['ACAT', 'ACGT'] \n```", "```py\n['ACAT', 'ACGT'] \n```", "```py\nfind_all(tree, '')     # Should return all sequences in the tree \n```", "```py\n['ACAT', 'ACGT', 'CAT', 'CATATTAC'] \n```", "```py\nclass BadNode:\n    def __init__(self, end=True, children=[None, None, None, None]):\n        self.children = children\n        self.end = end\n\n    def __repr__(self):\n        return f'Node({self.end}, {self.children})' \n```", "```py\ndef bad_insert(root, sequence):\n    node = root\n    for base in sequence:\n        i = index_map[base]\n        if node.children[i] is None:\n            node.children[i] = BadNode(end=False)\n        node = node.children[i]\n    node.end = True \n```", "```py\ntree2 = BadNode()\nfor sequence in ['ACGT', 'ACAT', 'CAT', 'CATATTAC']:\n    bad_insert(tree2, sequence) \n```", "```py\ndraw_tree(tree2) \n```", "```py\n---------------------------------------------------------------------------\nRecursionError  Traceback (most recent call last)\n<ipython-input-67-f08ae257619c> in <module>\n----> 1 draw_tree(tree2)\n\n<ipython-input-50-bd629f554f38> in draw_tree(tree)\n  3 def draw_tree(tree):\n  4     G = nx.DiGraph()\n----> 5     add_edges(tree, G)\n  6     pos = hierarchy_pos(G)\n  7     labels = {}\n\n<ipython-input-46-db255f1cfa96> in add_edges(parent, G)\n  6         if child:\n  7             G.add_edge(parent, child)\n----> 8             add_edges(child, G)\n\n... last 1 frames repeated, from the frame below ...\n\n<ipython-input-46-db255f1cfa96> in add_edges(parent, G)\n  6         if child:\n  7             G.add_edge(parent, child)\n----> 8             add_edges(child, G)\n\nRecursionError: maximum recursion depth exceeded while calling a Python object \n```"]