["```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/DSIRP/raw/main/american-english') \n```", "```py\nclass Node:\n    def __init__(self, data, left=None, right=None):\n        self.data = data\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return f'Node({self.data}, {repr(self.left)}, {repr(self.right)})' \n```", "```py\nclass BSTree:\n    def __init__(self, root=None):\n        self.root = root\n\n    def __repr__(self):\n        return f'BSTree({repr(self.root)})' \n```", "```py\ndef insert(tree, data):\n    tree.root = insert_rec(tree.root, data)\n\ndef insert_rec(node, data):\n    if node is None:\n        return Node(data)\n\n    if data < node.data:\n        node.left = insert_rec(node.left, data)\n    else:\n        node.right = insert_rec(node.right, data)\n\n    return node \n```", "```py\nfilename = 'american-english'\ntree = BSTree()\nfor line in open(filename):\n    for word in line.split():\n        insert(tree, word.strip()) \n```", "```py\n---------------------------------------------------------------------------\nRecursionError  Traceback (most recent call last)\n<ipython-input-5-51d6de872b69> in <module>\n  3 for line in open(filename):\n  4     for word in line.split():\n----> 5         insert(tree, word.strip())\n\n<ipython-input-4-6a6c90da7b3d> in insert(tree, data)\n  1 def insert(tree, data):\n----> 2     tree.root = insert_rec(tree.root, data)\n  3 \n  4 def insert_rec(node, data):\n  5     if node is None:\n\n<ipython-input-4-6a6c90da7b3d> in insert_rec(node, data)\n  9         node.left = insert_rec(node.left, data)\n  10     else:\n---> 11         node.right = insert_rec(node.right, data)\n  12 \n  13     return node\n\n... last 1 frames repeated, from the frame below ...\n\n<ipython-input-4-6a6c90da7b3d> in insert_rec(node, data)\n  9         node.left = insert_rec(node.left, data)\n  10     else:\n---> 11         node.right = insert_rec(node.right, data)\n  12 \n  13     return node\n\nRecursionError: maximum recursion depth exceeded \n```", "```py\nword_list = []\nfor line in open(filename):\n    for word in line.split():\n        word_list.append(word.strip()) \n```", "```py\nfrom random import shuffle\n\nshuffle(word_list) \n```", "```py\ntree = BSTree()\nfor word in word_list:\n    insert(tree, word.strip()) \n```", "```py\nclass MapNode:\n    def __init__(self, data, left=None, right=None):\n        self.data = data\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return f'Node({self.data}, {repr(self.left)}, {repr(self.right)})' \n```", "```py\nclass BSTMap:\n    def __init__(self, root=None):\n        self.root = root\n\n    def __repr__(self):\n        return f'BSTMap({repr(self.root)})' \n```", "```py\ndef insert_map(tree, data):\n    tree.root = insert_map_rec(tree.root, data)\n\ndef insert_map_rec(node, data):\n    if node is None:\n        return MapNode(data)\n\n    if data < node.data:\n        node.left = insert_map_rec(node.left, data)\n    else:\n        node.right = insert_map_rec(node.right, data)\n\n    return node \n```", "```py\ntree_map = BSTMap()\n\nkeys = 'uniqueltrs'\nvalues = range(len(keys))\nfor key, value in zip(keys, values):\n    print(key, value)\n    insert_map(tree_map, key, value)\n\ntree_map \n```", "```py\nu 0\nn 1\ni 2\nq 3\nu 4\ne 5\nl 6\nt 7\nr 8\ns 9 \n```", "```py\nBSTree(MapNode(u, MapNode(n, MapNode(i, MapNode(e, None, None), MapNode(l, None, None)), MapNode(q, None, MapNode(t, MapNode(r, None, MapNode(s, None, None)), None))), MapNode(u, None, None))) \n```", "```py\nfor key in keys:\n    print(key, get(tree_map, key)) \n```", "```py\nu 0\nn 1\ni 2\nq 3\nu 0\ne 5\nl 6\nt 7\nr 8\ns 9 \n```", "```py\nget(tree_map, 'b') \n```", "```py\ntree_map = BSTMap()\n\nkeys = 'uniqueltrs'\nvalues = range(len(keys))\nfor key, value in zip(keys, values):\n    print(key, value)\n    insert_map(tree_map, key, value)\n\ntree_map \n```", "```py\nu 0\nn 1\ni 2\nq 3\nu 4\ne 5\nl 6\nt 7\nr 8\ns 9 \n```", "```py\nBSTree(MapNode(('u', 0), MapNode(('n', 1), MapNode(('i', 2), MapNode(('e', 5), None, None), MapNode(('l', 6), None, None)), MapNode(('q', 3), None, MapNode(('t', 7), MapNode(('r', 8), None, MapNode(('s', 9), None, None)), None))), MapNode(('u', 4), None, None))) \n```", "```py\nfor key in keys:\n    print(key, get(tree_map, key)) \n```", "```py\nu 0\nn 1\ni 2\nq 3\nu 0\ne 5\nl 6\nt 7\nr 8\ns 9 \n```"]