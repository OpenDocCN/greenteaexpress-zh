["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nnp.random.seed(0) \n```", "```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/' +\n         'ElementsOfDataScience/raw/master/data/gss_eda.hdf') \n```", "```py\ngss = pd.read_hdf('gss_eda.hdf', 'gss')\ngss.shape \n```", "```py\n(64814, 8) \n```", "```py\ngss.head() \n```", "```py\ngss['GRASS'].value_counts() \n```", "```py\n2.0    25662\n1.0    11884\nName: GRASS, dtype: int64 \n```", "```py\ngss['GRASS'].replace(2, 0, inplace=True) \n```", "```py\ngss['AGE2'] = gss['AGE']**2\ngss['EDUC2'] = gss['EDUC']**2 \n```", "```py\ndata = gss.dropna(subset=['AGE', 'EDUC', 'SEX', 'GUNLAW', 'GRASS']) \n```", "```py\nimport statsmodels.formula.api as smf\n\nformula = 'GRASS ~ AGE + AGE2 + EDUC + EDUC2 + C(SEX)'\nresult_hat = smf.logit(formula, data=data).fit()\nresult_hat.summary() \n```", "```py\nOptimization terminated successfully.\n         Current function value: 0.593464\n         Iterations 6 \n```", "```py\ndf = pd.DataFrame()\ndf['AGE'] = np.linspace(18, 89)\ndf['EDUC'] = 16\n\ndf['AGE2'] = df['AGE']**2\ndf['EDUC2'] = df['EDUC']**2\n\ndf['SEX'] = 1\npred1 = result_hat.predict(df)\npred1.index = df['AGE']\n\ndf['SEX'] = 2\npred2 = result_hat.predict(df)\npred2.index = df['AGE']\n\npred1.plot(label='Male', alpha=0.6)\npred2.plot(label='Female', alpha=0.6)\n\nplt.xlabel('Age')\nplt.ylabel('Fraction')\nplt.title('Support for legal marijuana')\nplt.legend(); \n```", "```py\noptions = dict(disp=False, start_params=result_hat.params) \n\ndef bootstrap(i):\n    bootstrapped = data.sample(n=len(data), replace=True)\n    results = smf.logit(formula, data=bootstrapped).fit(**options)\n    return results.params \n```", "```py\n%timeit bootstrap(0) \n```", "```py\n82.2 ms \u00b1 1.89 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each) \n```", "```py\ntry:\n    from pqdm.threads import pqdm\nexcept ImportError:\n    !pip install pqdm\n    from pqdm.threads import pqdm \n```", "```py\nestimates = pqdm(range(101), bootstrap, n_jobs=4)\nsampling_dist = pd.DataFrame(estimates)\nsampling_dist.head() \n```", "```py\nci90 = sampling_dist['C(SEX)[T.2]'].quantile([0.05, 0.95])\nsns.kdeplot(sampling_dist['C(SEX)[T.2]'])\n[plt.axvline(x, ls=':') for x in ci90]\nplt.title('Sampling distribution of a parameter'); \n```", "```py\npd.DataFrame({\"Sampling mean\": sampling_dist.mean(), \n              \"Estimates\": result_hat.params}) \n```", "```py\ndef standard_errors(sampling_dist, result_hat):\n    df = pd.DataFrame({\"Sampling std\": sampling_dist.std(), \n                       \"Standard error\": result_hat.bse})\n    num, den = df.values.T\n    df['Percent diff'] = (num / den - 1) * 100\n    return df \n```", "```py\nstandard_errors(sampling_dist, result_hat) \n```", "```py\npi_hat = result_hat.predict(data)\npi_hat.describe() \n```", "```py\ncount    20475.000000\nmean         0.317167\nstd          0.113654\nmin          0.025989\n25%          0.234792\n50%          0.317927\n75%          0.400791\nmax          0.630366\ndtype: float64 \n```", "```py\nfrom scipy.stats import bernoulli\n\nsimulated = bernoulli.rvs(pi_hat.values)\nsimulated.mean() \n```", "```py\n0.3174114774114774 \n```", "```py\ndef bootstrap2(i):\n    flipped = data.assign(GRASS=bernoulli.rvs(pi_hat.values))\n    results = smf.logit(formula, data=flipped).fit(**options)\n    return results.params \n```", "```py\nbootstrap2(0) \n```", "```py\nIntercept     -1.805556\nC(SEX)[T.2]   -0.352934\nAGE           -0.023101\nAGE2           0.000058\nEDUC           0.196758\nEDUC2         -0.002599\ndtype: float64 \n```", "```py\nfrom pqdm.threads import pqdm\n\nestimates = pqdm(range(101), bootstrap2, n_jobs=4) \n```", "```py\nsampling_dist2 = pd.DataFrame(estimates)\nsampling_dist2.head() \n```", "```py\nci90 = sampling_dist2['C(SEX)[T.2]'].quantile([0.05, 0.95])\nsns.kdeplot(sampling_dist2['C(SEX)[T.2]'])\n[plt.axvline(x, ls=':') for x in ci90]\nplt.title('Sampling distribution of a parameter'); \n```", "```py\nstandard_errors(sampling_dist2, result_hat) \n```", "```py\ndef bootstrap3(i):\n    bootstrapped = data.sample(n=len(data), replace=True)\n    pi_hat = result_hat.predict(bootstrapped)\n    flipped = bootstrapped.assign(GRASS=bernoulli.rvs(pi_hat.values))\n    results = smf.logit(formula, data=flipped).fit(**options)\n    return results.params \n```", "```py\nbootstrap3(0) \n```", "```py\nIntercept     -1.655314\nC(SEX)[T.2]   -0.386624\nAGE           -0.024265\nAGE2           0.000083\nEDUC           0.182822\nEDUC2         -0.002334\ndtype: float64 \n```", "```py\nfrom pqdm.threads import pqdm\n\nestimates = pqdm(range(101), bootstrap3, n_jobs=4) \n```", "```py\nsampling_dist3 = pd.DataFrame(estimates)\nsampling_dist3.head() \n```", "```py\nci90 = sampling_dist3['C(SEX)[T.2]'].quantile([0.05, 0.95])\nsns.kdeplot(sampling_dist3['C(SEX)[T.2]'])\n[plt.axvline(x, ls=':') for x in ci90]\nplt.title('Sampling distribution of a parameter'); \n```", "```py\nstandard_errors(sampling_dist3, result_hat) \n```"]