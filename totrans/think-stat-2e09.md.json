["```py\ndef Estimate1(n=7, m=1000):\n    mu = 0\n    sigma = 1\n\n    means = []\n    medians = []\n    for _ in range(m):\n        xs = [random.gauss(mu, sigma) for i in range(n)]\n        xbar = np.mean(xs)\n        median = np.median(xs)\n        means.append(xbar)\n        medians.append(median)\n\n    print('rmse xbar', RMSE(means, mu))\n    print('rmse median', RMSE(medians, mu)) \n```", "```py\ndef RMSE(estimates, actual):\n    e2 = [(estimate-actual)**2 for estimate in estimates]\n    mse = np.mean(e2)\n    return math.sqrt(mse) \n```", "```py\ndef Estimate2(n=7, m=1000):\n    mu = 0\n    sigma = 1\n\n    estimates1 = []\n    estimates2 = []\n    for _ in range(m):\n        xs = [random.gauss(mu, sigma) for i in range(n)]\n        biased = np.var(xs)\n        unbiased = np.var(xs, ddof=1)\n        estimates1.append(biased)\n        estimates2.append(unbiased)\n\n    print('mean error biased', MeanError(estimates1, sigma**2))\n    print('mean error unbiased', MeanError(estimates2, sigma**2)) \n```", "```py\ndef MeanError(estimates, actual):\n    errors = [estimate-actual for estimate in estimates]\n    return np.mean(errors) \n```", "```py\ndef SimulateSample(mu=90, sigma=7.5, n=9, m=1000):\n    means = []\n    for j in range(m):\n        xs = np.random.normal(mu, sigma, n)\n        xbar = np.mean(xs)\n        means.append(xbar)\n\n    cdf = thinkstats2.Cdf(means)\n    ci = cdf.Percentile(5), cdf.Percentile(95)\n    stderr = RMSE(means, mu) \n```", "```py\ndef Estimate3(n=7, m=1000):\n    lam = 2\n\n    means = []\n    medians = []\n    for _ in range(m):\n        xs = np.random.exponential(1.0/lam, n)\n        L = 1 / np.mean(xs)\n        Lm = math.log(2) / thinkstats2.Median(xs)\n        means.append(L)\n        medians.append(Lm)\n\n    print('rmse L', RMSE(means, lam))\n    print('rmse Lm', RMSE(medians, lam))\n    print('mean error L', MeanError(means, lam))\n    print('mean error Lm', MeanError(medians, lam)) \n```"]