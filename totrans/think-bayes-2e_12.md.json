["```py\nimport pandas as pd\n\ndef read_data(filename):\n  \"\"\"Read the showcase price data.\"\"\"\n    df = pd.read_csv(filename, index_col=0, skiprows=[1])\n    return df.dropna().transpose() \n```", "```py\ndf2011 = read_data('showcases.2011.csv')\ndf2012 = read_data('showcases.2012.csv')\n\ndf = pd.concat([df2011, df2012], ignore_index=True) \n```", "```py\nprint(df2011.shape, df2012.shape, df.shape) \n```", "```py\n(191, 6) (122, 6) (313, 6) \n```", "```py\ndf.head(3) \n```", "```py\nfrom scipy.stats import gaussian_kde\nfrom empiricaldist import Pmf\n\ndef kde_from_sample(sample, qs):\n  \"\"\"Make a kernel density estimate from a sample.\"\"\"\n    kde = gaussian_kde(sample)\n    ps = kde(qs)\n    pmf = Pmf(ps, qs)\n    pmf.normalize()\n    return pmf \n```", "```py\nimport numpy as np\n\nqs = np.linspace(0, 80000, 81)\nprior1 = kde_from_sample(df['Showcase 1'], qs) \n```", "```py\nfrom utils import decorate\n\ndef decorate_value(title=''):\n    decorate(xlabel='Showcase value ($)',\n        ylabel='PMF',\n        title=title) \n```", "```py\nprior1.plot(label='Prior 1')\ndecorate_value('Prior distribution of showcase value') \n```", "```py\n# Solution\n\nqs = np.linspace(0, 80000, 81)\nprior2 = kde_from_sample(df['Showcase 2'], qs) \n```", "```py\n# Solution\n\nprior1.plot(label='Prior 1')\nprior2.plot(label='Prior 2')\n\ndecorate_value('Prior distributions of showcase value') \n```", "```py\nsample_diff1 = df['Bid 1'] - df['Showcase 1']\nsample_diff2 = df['Bid 2'] - df['Showcase 2'] \n```", "```py\nqs = np.linspace(-40000, 20000, 61)\nkde_diff1 = kde_from_sample(sample_diff1, qs)\nkde_diff2 = kde_from_sample(sample_diff2, qs) \n```", "```py\nkde_diff1.plot(label='Diff 1', color='C8')\nkde_diff2.plot(label='Diff 2', color='C4')\n\ndecorate(xlabel='Difference in value ($)',\n        ylabel='PMF',\n        title='Difference between bid and actual value') \n```", "```py\nmean_diff1 = sample_diff1.mean()\nstd_diff1 = sample_diff1.std()\n\nprint(mean_diff1, std_diff1) \n```", "```py\n-4116.3961661341855 6899.909806377117 \n```", "```py\nfrom scipy.stats import norm\n\nerror_dist1 = norm(0, std_diff1) \n```", "```py\nerror = -100\nerror_dist1.pdf(error) \n```", "```py\n5.781240564008691e-05 \n```", "```py\nguess1 = 23000\nerror1 = guess1 - prior1.qs \n```", "```py\nlikelihood1 = error_dist1.pdf(error1) \n```", "```py\nposterior1 = prior1 * likelihood1\nposterior1.normalize() \n```", "```py\n3.3889812097254624e-05 \n```", "```py\nprior1.plot(color='C5', label='Prior 1')\nposterior1.plot(color='C4', label='Posterior 1')\n\ndecorate_value('Prior and posterior distribution of showcase value') \n```", "```py\nprior1.mean(), posterior1.mean() \n```", "```py\n(30299.488817891375, 26192.024002392536) \n```", "```py\n# Solution\n\nmean_diff2 = sample_diff2.mean()\nstd_diff2 = sample_diff2.std()\n\nprint(mean_diff2, std_diff2) \n```", "```py\n-3675.891373801917 6886.260711323408 \n```", "```py\n# Solution\n\nerror_dist2 = norm(0, std_diff2) \n```", "```py\n# Solution\n\nguess2 = 38000\nerror2 = guess2 - prior2.qs\n\nlikelihood2 = error_dist2.pdf(error2) \n```", "```py\n# Solution\n\nposterior2 = prior2 * likelihood2\nposterior2.normalize() \n```", "```py\n2.697812321910703e-05 \n```", "```py\n# Solution\n\nprior2.plot(color='C5', label='Prior 2')\nposterior2.plot(color='C15', label='Posterior 2')\n\ndecorate_value('Prior and posterior distribution of showcase value') \n```", "```py\n# Solution\n\nprint(prior2.mean(), posterior2.mean()) \n```", "```py\n31047.62371912252 34305.20161642468 \n```", "```py\ndef prob_overbid(sample_diff):\n  \"\"\"Compute the probability of an overbid.\"\"\"\n    return np.mean(sample_diff > 0) \n```", "```py\nprob_overbid(sample_diff2) \n```", "```py\n0.29073482428115016 \n```", "```py\ndef prob_worse_than(diff, sample_diff):\n  \"\"\"Probability opponent diff is worse than given diff.\"\"\"\n    return np.mean(sample_diff < diff) \n```", "```py\nprob_worse_than(-5000, sample_diff2) \n```", "```py\n0.38338658146964855 \n```", "```py\nprob_worse_than(-10000, sample_diff2) \n```", "```py\n0.14376996805111822 \n```", "```py\ndef compute_prob_win(diff, sample_diff):\n  \"\"\"Probability of winning for a given diff.\"\"\"\n    # if you overbid you lose\n    if diff > 0:\n        return 0\n\n    # if the opponent overbids, you win\n    p1 = prob_overbid(sample_diff)\n\n    # or of their bid is worse than yours, you win\n    p2 = prob_worse_than(diff, sample_diff)\n\n    # p1 and p2 are mutually exclusive, so we can add them\n    return p1 + p2 \n```", "```py\ncompute_prob_win(-5000, sample_diff2) \n```", "```py\n0.6741214057507987 \n```", "```py\nxs = np.linspace(-30000, 5000, 121)\nys = [compute_prob_win(x, sample_diff2) \n      for x in xs] \n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.plot(xs, ys)\n\ndecorate(xlabel='Difference between bid and actual price ($)',\n         ylabel='Probability of winning',\n         title='Player 1') \n```", "```py\n# Solution\n\nprob_overbid(sample_diff1) \n```", "```py\n0.24600638977635783 \n```", "```py\n# Solution\n\nprob_worse_than(-5000, sample_diff1) \n```", "```py\n0.3993610223642173 \n```", "```py\n# Solution\n\ncompute_prob_win(-5000, sample_diff1) \n```", "```py\n0.6453674121405751 \n```", "```py\n# Solution\n\nxs = np.linspace(-30000, 5000, 121)\nys = [compute_prob_win(x, sample_diff1) for x in xs] \n```", "```py\n# Solution\n\nplt.plot(xs, ys)\n\ndecorate(xlabel='Difference between bid and actual price ($)',\n         ylabel='Probability of winning',\n         title='Player 2') \n```", "```py\ndef total_prob_win(bid, posterior, sample_diff):\n  \"\"\"Computes the total probability of winning with a given bid.\n\n bid: your bid\n posterior: Pmf of showcase value\n sample_diff: sequence of differences for the opponent\n\n returns: probability of winning\n \"\"\"\n    total = 0\n    for price, prob in posterior.items():\n        diff = bid - price\n        total += prob * compute_prob_win(diff, sample_diff)\n    return total \n```", "```py\ntotal_prob_win(25000, posterior1, sample_diff2) \n```", "```py\n0.4842210945439812 \n```", "```py\nbids = posterior1.qs\n\nprobs = [total_prob_win(bid, posterior1, sample_diff2) \n         for bid in bids]\n\nprob_win_series = pd.Series(probs, index=bids) \n```", "```py\nprob_win_series.plot(label='Player 1', color='C1')\n\ndecorate(xlabel='Bid ($)',\n         ylabel='Probability of winning',\n         title='Optimal bid: probability of winning') \n```", "```py\nprob_win_series.idxmax() \n```", "```py\n21000.0 \n```", "```py\nprob_win_series.max() \n```", "```py\n0.6136807192359474 \n```", "```py\n# Solution\n\nbids = posterior2.qs\n\nprobs = [total_prob_win(bid, posterior2, sample_diff1) \n         for bid in bids]\n\nprob_win_series = pd.Series(probs, index=bids) \n```", "```py\n# Solution\n\nprob_win_series.plot(label='Player 2', color='C1')\n\ndecorate(xlabel='Bid ($)',\n         ylabel='Probability of winning',\n         title='Optimal bid: probability of winning') \n```", "```py\n# Solution\n\nprob_win_series.idxmax() \n```", "```py\n29000.0 \n```", "```py\n# Solution\n\nprob_win_series.max() \n```", "```py\n0.5171370053364229 \n```", "```py\ndef compute_gain(bid, price, sample_diff):\n  \"\"\"Compute expected gain given a bid and actual price.\"\"\"\n    diff = bid - price\n    prob = compute_prob_win(diff, sample_diff)\n\n    # if you are within 250 dollars, you win both showcases\n    if -250 <= diff <= 0:\n        return 2 * price * prob\n    else:\n        return price * prob \n```", "```py\ncompute_gain(30000, 35000, sample_diff2) \n```", "```py\n23594.249201277955 \n```", "```py\ndef expected_gain(bid, posterior, sample_diff):\n  \"\"\"Compute the expected gain of a given bid.\"\"\"\n    total = 0\n    for price, prob in posterior.items():\n        total += prob * compute_gain(bid, price, sample_diff)\n    return total \n```", "```py\nexpected_gain(21000, posterior1, sample_diff2) \n```", "```py\n16923.59933856512 \n```", "```py\nbids = posterior1.qs\n\ngains = [expected_gain(bid, posterior1, sample_diff2) for bid in bids]\n\nexpected_gain_series = pd.Series(gains, index=bids) \n```", "```py\nexpected_gain_series.plot(label='Player 1', color='C2')\n\ndecorate(xlabel='Bid ($)',\n         ylabel='Expected gain ($)',\n         title='Optimal bid: expected gain') \n```", "```py\nexpected_gain_series.idxmax() \n```", "```py\n22000.0 \n```", "```py\nexpected_gain_series.max() \n```", "```py\n17384.899584430797 \n```", "```py\n# Solution\n\nbids = posterior2.qs\n\ngains = [expected_gain(bid, posterior2, sample_diff1) for bid in bids]\n\nexpected_gain_series = pd.Series(gains, index=bids) \n```", "```py\n# Solution\n\nexpected_gain_series.plot(label='Player 2', color='C2')\n\ndecorate(xlabel='Bid ($)',\n    ylabel='Expected gain ($)',\n    title='Optimal bid: expected gain') \n```", "```py\n# Solution\n\nexpected_gain_series.idxmax() \n```", "```py\n30000.0 \n```", "```py\n# Solution\n\nexpected_gain_series.max() \n```", "```py\n19404.164188501607 \n```", "```py\ndef print_cost(printed):\n  \"\"\"Compute print costs.\n\n printed: integer number printed\n \"\"\"\n    if printed < 100:\n        return printed * 5\n    else:\n        return printed * 4.5 \n```", "```py\ndef total_income(printed, orders):\n  \"\"\"Compute income.\n\n printed: integer number printed\n orders: sequence of integer number of books ordered\n \"\"\"\n    sold = min(printed, np.sum(orders))\n    return sold * 10 \n```", "```py\ndef inventory_cost(printed, orders):\n  \"\"\"Compute inventory costs.\n\n printed: integer number printed\n orders: sequence of integer number of books ordered\n \"\"\"\n    excess = printed - np.sum(orders)\n    if excess > 0:\n        return excess * 2\n    else:\n        return 0 \n```", "```py\ndef out_of_stock_cost(printed, orders):\n  \"\"\"Compute out of stock costs.\n\n printed: integer number printed\n orders: sequence of integer number of books ordered\n \"\"\"\n    weeks = len(orders)\n    total_orders = np.cumsum(orders)\n    for i, total in enumerate(total_orders):\n        if total > printed:\n            return (weeks-i) * 50\n    return 0 \n```", "```py\ndef compute_profit(printed, orders):\n  \"\"\"Compute profit.\n\n printed: integer number printed\n orders: sequence of integer number of books ordered\n \"\"\"\n    return (total_income(printed, orders) -\n            print_cost(printed)-\n            out_of_stock_cost(printed, orders) -\n            inventory_cost(printed, orders)) \n```", "```py\nalways_10 = [10] * 8\nalways_10 \n```", "```py\n[10, 10, 10, 10, 10, 10, 10, 10] \n```", "```py\ncompute_profit(60, always_10) \n```", "```py\n200 \n```", "```py\ncompute_profit(100, always_10) \n```", "```py\n310.0 \n```", "```py\nfrom scipy.stats import gamma\n\nalpha = 9\nqs = np.linspace(0, 25, 101)\nps = gamma.pdf(qs, alpha)\npmf = Pmf(ps, qs)\npmf.normalize()\npmf.mean() \n```", "```py\n8.998788382371902 \n```", "```py\npmf.plot(color='C1')\ndecorate(xlabel=r'Book ordering rate ($\\lambda$)',\n        ylabel='PMF') \n```", "```py\nrates = pmf.choice(1000)\nnp.mean(rates) \n```", "```py\n8.906 \n```", "```py\nnp.random.seed(17)\norder_array = np.random.poisson(rates, size=(8, 1000)).transpose()\norder_array[:5, :] \n```", "```py\narray([[ 8,  2,  7,  8,  9,  9, 11, 12],\n       [ 5,  3,  5,  4,  3,  9,  4,  4],\n       [11, 11,  8,  3,  8,  7,  8,  5],\n       [ 6,  5,  9,  6,  9,  9, 12,  6],\n       [ 4,  4, 10,  5,  1,  6, 12,  6]]) \n```", "```py\ndef compute_expected_profits(printed, order_array):\n  \"\"\"Compute profits averaged over a sample of orders.\n\n printed: number printed\n order_array: one row per sample, one column per week\n \"\"\"\n    profits = [compute_profit(printed, orders)\n               for orders in order_array]\n    return np.mean(profits) \n```", "```py\ncompute_expected_profits(70, order_array) \n```", "```py\n182.96 \n```", "```py\ncompute_expected_profits(80, order_array) \n```", "```py\n181.994 \n```", "```py\ncompute_expected_profits(90, order_array) \n```", "```py\n157.608 \n```", "```py\nprinted_array = np.arange(70, 110)\nt = [compute_expected_profits(printed, order_array)\n                    for printed in printed_array]\nexpected_profits = pd.Series(t, printed_array) \n```", "```py\nexpected_profits.plot(label='')\n\ndecorate(xlabel='Number of books printed',\n         ylabel='Expected profit ($)') \n```", "```py\nexpected_profits.idxmax(), expected_profits.max() \n```", "```py\n(74, 186.328) \n```", "```py\n# Solution\n\n# For a prior I chose a log-uniform distribution; \n# that is, a distribution that is uniform in log-space\n# from 1 to 100 books per week.\n\nqs = np.logspace(0, 2, 101)\nprior = Pmf(1, qs)\nprior.normalize() \n```", "```py\n101 \n```", "```py\n# Solution\n\n# Here's the CDF of the prior\n\nprior.make_cdf().plot(color='C1')\ndecorate(xlabel=r'Book ordering rate ($\\lambda$)',\n         ylabel='CDF') \n```", "```py\n# Solution\n\n# Here's a function that updates the distribution of lambda\n# based on one week of orders\n\nfrom scipy.stats import poisson\n\ndef update_book(pmf, data):\n  \"\"\"Update book ordering rate.\n\n pmf: Pmf of book ordering rates\n data: observed number of orders in one week\n \"\"\"\n    k = data\n    lams = pmf.index\n    likelihood = poisson.pmf(k, lams)\n    pmf *= likelihood\n    pmf.normalize() \n```", "```py\n# Solution\n\n# Here's the update after week 1.\n\nposterior1 = prior.copy()\nupdate_book(posterior1, 10) \n```", "```py\n# Solution\n\n# And the update after week 2.\n\nposterior2 = posterior1.copy()\nupdate_book(posterior2, 9) \n```", "```py\n# Solution\n\nprior.mean(), posterior1.mean(), posterior2.mean() \n```", "```py\n(21.78849107458653, 10.000000817984526, 9.500000000003652) \n```", "```py\n# Solution\n\n# Now we can generate a sample of 1000 values from the posterior\n\nrates = posterior2.choice(1000)\nnp.mean(rates) \n```", "```py\n9.408095235418383 \n```", "```py\n# Solution\n\n# And we can generate a sequence of 8 weeks for each value\n\norder_array = np.random.poisson(rates, size=(8, 1000)).transpose()\norder_array[:5, :] \n```", "```py\narray([[ 9, 13,  7,  8, 11,  9, 11,  9],\n       [ 7, 12,  9,  9,  9,  7, 11, 12],\n       [12,  5, 10,  8, 12, 15, 13, 10],\n       [ 5, 10,  7,  4,  9, 11,  8, 15],\n       [ 5,  2,  3,  5,  3,  3,  4,  3]]) \n```", "```py\n# Solution\n\n# Here are the expected profits for each possible order\n\nprinted_array = np.arange(70, 110)\nt = [compute_expected_profits(printed, order_array)\n                    for printed in printed_array]\nexpected_profits = pd.Series(t, printed_array) \n```", "```py\n# Solution\n\n# And here's what they look like.\n\nexpected_profits.plot(label='')\n\ndecorate(xlabel='Number of books printed',\n         ylabel='Expected profit ($)') \n```", "```py\n# Solution\n\n# Here's the optimal order.\n\nexpected_profits.idxmax() \n```", "```py\n79 \n```"]