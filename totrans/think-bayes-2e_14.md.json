["```py\nx = [1, 3, 5]\ny = [2, 4] \n```", "```py\nimport numpy as np\n\nX, Y = np.meshgrid(x, y) \n```", "```py\nX \n```", "```py\narray([[1, 3, 5],\n       [1, 3, 5]]) \n```", "```py\nY \n```", "```py\narray([[2, 2, 2],\n       [4, 4, 4]]) \n```", "```py\nX * Y \n```", "```py\narray([[ 2,  6, 10],\n       [ 4, 12, 20]]) \n```", "```py\nimport pandas as pd\n\ndf = pd.DataFrame(X * Y, columns=x, index=y)\ndf \n```", "```py\nX + Y \n```", "```py\narray([[3, 5, 7],\n       [5, 7, 9]]) \n```", "```py\nX > Y \n```", "```py\narray([[False,  True,  True],\n       [False, False,  True]]) \n```", "```py\nmean = 178\nqs = np.arange(mean-24, mean+24, 0.5) \n```", "```py\nfrom scipy.stats import norm\n\nstd = 7.7\nps = norm(mean, std).pdf(qs) \n```", "```py\nfrom empiricaldist import Pmf\n\nprior = Pmf(ps, qs)\nprior.normalize() \n```", "```py\n1.9963309462450582 \n```", "```py\nfrom utils import decorate\n\nprior.plot(style='--', color='C5')\n\ndecorate(xlabel='Height in cm',\n         ylabel='PDF',\n         title='Approximate distribution of height for men in U.S.') \n```", "```py\ndef make_joint(pmf1, pmf2):\n  \"\"\"Compute the outer product of two Pmfs.\"\"\"\n    X, Y = np.meshgrid(pmf1, pmf2)\n    return pd.DataFrame(X * Y, columns=pmf1.qs, index=pmf2.qs) \n```", "```py\njoint = make_joint(prior, prior)\njoint.shape \n```", "```py\n(96, 96) \n```", "```py\njoint.to_numpy().sum() \n```", "```py\n1.0 \n```", "```py\nseries = joint.sum()\nseries.shape \n```", "```py\n(96,) \n```", "```py\nimport matplotlib.pyplot as plt\n\ndef plot_joint(joint, cmap='Blues'):\n  \"\"\"Plot a joint distribution with a color mesh.\"\"\"\n    vmax = joint.to_numpy().max() * 1.1\n    plt.pcolormesh(joint.columns, joint.index, joint, \n                   cmap=cmap,\n                   vmax=vmax,\n                   shading='nearest')\n    plt.colorbar()\n\n    decorate(xlabel='A height in cm',\n             ylabel='B height in cm') \n```", "```py\nplot_joint(joint)\ndecorate(title='Joint prior distribution of height for A and B') \n```", "```py\ndef plot_contour(joint):\n  \"\"\"Plot a joint distribution with a contour.\"\"\"\n    plt.contour(joint.columns, joint.index, joint,\n                linewidths=2)\n    decorate(xlabel='A height in cm',\n             ylabel='B height in cm') \n```", "```py\nplot_contour(joint)\ndecorate(title='Joint prior distribution of height for A and B') \n```", "```py\nx = joint.columns\ny = joint.index \n```", "```py\nX, Y = np.meshgrid(x, y) \n```", "```py\nA_taller = (X > Y)\nA_taller.dtype \n```", "```py\ndtype('bool') \n```", "```py\na = np.where(A_taller, 1, 0) \n```", "```py\nlikelihood = pd.DataFrame(a, index=x, columns=y) \n```", "```py\nplot_joint(likelihood, cmap='Oranges')\ndecorate(title='Likelihood of A>B') \n```", "```py\nposterior = joint * likelihood \n```", "```py\ndef normalize(joint):\n  \"\"\"Normalize a joint distribution.\"\"\"\n    prob_data = joint.to_numpy().sum()\n    joint /= prob_data\n    return prob_data \n```", "```py\nnormalize(posterior) \n```", "```py\n0.49080747821526977 \n```", "```py\nplot_joint(posterior)\ndecorate(title='Joint posterior distribution of height for A and B') \n```", "```py\ncolumn = posterior[180]\ncolumn.head() \n```", "```py\n154.0    0.000010\n154.5    0.000013\n155.0    0.000015\n155.5    0.000019\n156.0    0.000022\nName: 180.0, dtype: float64 \n```", "```py\ncolumn.sum() \n```", "```py\n0.03017221271570807 \n```", "```py\ncolumn_sums = posterior.sum(axis=0)\ncolumn_sums.head() \n```", "```py\n154.0    0.000000e+00\n154.5    1.012260e-07\n155.0    2.736152e-07\n155.5    5.532519e-07\n156.0    9.915650e-07\ndtype: float64 \n```", "```py\nmarginal_A = Pmf(column_sums) \n```", "```py\nmarginal_A.plot(label='Posterior for A')\n\ndecorate(xlabel='Height in cm',\n         ylabel='PDF',\n         title='Posterior distribution for A') \n```", "```py\nrow_sums = posterior.sum(axis=1)\nmarginal_B = Pmf(row_sums) \n```", "```py\nmarginal_B.plot(label='Posterior for B', color='C1')\n\ndecorate(xlabel='Height in cm',\n         ylabel='PDF',\n         title='Posterior distribution for B') \n```", "```py\ndef marginal(joint, axis):\n  \"\"\"Compute a marginal distribution.\"\"\"\n    return Pmf(joint.sum(axis=axis)) \n```", "```py\nmarginal_A = marginal(posterior, axis=0)\nmarginal_B = marginal(posterior, axis=1) \n```", "```py\nprior.plot(style='--', label='Prior', color='C5')\nmarginal_A.plot(label='Posterior for A')\nmarginal_B.plot(label='Posterior for B')\n\ndecorate(xlabel='Height in cm',\n         ylabel='PDF',\n         title='Prior and posterior distributions for A and B') \n```", "```py\nprior.mean() \n```", "```py\n177.99516026921506 \n```", "```py\nprint(marginal_A.mean(), marginal_B.mean()) \n```", "```py\n182.3872812342168 173.6028600023339 \n```", "```py\nprior.std() \n```", "```py\n7.624924796641578 \n```", "```py\nprint(marginal_A.std(), marginal_B.std()) \n```", "```py\n6.270461177645469 6.280513548175111 \n```", "```py\ncolumn_170 = posterior[170] \n```", "```py\ncond_B = Pmf(column_170)\ncond_B.normalize() \n```", "```py\n0.004358061205454471 \n```", "```py\nprior.plot(style='--', label='Prior', color='C5')\nmarginal_B.plot(label='Posterior for B', color='C1')\ncond_B.plot(label='Conditional posterior for B', \n            color='C4')\n\ndecorate(xlabel='Height in cm',\n         ylabel='PDF',\n         title='Prior, posterior and conditional distribution for B') \n```", "```py\n# Solution\n\n# Select a row from the posterior and normalize it\n\nrow_180 = posterior.loc[180]\ncond_A = Pmf(row_180)\ncond_A.normalize() \n```", "```py\n0.019669089649708035 \n```", "```py\n# Solution\n\n# Here's what it looks like\n\ncond_A.plot(label='Posterior for A given B=180', color='C4')\ndecorate(xlabel='Height in cm',\n         ylabel='PDF',\n         title='Conditional distribution for A') \n```", "```py\n# Solution\n\n# Here's a prior distribution for the height of\n# a randomly chosen woman\n\nmean = 163\nqs = np.arange(mean-24, mean+24, 0.5)\n\nstd = 7.3\nps = norm(mean, std).pdf(qs)\n\nprior_C = Pmf(ps, qs)\nprior_C.normalize() \n```", "```py\n1.997970387889823 \n```", "```py\n# Solution\n\n# Here's the joint prior for A and C\n\njoint_AC = make_joint(marginal_A, prior_C)\njoint_AC.shape \n```", "```py\n(96, 96) \n```", "```py\n# Solution\n\n# To compute the likelihood of the data, we'll\n# use a meshgrid\n\nx = joint_AC.columns\ny = joint_AC.index\nX, Y = np.meshgrid(x, y)\na = np.where(X-Y>=15, 1, 0)\nlikelihood_AC = pd.DataFrame(a, index=y, columns=x) \n```", "```py\n# Solution\n\n# Here's what the likelihood looks like\n\nplot_joint(likelihood_AC, cmap='Oranges')\ndecorate(ylabel='C height in cm',\n         title='Likelihood of A-C>=15') \n```", "```py\n# Solution\n\n# Here's the update\n\nposterior_AC = joint_AC * likelihood_AC\nnormalize(posterior_AC) \n```", "```py\n0.6839061829242195 \n```", "```py\n# Solution\n\n# And the joint posterior\n\nplot_joint(posterior_AC)\ndecorate(ylabel='C height in cm',\n         title='Joint posterior distribution of height for A and C') \n```", "```py\n# Solution\n\n# Here are the marginal posterior distributions\n\nmarginal_AC = marginal(posterior_AC, axis=0)\nmarginal_C = marginal(posterior_AC, axis=1) \n```", "```py\n# Solution\n\n# And here's what they look like\n\nprior_C.plot(style='--', label='Prior for C', color='C5')\nmarginal_C.plot(label='Posterior for C', color='C2')\nmarginal_AC.plot(label='Posterior for A', color='C0')\n\ndecorate(xlabel='Height in cm',\n         ylabel='PDF',\n         title='Prior and posterior distributions for A and C') \n```", "```py\n1 / (1 + 10**(-100/400)) \n```", "```py\n0.6400649998028851 \n```", "```py\n# Solution\n\n# Here are the priors for A and B\n\nqs = np.arange(1300, 1900, 10)\nps = norm(1600, 100).pdf(qs)\nprior_A_elo = Pmf(ps, qs)\nprior_A_elo.normalize()\n\nqs = np.arange(1500, 2100, 10)\nps = norm(1800, 100).pdf(qs)\nprior_B_elo = Pmf(ps, qs)\nprior_B_elo.normalize() \n```", "```py\n0.09972780668486173 \n```", "```py\n# Solution\n\n# Here's what the priors look like\n\nprior_A_elo.plot(style='--', label='Prior for A')\nprior_B_elo.plot(style='--', label='Prior for B')\n\ndecorate(xlabel='Elo rating',\n         ylabel='PDF',\n         title='Prior distributions for A and B') \n```", "```py\n# Solution\n\n# Here is the joint prior distribution\n\njoint_elo = make_joint(prior_A_elo, prior_B_elo)\njoint_elo.shape \n```", "```py\n(60, 60) \n```", "```py\n# Solution\n\n# And here's what it looks like\n\nplot_joint(joint_elo)\ndecorate(xlabel='A rating',\n         ylabel='B rating') \n```", "```py\n# Solution\n\n# Here's a meshgrid we can use to compute differences in rank\n\nx = joint_elo.columns\ny = joint_elo.index\nX, Y = np.meshgrid(x, y)\ndiff = X - Y \n```", "```py\n# Solution\n\n# And here are the likelihoods\n\na = 1 / (1 + 10**(-diff/400))\nlikelihood_elo = pd.DataFrame(a, columns=x, index=y)\n\nplot_joint(likelihood_elo, cmap='Oranges')   \ndecorate(xlabel='A rating',\n         ylabel='B rating') \n```", "```py\n# Solution\n\n# Here's the update\n\nposterior_elo = joint_elo * likelihood_elo\nnormalize(posterior_elo) \n```", "```py\n0.2660426288107942 \n```", "```py\n# Solution\n\n# Here's what the joint posterior looks like\n\nplot_joint(posterior_elo)   \ndecorate(xlabel='A rating',\n         ylabel='B rating') \n```", "```py\n# Solution\n\n# Here are the marginal posterior distributions\n\nmarginal_A_elo = marginal(posterior_elo, axis=0)\nmarginal_B_elo = marginal(posterior_elo, axis=1) \n```", "```py\n# Solution\n\n# Here's what they look like\n\nmarginal_A_elo.plot(label='Posterior for A')\nmarginal_B_elo.plot(label='Posterior for B')\n\ndecorate(xlabel='Elo rating',\n         ylabel='PDF',\n         title='Posterior distributions for A and B') \n```", "```py\n# Solution\n\n# Posterior means\n\nmarginal_A_elo.mean(), marginal_B_elo.mean() \n```", "```py\n(1636.648345528236, 1763.0203078793095) \n```", "```py\n# Solution\n\n# Posterior standard deviation\n\nmarginal_A_elo.std(), marginal_B_elo.std() \n```", "```py\n(95.34063582447712, 95.61569535990881) \n```"]