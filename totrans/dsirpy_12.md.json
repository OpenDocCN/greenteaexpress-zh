["```py\nitems = []\n\nkey = 'a'\nvalue = 1\nitems.append((key, value))\n\nitems.append(('b', 2))\n\ntarget = 'b'\nfor k, v in items:\n    if k == target:\n        print(v) \n```", "```py\n2 \n```", "```py\nitems = []\n\ndef add(k, v):\n    items.append((k, v))\n\nadd('a', 1)\nadd('b', 2)\n\ndef get(target):\n    for key, val in items:\n        if key == target:\n            print(val)\n\nget('b') \n```", "```py\n2 \n```", "```py\nclass LinearMap:\n    def __init__(self):\n        self.items = []\n\nlmap = LinearMap()\nlmap.items \n```", "```py\n[] \n```", "```py\nclass LinearMap:\n\n    def __init__(self):\n        self.items = []\n\n    def add(self, k, v):\n        self.items.append((k, v))\n\n    def get(self, target):\n        for k, v in self.items:\n            if k == target:\n                return v\n        raise KeyError(f'{target} not found') \n```", "```py\nimport string\n\nlmap = LinearMap()\n\nfor i, c in enumerate(string.ascii_lowercase):\n    lmap.add(c, i)\n\nlmap.get('x') \n```", "```py\n23 \n```", "```py\nclass BetterMap:\n\n    def __init__(self, n=100):\n        self.maps = [LinearMap() for i in range(100)]\n\n    def find_map(self, k):\n        index = hash(k) % len(self.maps)\n        return self.maps[index]\n\n    def add(self, k, v):\n        m = self.find_map(k)\n        m.add(k, v)\n\n    def get(self, k):\n        m = self.find_map(k)\n        return m.get(k) \n```", "```py\nbmap = BetterMap()\n\nfor i, c in enumerate(string.ascii_lowercase):\n    bmap.add(c, i)\n\nbmap.get('x') \n```", "```py\n23 \n```", "```py\nfor lmap in bmap.maps:\n    print(len(lmap.items)) \n```", "```py\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n2\n1\n0\n1\n0\n0\n0\n0\n0\n1\n2\n0\n0\n0\n0\n1\n1\n2\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n1 \n```", "```py\nfrom fractions import Fraction\n\nhash(2), hash(2.0), hash(2 + 0j), hash(Fraction(4, 2)) \n```", "```py\n(2, 2, 2, 2) \n```", "```py\nt = 2,\nhash(t) \n```", "```py\n6909455589863252355 \n```", "```py\ntry:\n    hash([2])\nexcept TypeError as e:\n    print(e) \n```", "```py\nunhashable type: 'list' \n```", "```py\nhash('2') \n```", "```py\n133118177212449111 \n```", "```py\nclass HashMap:\n\n    def __init__(self):\n        self.bmap = BetterMap(2)\n        self.num = 0\n\n    def get(self, k):\n        return self.bmap.get(k)\n\n    def add(self, k, v):\n        if self.num == len(self.bmap.maps):\n            self.resize()\n\n        self.bmap.add(k, v)\n        self.num += 1\n\n    def resize(self):\n        new_bmap = BetterMap(len(self.bmap.maps) * 2)\n\n        for m in self.bmap.maps:\n            for k, v in m.items:\n                new_bmap.add(k, v)\n\n        self.bmap = new_bmap \n```", "```py\nhmap = HashMap()\n\nfor i, c in enumerate(string.ascii_lowercase):\n    hmap.add(c, i)\n\nhmap.get('x') \n```", "```py\n23 \n```", "```py\nfrom collections import Counter\n\ndef is_anagram2(word1, word2):\n    return Counter(word1) == Counter(word2) \n```", "```py\ndef is_anagram3(word1, word2):\n    return sorted(word1) == sorted(word2) \n```", "```py\n%timeit is_anagram2('tachymetric', 'mccarthyite') \n```", "```py\n4.84 \u00b5s \u00b1 144 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each) \n```", "```py\n%timeit is_anagram3('tachymetric', 'mccarthyite') \n```", "```py\n758 ns \u00b1 13.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each) \n```"]