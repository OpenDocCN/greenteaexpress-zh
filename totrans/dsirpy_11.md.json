["```py\nt = [5, 1, 2, 4, 2] \n```", "```py\n5 in t, 6 in t \n```", "```py\n(True, False) \n```", "```py\nt.index(2) \n```", "```py\n2 \n```", "```py\ntry:\n    t.index(6)\nexcept ValueError as e:\n    print(e) \n```", "```py\n6 is not in list \n```", "```py\ndef index(t, target):\n    for i, x in enumerate(t):\n        if x == target:\n            return i\n    raise ValueError(f'{target} is not in list') \n```", "```py\nindex(t, 2) \n```", "```py\n2 \n```", "```py\ntry:\n    index(t, 6)\nexcept ValueError as e:\n    print(e) \n```", "```py\n6 is not in list \n```", "```py\nt.sort()\nt \n```", "```py\n[1, 2, 2, 4, 5] \n```", "```py\nfrom bisect import bisect_left\n\nbisect_left(t, 1), bisect_left(t, 2), bisect_left(t, 4), bisect_left(t, 5) \n```", "```py\n(0, 1, 3, 4) \n```", "```py\nbisect_left(t, 6) \n```", "```py\n5 \n```", "```py\nfrom bisect import bisect_left\n\ndef index_bisect(a, x):\n  \"\"\"Locate the leftmost value exactly equal to x\"\"\"\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError(f'{x} not in list') \n```", "```py\nindex_bisect(t, 1), index_bisect(t, 2), index_bisect(t, 4), index_bisect(t, 5) \n```", "```py\n(0, 1, 3, 4) \n```", "```py\ntry:\n    index_bisect(t, 6)\nexcept ValueError as e:\n    print(e) \n```", "```py\n6 not in list \n```", "```py\nfrom bisect import insort\n\ninsort(t, 3)\nt \n```", "```py\n[1, 2, 2, 3, 4, 5] \n```", "```py\nclass Node:\n    def __init__(self, data, left=None, right=None):\n        self.data = data\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        return f'Node({self.data}, {repr(self.left)}, {repr(self.right)})' \n```", "```py\nnode3 = Node(3)\nnode10 = Node(10) \n```", "```py\nnode3 \n```", "```py\nNode(3, None, None) \n```", "```py\nnode8 = Node(8, node3, node10)\nnode8 \n```", "```py\nNode(8, Node(3, None, None), Node(10, None, None)) \n```", "```py\nclass BSTree:\n    def __init__(self, root=None):\n        self.root = root\n\n    def __repr__(self):\n        return f'BSTree({repr(self.root)})' \n```", "```py\ntree = BSTree(node8)\ntree \n```", "```py\nBSTree(Node(8, Node(3, None, None), Node(10, None, None))) \n```", "```py\ndef is_bst(tree):\n    return is_bst_rec(tree.root)\n\ndef is_bst_rec(node):\n    if node is None:\n        return True\n\n    if node.left and node.left.data > node.data:\n        return False\n    if node.right and node.right.data < node.data:\n        return False\n\n    return is_bst_rec(node.left) and is_bst_rec(node.right) \n```", "```py\nis_bst(tree) \n```", "```py\nTrue \n```", "```py\nnode5 = Node(5, node10, node3)\nnode5 \n```", "```py\nNode(5, Node(10, None, None), Node(3, None, None)) \n```", "```py\ntree2 = BSTree(node5)\nis_bst(tree2) \n```", "```py\nFalse \n```", "```py\ntry:\n    import EoN\nexcept ImportError:\n    !pip  install  EoN \n```", "```py\nimport networkx as nx\n\ndef add_edges(node, G):\n  \"\"\"Make a NetworkX graph that represents the heap.\"\"\"\n    if node is None:\n        return\n\n    G.add_node(node, label=node.data)\n    for child in (node.left, node.right):\n        if child:\n            G.add_edge(node, child)\n            add_edges(child, G) \n```", "```py\nG = nx.DiGraph()\nadd_edges(tree.root, G)\nG.nodes() \n```", "```py\nNodeView((Node(8, Node(3, None, None), Node(10, None, None)), Node(3, None, None), Node(10, None, None))) \n```", "```py\nlabels = {node: node.data for node in G.nodes()}\nlabels \n```", "```py\n{Node(8, Node(3, None, None), Node(10, None, None)): 8,\n Node(3, None, None): 3,\n Node(10, None, None): 10} \n```", "```py\nfrom EoN import hierarchy_pos\n\ndef draw_tree(tree):\n    G = nx.DiGraph()\n    add_edges(tree.root, G)\n    pos = hierarchy_pos(G)\n    labels = {node: node.data for node in G.nodes()}\n    nx.draw(G, pos, labels=labels, alpha=0.4) \n```", "```py\ndraw_tree(tree) \n```", "```py\ndef insert(tree, data):\n    tree.root = insert_node(tree.root, data)\n\ndef insert_node(node, data):\n    if node is None:\n        return Node(data)\n\n    if data < node.data:\n        node.left = insert_node(node.left, data)\n    else:\n        node.right = insert_node(node.right, data)\n\n    return node \n```", "```py\ntree = BSTree()\n\nvalues = [8, 3, 10, 1, 6, 14, 4, 7, 13]\nfor value in values:\n    insert(tree, value)\n\ntree \n```", "```py\nBSTree(Node(8, Node(3, Node(1, None, None), Node(6, Node(4, None, None), Node(7, None, None))), Node(10, None, Node(14, Node(13, None, None), None)))) \n```", "```py\ndraw_tree(tree) \n```", "```py\nis_bst(tree) \n```", "```py\nTrue \n```", "```py\ndef print_tree(tree):\n    print_tree_rec(tree.root)\n\ndef print_tree_rec(node):\n    if node is None:\n        return\n\n    print_tree_rec(node.left)\n    print(node.data, end=' ')\n    print_tree_rec(node.right) \n```", "```py\nprint_tree(tree) \n```", "```py\n1 3 4 6 7 8 10 13 14 \n```", "```py\ntree3 = BSTree()\nfor x in sorted(values):\n    insert(tree3, x) \n```", "```py\ndraw_tree(tree3) \n```", "```py\ndef rotate_left(node):\n    if node is None or node.right is None:\n        return node\n\n    pivot = node.right\n    node.right = pivot.left\n    pivot.left = node\n\n    return pivot \n```", "```py\ntree3.root = rotate_left(tree3.root)\ndraw_tree(tree3) \n```"]