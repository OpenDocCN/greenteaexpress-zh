- en: Times and Places
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ElementsOfDataScience/02_times.html](https://allendowney.github.io/ElementsOfDataScience/02_times.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Run this notebook on Colab](https://colab.research.google.com/github/AllenDowney/ElementsOfDataScience/blob/master/02_times.ipynb)
    or'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[Run this notebook on Sagemaker Studio Lab](https://studiolab.sagemaker.aws/import/github/AllenDowney/ElementsOfDataScience/blob/master/02_times.ipynb)
    or'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[Download this notebook](https://github.com/AllenDowney/ElementsOfDataScience/raw/master/02_times.ipynb).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned about variables and two kinds of values:
    integers and floating-point numbers.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll see some additional types:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Strings, which represent text.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time stamps, which represent dates and times.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And several ways to represent and display geographical locations.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not every data science project uses all of these types, but many projects use
    at least one.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **string** is a sequence of letters, numbers, and punctuation marks. In Python
    you can create a string by enclosing text between single or double quotation marks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And you can assign string values to variables.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Some arithmetic operators work with strings, but they might not do what you
    expect. For example, the `+` operator **concatenates** two strings; that is, it
    creates a new string that contains the first string followed by the second string:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want to put a space between the words, you can use a string that contains
    a space:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Strings are used to store text data like names, addresses, titles, etc.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'When you read data from a file, you might see values that look like numbers,
    but they are actually strings, like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you try to do math with these strings, you *might* get an error. For example,
    the following expression causes a `TypeError` with the message “can only concatenate
    `str` (not `int`) to `str`”.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But you don’t always get an error message; instead, you might get a surprising
    result. For example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you multiply a string by an integer, Python repeats the string the given
    number of times.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a string that contains only digits, you can convert it to an integer
    using the `int` function:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or you can convert it to a floating-point number using `float`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: But if the string contains a decimal point, you can’t convert it to an `int`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Going in the other direction, you can convert any type of value to a string
    using `str`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Exercise**: When personal names are stored in a database, they are often
    stored in three variables: a given name, a family name, and sometimes a middle
    name. For example, a list of great rock drummers might include:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: But names are often displayed different ways in different contexts. For example,
    the first time you mention someone in an article, you might give all three names,
    like “Neil Ellwood Peart”. But in the index of a book, you might put the family
    name first, like “Peart, Neil Ellwood”.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Write Python expressions that use the variables `given`, `middle`, and `family`
    to display Neil Peart’s name in these two formats.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Representing Dates and Times
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you read data from a file, you might also find that dates and times are represented
    with strings.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To confirm that this value is a string, we can use the `type` function, which
    takes a value and reports its type.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`str` indicates that the value of `not_really_a_date` is a string.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the same result with `not_really_a_time`, below:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Strings that represent dates and times a readable for people, but they are not
    useful for computation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, Python provides libraries for working with date and time data;
    the one we’ll use is called Pandas. As always, we have to import a library before
    we use it; it is conventional to import Pandas with the abbreviated name `pd`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Pandas provides a type called `Timestamp`, which represents a date and time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'It also provides a function called `Timestamp`, which we can use to convert
    a string to a `Timestamp`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Or we can do the same thing using the variable defined above.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this example, the string specifies a time but no date, so Pandas fills in
    today’s date.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字符串指定了时间但没有日期，所以Pandas填充了今天的日期。
- en: A `Timestamp` is a value, so you can assign it to a variable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Timestamp`是一个值，所以你可以将它赋给一个变量。'
- en: '[PRE33]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If the string specifies a date but no time, Pandas fills in midnight as the
    default time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串指定了日期但没有时间，Pandas会将午夜填充为默认时间。
- en: 'If you assign the `Timestamp` to a variable, you can use the variable name
    to get the year, month, and day, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将`Timestamp`赋给一个变量，你可以使用变量名来获取年、月和日，就像这样：
- en: '[PRE35]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You can also get the name of the month and the day of the week.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以得到月份的名称和星期几。
- en: '[PRE37]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`Timestamp` provides a function called `now` that returns the current date
    and time.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Timestamp`提供了一个名为`now`的函数，返回当前的日期和时间。'
- en: '[PRE39]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Exercise:** Use the value of `now` to display the name of the current month
    and day of the week.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**使用`now`的值来显示当前月份和星期几的名称。'
- en: Timedelta
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间差
- en: '`Timestamp` values support some arithmetic operations. For example, you can
    compute the difference between two `Timestamp` objects:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Timestamp`值支持一些算术运算。例如，你可以计算两个`Timestamp`对象之间的差异：'
- en: '[PRE41]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The result is a `Timedelta` that represents the current age of someone born
    on `date_of_birth`. The `Timedelta` contains `components` that store the number
    of days, hours, etc. between the two `Timestamp` values.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个`Timedelta`，表示出生于`date_of_birth`的人的当前年龄。`Timedelta`包含`components`，存储两个`Timestamp`值之间的天数、小时等。
- en: '[PRE43]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can get one of the components like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样得到其中的一个组成部分：
- en: '[PRE45]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The biggest component of `Timedelta` is days, not years, because days are well
    defined and years are problematic.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Timedelta`的最大组成部分是天数，而不是年份，因为天数是明确定义的，而年份是有问题的。'
- en: Most years are 365 days, but some are 366\. The average calendar year is 365.24
    days, which is a very good approximation of a solar year, but it is not exact
    (see [https://pumas.jpl.nasa.gov/files/04_21_97_1.pdf](https://pumas.jpl.nasa.gov/files/04_21_97_1.pdf)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数年份为365天，但有些为366天。平均日历年为365.24天，这是对太阳年的一个非常好的近似，但并不是精确的（参见[https://pumas.jpl.nasa.gov/files/04_21_97_1.pdf](https://pumas.jpl.nasa.gov/files/04_21_97_1.pdf)）。
- en: 'One way to compute age in years is to divide age in days by 365.24:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 计算年龄的一种方法是将天数除以365.24：
- en: '[PRE47]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'But people usually report their ages in integer years. We can use the Numpy
    `floor` function to round down:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 但人们通常用整数年龄来报告他们的年龄。我们可以使用Numpy的`floor`函数向下取整：
- en: '[PRE49]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Or the `ceil` function (which stands for “ceiling”) to round up:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用`ceil`函数（代表“天花板”）来向上取整：
- en: '[PRE51]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We can also compare `Timestamp` values to see which comes first. For example,
    let’s see if a person with a given birthdate has already had a birthday this year.
    Here’s a new `Timestamp` with the year from `now` and the month and day from `date_of_birth`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以比较`Timestamp`值，看哪个先出现。例如，让我们看看一个具有给定生日的人今年是否已经过了生日。这是一个新的`Timestamp`，年份来自`now`，月份和日期来自`date_of_birth`。
- en: '[PRE53]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The result represents the person’s birthday this year. Now we can use the `>`
    operator to check whether `now` is later than the birthday:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 结果代表了今年的人的生日。现在我们可以使用`>`运算符来检查`now`是否晚于生日：
- en: '[PRE55]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The result is either `True` or `False`. These values belong to a type called
    `bool`; the name comes from “Boolean algebra”, which is a branch of algebra where
    all values are either true or false.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 结果要么是`True`要么是`False`。这些值属于一种叫做`bool`的类型；这个名字来自“布尔代数”，这是代数的一个分支，其中所有的值要么是真要么是假。
- en: '[PRE57]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '**Exercise:** Any two people with different birthdays have a “Double Day” when
    one is twice as old as the other. Suppose you are given two `Timestamp` values,
    `d1` and `d2`, that represent birthdays for two people. Use `Timestamp` arithmetic
    to compute their double day. With the following dates, the result should be December
    19, 2009.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**任何两个生日不同的人都有一个“双倍日”，当一个人的年龄是另一个人的两倍时。假设你有两个`Timestamp`值，`d1`和`d2`，代表两个人的生日。使用`Timestamp`算术来计算他们的双倍日。根据以下日期，结果应该是2009年12月19日。'
- en: '[PRE61]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Representing Location
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位置表示
- en: In addition to times and dates, we might also want to represent locations, especially
    if we are working with geographical data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了时间和日期，我们可能还想表示位置，特别是如果我们正在处理地理数据的话。
- en: 'There are many ways to represent locations, but the most common, at least for
    global data, is latitude and longitude. When stored as strings, latitude and longitude
    are expressed in degrees with compass directions N, S, E, and W. For example,
    this string represents the location of Boston, MA, USA:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多种方法来表示位置，但至少对于全球数据来说，最常见的是纬度和经度。当存储为字符串时，纬度和经度用度数和罗盘方向N、S、E和W来表示。例如，这个字符串表示了波士顿，马萨诸塞州，美国的位置：
- en: '[PRE62]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: When we compute with location information, we use floating-point numbers, with
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用位置信息进行计算时，我们使用浮点数，其中
- en: Positive latitude for the northern hemisphere, negative latitude for the southern
    hemisphere, and
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 北半球的纬度为正，南半球的纬度为负，
- en: Positive longitude for the eastern hemisphere and negative longitude for the
    western hemisphere.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 东半球的经度为正，西半球的经度为负。
- en: Of course, the choice of the origin and the orientation of positive and negative
    are arbitrary choices that were made for historical reasons. We might not be able
    to change conventions like these, but we should be aware that they are conventions.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，原点的选择和正负的方向是出于历史原因而做出的任意选择。我们可能无法改变这些约定，但我们应该意识到它们是约定。
- en: Here’s how we might represent the location of Boston with two variables.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何用两个变量表示波士顿的位置。
- en: '[PRE63]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'It is also possible to combine two numbers into a composite value and assign
    it to a single variable:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将两个数字组合成一个复合值，并将其赋给一个单一的变量：
- en: '[PRE64]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The type of this variable is `tuple`, which is a mathematical term for a value
    that contains a sequence of elements. Math people pronounce it “tuh’ ple”, but
    computational people usually say “too’ ple”. Take your pick.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量的类型是`tuple`，这是一个数学术语，表示包含一系列元素的值。数学家读作“tuh’ ple”，但计算机人通常说“too’ ple”。随你喜欢。
- en: '[PRE66]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'If you have a tuple with two elements, you can assign them to two variables,
    like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个包含两个元素的元组，你可以将它们分配给两个变量，就像这样：
- en: '[PRE68]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Notice that I assigned latitude to `y` and longitude to `x`, because a `y` coordinate
    usually goes up and down like latitude, and an `x` coordinate usually goes side-to-side
    like longitude.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我将纬度赋给`y`，经度赋给`x`，因为`y`坐标通常上下移动，就像纬度一样，而`x`坐标通常左右移动，就像经度一样。
- en: '**Exercise:** Find the latitude and longitude of the place you were born or
    someplace you think of as your “home town”. [You can use this web page to look
    it up](https://www.latlong.net/). Make a tuple of floating-point numbers that
    represents that location.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**找到你出生的地方或者你认为是你的“家乡”的经纬度。[你可以使用这个网页查找](https://www.latlong.net/)。创建一个表示该位置的浮点数元组。'
- en: Calculating Distance
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算距离
- en: 'If you are given two tuples that represent locations, you can compute the approximate
    distance between them, along the surface of the globe, using the haversine function.
    If you are curious about it, [you can read an explanation in this article](https://janakiev.com/blog/gps-points-distance-python/).
    To estimate a haversine distance, we have to compute the haversine function, which
    is defined:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有两个表示位置的元组，你可以使用haversine函数计算它们之间的大致距离，沿着地球表面，如果你对此感兴趣，[你可以在这篇文章中阅读解释](https://janakiev.com/blog/gps-points-distance-python/)。要估算haversine距离，我们必须计算haversine函数，它的定义是：
- en: \(\mathrm{haversine}(\theta)=\sin^2(\theta/2)\)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: \(\mathrm{haversine}(\theta)=\sin^2(\theta/2)\)
- en: 'Where \(\theta\) is an angle in radians. We can compute this function in Python
    like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 角度\(\theta\)是以弧度表示的。我们可以在Python中计算这个函数：
- en: '[PRE72]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: You can use Greek letters in variable names, but there is currently no way to
    type them in Jupyter/Colab, so I usually copy them from a web page and paste them
    in.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在变量名中使用希腊字母，但目前在Jupyter/Colab中没有办法输入它们，所以我通常是从网页上复制然后粘贴。
- en: 'To avoid the inconvenience, it is more common to write out letter names, like
    this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免不便，更常见的是写出字母名称，就像这样：
- en: '[PRE74]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Remember that the operator for exponentiation is `**`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，求幂的运算符是`**`。
- en: In some other languages it’s `^`, which is also an operator in Python, but it
    performs another operation altogether.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他一些语言中，它是`^`，这也是Python中的一个运算符，但它执行完全不同的操作。
- en: Defining Functions
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义函数
- en: 'If we are planning to use an expression like `np.sin(theta/2)**2` more than
    a few times, we can define a new function that computes it, like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打算多次使用类似`np.sin(theta/2)**2`的表达式，我们可以定义一个新的函数来计算它，就像这样：
- en: '[PRE76]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: On the first line, `def` indicates that we are defining a function.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，`def`表示我们正在定义一个函数。
- en: 'The second line is a triple-quoted string, which is a **comment**: it describes
    what the function does, but has no effect when the program runs.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行是一个三引号字符串，它是一个**注释**：它描述了函数的功能，但在程序运行时没有任何影响。
- en: On the third line, `return` indicates the result of the function.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三行，`return`表示函数的结果。
- en: 'When you run the previous cell, it creates a new variable called `haversine`.
    You can display its value like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行前面的单元格时，它会创建一个名为`haversine`的新变量。你可以这样显示它的值：
- en: '[PRE77]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'And you can display its type like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样显示它的类型：
- en: '[PRE79]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'So `haversine` is a variable that refers to a function. To run the function
    and compute a result, we have to **call** the function and provide a value for
    `theta`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`haversine`是一个指向函数的变量。要运行函数并计算结果，我们必须**调用**函数并为`theta`提供一个值：
- en: '[PRE81]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: When you define a function, you create a new variable. But the function doesn’t
    actually run until you call it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义一个函数时，你创建了一个新变量。但是函数实际上直到你调用它时才运行。
- en: Haversine Distance
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Haversine距离
- en: Now we can use `haversine` as part of a function that computes haversine distances.
    I won’t explain this function in as much detail, but if you read through it, you
    might get a sense of how it works.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`haversine`作为计算haversine距离的函数的一部分。我不会详细解释这个函数，但如果你仔细阅读它，你可能会对它的工作原理有所了解。
- en: '[PRE83]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'When we call this function, we provide two tuples; each is a latitude-longitude
    pair. We already have a tuple that represents the location of Boston. Now here’s
    a tuple that represents the location of London, England, UK:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用这个函数时，我们提供两个元组；每个元组都是一个纬度-经度对。我们已经有一个表示波士顿位置的元组。现在这是一个表示英格兰伦敦位置的元组：
- en: '[PRE84]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: And here’s the haversine distance between Boston and London.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是波士顿和伦敦之间的haversine距离。
- en: '[PRE85]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The actual geographic distance is slightly different because Earth is not a
    perfect sphere. But the error of this estimate is less than 1%.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的地理距离略有不同，因为地球不是一个完美的球体。但这个估计的误差小于1%。
- en: '**Exercise:** Use `haversine_distance` to compute the distance between Boston
    and your home town from the previous exercise.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**使用`haversine_distance`计算波士顿和你在前一个练习中的家乡之间的距离。'
- en: If possible, use an online map to check the result.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，使用在线地图来检查结果。
- en: Geopandas
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Geopandas
- en: Python provides libraries for working with geographical data. One of the most
    popular is Geopandas, which is based on another library called Shapely. Shapely
    provides `Point` and `LineString` values, which we’ll use to represent geographic
    locations and lines between them.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了用于处理地理数据的库。其中最流行的之一是Geopandas，它基于另一个叫做Shapely的库。Shapely提供了`Point`和`LineString`值，我们将用它们来表示地理位置和它们之间的线。
- en: '[PRE87]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: We can use the tuples we defined in the previous section to create Shapely `Point`
    values, but we have to reverse the order of the coordinates, providing them in
    \(x\)-\(y\) order rather than `lat`-`lon` order, because that’s the order the
    `Point` function expects.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用前一节中定义的元组来创建Shapely `Point`值，但是我们必须颠倒坐标的顺序，以`x`-`y`的顺序提供它们，而不是`lat`-`lon`的顺序，因为这是`Point`函数期望的顺序。
- en: '[PRE88]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'We can use the points we just defined to create a `LineString`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用刚刚定义的点来创建一个`LineString`：
- en: '[PRE90]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Now we can use Geopandas to show these points and lines on a map. The following
    code loads a map of the world and plots it.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用Geopandas在地图上显示这些点和线。以下代码加载了世界地图并绘制了它。
- en: '[PRE91]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: By default, Geopandas uses an equirectangular projection, which provides a misleading
    picture of relative land areas (see [https://en.wikipedia.org/wiki/Equirectangular_projection](https://en.wikipedia.org/wiki/Equirectangular_projection)).
    You can’t make a map without making visualization decisions.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Geopandas使用等距投影，这会给出相对陆地面积的错误印象（参见[https://en.wikipedia.org/wiki/Equirectangular_projection](https://en.wikipedia.org/wiki/Equirectangular_projection)）。你不能在不做可视化决策的情况下制作地图。
- en: Now let’s put dots on the map for Boston and London. We have to put the `Point`
    values and the `LineString` into a `GeoSeries`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在地图上标出波士顿和伦敦的点。我们必须将`Point`值和`LineString`放入`GeoSeries`中。
- en: '[PRE92]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Here’s a first attempt to plot the maps and the lines together:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将地图和线绘制在一起的第一次尝试：
- en: '[PRE93]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '![_images/02_times_133_0.png](../Images/07a5b4ee8bd995963f36fa3fe983105e.png)
    ![_images/02_times_133_1.png](../Images/3e9084ac867903b0a9279d8513c75293.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![_images/02_times_133_0.png](../Images/07a5b4ee8bd995963f36fa3fe983105e.png)
    ![_images/02_times_133_1.png](../Images/3e9084ac867903b0a9279d8513c75293.png)'
- en: The two plots are on different axes, which is not what we want in this case.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个图是在不同的坐标轴上，这在这种情况下并不是我们想要的。
- en: To get the points and the map on the same axes, we have to use a function from
    Matplotlib, which is a visualization library we will use extensively. We’ll import
    it like this.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在同一坐标轴上获得点和地图，我们必须使用Matplotlib中的一个函数，这是一个我们将广泛使用的可视化库。我们会像这样导入它。
- en: '[PRE94]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The function is `gca`, which stands for “get current axes”. We can use the result
    to tell `plot` to put the points and lines on the current axes, rather than create
    a new one.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数是`gca`，代表“获取当前坐标轴”。我们可以使用结果告诉`plot`将点和线放在当前坐标轴上，而不是创建一个新的坐标轴。
- en: '[PRE95]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '![_images/02_times_137_0.png](../Images/81fa0bef649e15f70a76f8f71ad31dd0.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![_images/02_times_137_0.png](../Images/81fa0bef649e15f70a76f8f71ad31dd0.png)'
- en: '**Exercise:** Modify the code in this section to plot a point that shows the
    home town you chose in a previous exercise and a line from there to Boston.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：** 修改本节中的代码，以绘制一个点，显示你在之前练习中选择的家乡，并从那里到波士顿的一条线。'
- en: Then go to [this online survey](https://forms.gle/2LDcqxJmcWY3Q3X47) and answer
    the questions there.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后去[这个在线调查](https://forms.gle/2LDcqxJmcWY3Q3X47)并回答那里的问题。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter presents three new data types: strings to represent letters and
    words, `Timestamp` objects to represent dates and times, and tuples to represent
    latitude, longitude pairs.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了三种新的数据类型：字符串表示字母和单词，`Timestamp`对象表示日期和时间，以及元组表示纬度和经度对。
- en: It also introduces Geopandas, a library for working with location data.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 它还介绍了Geopandas，这是一个处理位置数据的库。
- en: In the next chapter we’ll see two ways to represent a collection of data, a
    Python list and a Numpy array.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到两种表示数据集的方法，一个是Python列表，另一个是Numpy数组。
