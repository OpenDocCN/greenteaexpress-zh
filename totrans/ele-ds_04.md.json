["```py\n'Elements' \n```", "```py\n'Elements' \n```", "```py\n\"of\" \n```", "```py\n'of' \n```", "```py\nfirst = 'Data' \n```", "```py\nlast = \"Science\" \n```", "```py\nfirst + last \n```", "```py\n'DataScience' \n```", "```py\nfirst + ' ' + last \n```", "```py\n'Data Science' \n```", "```py\nnot_actually_a_number = '123' \n```", "```py\nnot_actually_a_number + 1 \n```", "```py\nnot_actually_a_number * 3 \n```", "```py\n'123123123' \n```", "```py\nint('123') \n```", "```py\n123 \n```", "```py\nfloat('123') \n```", "```py\n123.0 \n```", "```py\nstr(123) \n```", "```py\n'123' \n```", "```py\nstr(12.3) \n```", "```py\n'12.3' \n```", "```py\ngiven = 'Neil'\nmiddle = 'Ellwood'\nfamily = 'Peart' \n```", "```py\nnot_really_a_date = 'June 4, 1989' \n```", "```py\ntype(not_really_a_date) \n```", "```py\nstr \n```", "```py\nnot_really_a_time = '6:30:00'\ntype(not_really_a_time) \n```", "```py\nstr \n```", "```py\nimport pandas as pd \n```", "```py\npd.Timestamp('6:30:00') \n```", "```py\nTimestamp('2022-01-25 06:30:00') \n```", "```py\npd.Timestamp(not_really_a_time) \n```", "```py\nTimestamp('2022-01-25 06:30:00') \n```", "```py\ndate_of_birth = pd.Timestamp('June 4, 1989')\ndate_of_birth \n```", "```py\nTimestamp('1989-06-04 00:00:00') \n```", "```py\ndate_of_birth.year, date_of_birth.month, date_of_birth.day \n```", "```py\n(1989, 6, 4) \n```", "```py\ndate_of_birth.day_name(), date_of_birth.month_name() \n```", "```py\n('Sunday', 'June') \n```", "```py\nnow = pd.Timestamp.now()\nnow \n```", "```py\nTimestamp('2022-01-25 14:26:11.312256') \n```", "```py\nage = now - date_of_birth\nage \n```", "```py\nTimedelta('11923 days 14:26:11.312256') \n```", "```py\nage.components \n```", "```py\nComponents(days=11923, hours=14, minutes=26, seconds=11, milliseconds=312, microseconds=256, nanoseconds=0) \n```", "```py\nage.days \n```", "```py\n11923 \n```", "```py\nage.days / 365.24 \n```", "```py\n32.64428868689081 \n```", "```py\nimport numpy as np\n\nnp.floor(age.days / 365.24) \n```", "```py\n32.0 \n```", "```py\nnp.ceil(age.days / 365.24) \n```", "```py\n33.0 \n```", "```py\nbday_this_year = pd.Timestamp(now.year, \n                              date_of_birth.month, \n                              date_of_birth.day)\nbday_this_year \n```", "```py\nTimestamp('2022-06-04 00:00:00') \n```", "```py\nnow > bday_this_year \n```", "```py\nFalse \n```", "```py\ntype(True) \n```", "```py\nbool \n```", "```py\ntype(False) \n```", "```py\nbool \n```", "```py\nd1 = pd.Timestamp('2003-07-12')\nd2 = pd.Timestamp('2006-09-30') \n```", "```py\nlat_lon_string = '42.3601\u00b0 N, 71.0589\u00b0 W' \n```", "```py\nlat = 42.3601\nlon = -71.0589 \n```", "```py\nboston = lat, lon\nboston \n```", "```py\n(42.3601, -71.0589) \n```", "```py\ntype(boston) \n```", "```py\ntuple \n```", "```py\ny, x = boston\ny \n```", "```py\n42.3601 \n```", "```py\nx \n```", "```py\n-71.0589 \n```", "```py\nimport numpy as np\n\n\u03b8 = 1\nnp.sin(\u03b8/2)**2 \n```", "```py\n0.22984884706593015 \n```", "```py\ntheta = 1\nnp.sin(theta/2)**2 \n```", "```py\n0.22984884706593015 \n```", "```py\ndef haversine(theta):\n    \"\"\"Compute the haversine function of theta.\"\"\"\n    return np.sin(theta/2)**2 \n```", "```py\nhaversine \n```", "```py\n<function __main__.haversine(theta)> \n```", "```py\ntype(haversine) \n```", "```py\nfunction \n```", "```py\nhaversine(1) \n```", "```py\n0.22984884706593015 \n```", "```py\ndef haversine_distance(coord1, coord2):\n    \"\"\"Haversine distance between two locations.\n\n coord1: lat-lon as tuple of float \n coord2: lat-lon as tuple of float\n\n returns: distance in km\n \"\"\"\n    R = 6372.8  # Earth radius in km\n    lat1, lon1 = coord1\n    lat2, lon2 = coord2\n\n    phi1, phi2 = np.radians(lat1), np.radians(lat2) \n    dphi       = np.radians(lat2 - lat1)\n    dlambda    = np.radians(lon2 - lon1)\n\n    a = haversine(dphi) + np.cos(phi1)*np.cos(phi2)*haversine(dlambda)\n\n    distance = 2*R*np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n\n    return distance \n```", "```py\nlondon = 51.5074, -0.1278 \n```", "```py\nhaversine_distance(boston, london) \n```", "```py\n5265.656325981015 \n```", "```py\nfrom shapely.geometry import Point, LineString \n```", "```py\nlat, lon = boston\np1 = Point(lon, lat) \n```", "```py\nlat, lon = london\np2 = Point(lon, lat) \n```", "```py\nline = LineString([p1, p2]) \n```", "```py\nimport geopandas as gpd\n\npath = gpd.datasets.get_path('naturalearth_lowres')\nworld = gpd.read_file(path)\nworld.plot(color='white', edgecolor='gray'); \n```", "```py\nt = [p1, p2, line]\nseries = gpd.GeoSeries(t) \n```", "```py\n# plot the map\nworld.plot(color='white', edgecolor='gray')\n\n# plot Boston, London, and the line\nseries.plot(); \n```", "```py\nimport matplotlib.pyplot as plt \n```", "```py\nax = plt.gca()\nworld.plot(color='white', edgecolor='gray', ax=ax)\nseries.plot(ax=ax); \n```"]