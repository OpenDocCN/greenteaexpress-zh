["```py\nfrom empiricaldist import Pmf \n```", "```py\ncoin = Pmf()\ncoin['heads'] = 1/2\ncoin['tails'] = 1/2\ncoin \n```", "```py\ndie = Pmf.from_seq([1,2,3,4,5,6])\ndie \n```", "```py\nletters = Pmf.from_seq(list('Mississippi'))\nletters \n```", "```py\nletters['s'] \n```", "```py\n0.36363636363636365 \n```", "```py\ntry:\n    letters['t']\nexcept KeyError as e:\n    print(type(e)) \n```", "```py\n<class 'KeyError'> \n```", "```py\nletters('s') \n```", "```py\n0.36363636363636365 \n```", "```py\nletters('t') \n```", "```py\n0 \n```", "```py\ndie([1,4,7]) \n```", "```py\narray([0.16666667, 0.16666667, 0\\.        ]) \n```", "```py\nprior = Pmf.from_seq(['Bowl 1', 'Bowl 2'])\nprior \n```", "```py\nlikelihood_vanilla = [0.75, 0.5]\nposterior = prior * likelihood_vanilla\nposterior \n```", "```py\nposterior.normalize() \n```", "```py\n0.625 \n```", "```py\nposterior \n```", "```py\nposterior('Bowl 1') \n```", "```py\n0.6 \n```", "```py\nposterior *= likelihood_vanilla\nposterior.normalize()\nposterior \n```", "```py\nlikelihood_chocolate = [0.25, 0.5] \n```", "```py\nposterior *= likelihood_chocolate\nposterior.normalize()\nposterior \n```", "```py\nimport numpy as np\n\nhypos = np.arange(101) \n```", "```py\nprior = Pmf(1, hypos)\nprior.normalize() \n```", "```py\n101 \n```", "```py\nprior.head() \n```", "```py\nlikelihood_vanilla = hypos/100\nlikelihood_vanilla[:5] \n```", "```py\narray([0\\.  , 0.01, 0.02, 0.03, 0.04]) \n```", "```py\nposterior1 = prior * likelihood_vanilla\nposterior1.normalize()\nposterior1.head() \n```", "```py\nfrom utils import decorate\n\ndef decorate_bowls(title):\n    decorate(xlabel='Bowl #',\n             ylabel='PMF',\n             title=title) \n```", "```py\nprior.plot(label='prior', color='C5')\nposterior1.plot(label='posterior', color='C4')\ndecorate_bowls('Posterior after one vanilla cookie') \n```", "```py\nposterior2 = posterior1 * likelihood_vanilla\nposterior2.normalize() \n```", "```py\n0.6699999999999999 \n```", "```py\nposterior2.plot(label='posterior', color='C4')\ndecorate_bowls('Posterior after two vanilla cookies') \n```", "```py\nlikelihood_chocolate = 1 - hypos/100\n\nposterior3 = posterior2 * likelihood_chocolate\nposterior3.normalize() \n```", "```py\n0.2462686567164179 \n```", "```py\nposterior3.plot(label='posterior', color='C4')\ndecorate_bowls('Posterior after 2 vanilla, 1 chocolate') \n```", "```py\nposterior3.idxmax() \n```", "```py\n67 \n```", "```py\nposterior3.max_prob() \n```", "```py\n67 \n```", "```py\nhypos = [6, 8, 12] \n```", "```py\nprior = Pmf(1/3, hypos)\nprior \n```", "```py\nprior.qs \n```", "```py\narray([ 6,  8, 12]) \n```", "```py\nprior.ps \n```", "```py\narray([0.33333333, 0.33333333, 0.33333333]) \n```", "```py\nlikelihood1 = 1/6, 1/8, 1/12 \n```", "```py\nposterior = prior * likelihood1\nposterior.normalize()\nposterior \n```", "```py\nlikelihood2 = 0, 1/8, 1/12 \n```", "```py\nposterior *= likelihood2\nposterior.normalize()\nposterior \n```", "```py\ndef update_dice(pmf, data):\n  \"\"\"Update pmf based on new data.\"\"\"\n    hypos = pmf.qs\n    likelihood = 1 / hypos\n    impossible = (data > hypos)\n    likelihood[impossible] = 0\n    pmf *= likelihood\n    pmf.normalize() \n```", "```py\npmf = prior.copy()\npmf \n```", "```py\nupdate_dice(pmf, 1)\nupdate_dice(pmf, 7)\npmf \n```", "```py\n# Solution\n\npmf = prior.copy()\nfor data in [1, 3, 5, 7]:\n    update_dice(pmf, data)\n\npmf \n```", "```py\n# Solution\n\n# Notice that I don't bother to normalize the prior.\n# The `Pmf` gets normalized during the update, so we\n# don't have to normalize it before.\n\nps = [1,2,3,4,5]\nqs = [4,6,8,12,20]\npmf = Pmf(ps, qs)\nupdate_dice(pmf, 7)\npmf \n```", "```py\n# Solution\n\n# In the BlackWhite drawer, the probability of getting a match is 1/2\n# In the RedGreenBlue drawer, the probability of a match is 1/3\n\nhypos = ['BlackWhite', 'RedGreenBlue']\nprior = Pmf(1/2, hypos)\nlikelihood = 1/2, 1/3\nposterior = prior * likelihood\nposterior.normalize()\nposterior \n```", "```py\n# Solution\n\n# If I drew from the BlackWhite drawer, the probability the\n# socks are white is 1/2\n\nposterior['BlackWhite'] / 2 \n```", "```py\n0.30000000000000004 \n```", "```py\n# Solution\n\n# The trick to this question is to notice that Elvis's twin was a brother.\n# If they were identical twins, it is certain they would be the same sex.\n# If they were fraternal twins, the likelihood is only 50%.\n\n# Here's a solution using a Bayes table\n\nimport pandas as pd\n\ntable = pd.DataFrame(index=['identical', 'fraternal'])\ntable['prior'] = 1/3, 2/3\ntable['likelihood'] = 1, 1/2\n\ntable['unnorm'] = table['prior'] * table['likelihood']\nprob_data = table['unnorm'].sum()\n\ntable['posterior'] = table['unnorm'] / prob_data\ntable \n```", "```py\n# Solution\n\n# Here's a solution using a Pmf\n\nhypos = ['identical', 'fraternal']\nprior = Pmf([1/3, 2/3], hypos)\nprior \n```", "```py\n# Solution\n\nlikelihood = 1, 1/2\nposterior = prior * likelihood\nposterior.normalize()\nposterior \n```"]