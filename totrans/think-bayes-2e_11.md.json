["```py\nfrom scipy.stats import poisson\n\nlam = 1.4\ndist = poisson(lam)\ntype(dist) \n```", "```py\nscipy.stats._distn_infrastructure.rv_frozen \n```", "```py\nk = 4\ndist.pmf(k) \n```", "```py\n0.039471954028253146 \n```", "```py\nfrom empiricaldist import Pmf\n\ndef make_poisson_pmf(lam, qs):\n  \"\"\"Make a Pmf of a Poisson distribution.\"\"\"\n    ps = poisson(lam).pmf(qs)\n    pmf = Pmf(ps, qs)\n    pmf.normalize()\n    return pmf \n```", "```py\nimport numpy as np\n\nlam = 1.4\ngoals = np.arange(10)\npmf_goals = make_poisson_pmf(lam, goals) \n```", "```py\nfrom utils import decorate\n\ndef decorate_goals(title=''):\n    decorate(xlabel='Number of goals',\n        ylabel='PMF',\n        title=title) \n```", "```py\npmf_goals.bar(label=r'Poisson distribution with $\\lambda=1.4/details>)\n\ndecorate_goals('Distribution of goals scored') \n```", "```py\nfrom scipy.stats import gamma\n\nalpha = 1.4\nqs = np.linspace(0, 10, 101)\nps = gamma(alpha).pdf(qs) \n```", "```py\nfrom empiricaldist import Pmf\n\nprior = Pmf(ps, qs)\nprior.normalize() \n```", "```py\ndef decorate_rate(title=''):\n    decorate(xlabel='Goal scoring rate (lam)',\n        ylabel='PMF',\n        title=title) \n```", "```py\nprior.plot(ls='--', label='prior', color='C5')\ndecorate_rate(r'Prior distribution of $\\lambda/details>) \n```", "```py\nprior.mean() \n```", "```py\n1.4140818156118378 \n```", "```py\nlam = 1.4\nk = 4\npoisson(lam).pmf(4) \n```", "```py\n0.039471954028253146 \n```", "```py\nlams = prior.qs\nk = 4\nlikelihood = poisson(lams).pmf(k) \n```", "```py\ndef update_poisson(pmf, data):\n  \"\"\"Update Pmf with a Poisson likelihood.\"\"\"\n    k = data\n    lams = pmf.qs\n    likelihood = poisson(lams).pmf(k)\n    pmf *= likelihood\n    pmf.normalize() \n```", "```py\nfrance = prior.copy()\nupdate_poisson(france, 4) \n```", "```py\nprior.plot(ls='--', label='prior', color='C5')\nfrance.plot(label='France posterior', color='C3')\n\ndecorate_rate('Posterior distribution for France') \n```", "```py\ncroatia = prior.copy()\nupdate_poisson(croatia, 2) \n```", "```py\nprior.plot(ls='--', label='prior', color='C5')\ncroatia.plot(label='Croatia posterior', color='C0')\n\ndecorate_rate('Posterior distribution for Croatia') \n```", "```py\nprint(croatia.mean(), france.mean()) \n```", "```py\n1.6999765866755225 2.699772393342308 \n```", "```py\ndef prob_gt(pmf1, pmf2):\n  \"\"\"Compute the probability of superiority.\"\"\"\n    total = 0\n    for q1, p1 in pmf1.items():\n        for q2, p2 in pmf2.items():\n            if q1 > q2:\n                total += p1 * p2\n    return total \n```", "```py\nprob_gt(france, croatia) \n```", "```py\n0.7499366290930155 \n```", "```py\nPmf.prob_gt(france, croatia) \n```", "```py\n0.7499366290930174 \n```", "```py\npmf_seq = [make_poisson_pmf(lam, goals) \n           for lam in prior.qs] \n```", "```py\nimport matplotlib.pyplot as plt\n\nfor i, index in enumerate([10, 20, 30, 40]):\n    plt.subplot(2, 2, i+1)\n    lam = prior.qs[index]\n    pmf = pmf_seq[index]\n    pmf.bar(label=f'$\\lambda$ = {lam}', color='C3')\n    decorate_goals() \n```", "```py\nfrom utils import make_mixture\n\npred_france = make_mixture(france, pmf_seq) \n```", "```py\npred_france.bar(color='C3', label='France')\ndecorate_goals('Posterior predictive distribution') \n```", "```py\npred_croatia = make_mixture(croatia, pmf_seq) \n```", "```py\npred_croatia.bar(color='C0', label='Croatia')\ndecorate_goals('Posterior predictive distribution') \n```", "```py\nwin = Pmf.prob_gt(pred_france, pred_croatia)\nwin \n```", "```py\n0.5703522415934519 \n```", "```py\nlose = Pmf.prob_lt(pred_france, pred_croatia)\nlose \n```", "```py\n0.26443376257235873 \n```", "```py\ntie = Pmf.prob_eq(pred_france, pred_croatia)\ntie \n```", "```py\n0.16521399583418947 \n```", "```py\nwin + tie/2 \n```", "```py\n0.6529592395105466 \n```", "```py\ndef expo_pdf(t, lam):\n  \"\"\"Compute the PDF of the exponential distribution.\"\"\"\n    return lam * np.exp(-lam * t) \n```", "```py\nlam = 1.4\nqs = np.linspace(0, 4, 101)\nps = expo_pdf(qs, lam)\npmf_time = Pmf(ps, qs)\npmf_time.normalize() \n```", "```py\n25.616650745459093 \n```", "```py\ndef decorate_time(title=''):\n    decorate(xlabel='Time between goals (games)',\n             ylabel='PMF',\n             title=title) \n```", "```py\npmf_time.plot(label='exponential with $\\lambda$ = 1.4')\n\ndecorate_time('Distribution of time between goals') \n```", "```py\n# Solution\n\n# Here's a function that updates the distribution of lam\n# with the given time between goals\n\ndef update_expo(pmf, data):\n  \"\"\"Update based on an observed interval\n\n pmf: prior PMF\n data: time between goals in minutes\n \"\"\"\n    t = data / 90\n    lams = pmf.qs\n    likelihood = expo_pdf(t, lams)\n    pmf *= likelihood\n    pmf.normalize() \n```", "```py\n# Solution\n\n# Here are the updates for the first and second goals\n\ngermany = prior.copy()\nupdate_expo(germany, 11)\n\ngermany2 = germany.copy()\nupdate_expo(germany2, 12) \n```", "```py\n# Solution\n\n# Here are the mean values of `lam` after each update\n\ngermany.mean(), germany2.mean() \n```", "```py\n(2.1358882653086892, 2.703059034926364) \n```", "```py\n# Solution\n\n# Here's what the posterior distributions look like\n\nprior.plot(ls='--', label='prior', color='C5')\ngermany.plot(color='C3', label='Posterior after 1 goal')\ngermany2.plot(color='C16', label='Posterior after 2 goals')\n\ndecorate_rate('Prior and posterior distributions') \n```", "```py\n# Solution\n\n# Here's the predictive distribution for each possible value of `lam`\n\nt = (90-23) / 90\n\npmf_seq = [make_poisson_pmf(lam*t, goals) \n           for lam in germany2.qs] \n```", "```py\n# Solution\n\n# And here's the mixture of predictive distributions,\n# weighted by the probabilities in the posterior distribution.\n\npred_germany2 = make_mixture(germany2, pmf_seq) \n```", "```py\n# Solution\n\n# Here's what the predictive distribution looks like\n\npred_germany2.bar(color='C1', label='germany')\ndecorate_goals('Posterior predictive distribution') \n```", "```py\n# Solution\n\n# Here's the probability of scoring exactly 5 more goals\n\npred_germany2[5] \n```", "```py\n0.047109658706113416 \n```", "```py\n# Solution\n\n# And the probability of 5 or more\n\npred_germany2.prob_ge(5) \n```", "```py\n0.09286200122834538 \n```", "```py\ndef make_expo_pmf(lam, high):\n  \"\"\"Make a PMF of an exponential distribution.\n\n lam: event rate\n high: upper bound on the interval `t`\n\n returns: Pmf of the interval between events\n \"\"\"\n    qs = np.linspace(0, high, 101)\n    ps = expo_pdf(qs, lam)\n    pmf = Pmf(ps, qs)\n    pmf.normalize()\n    return pmf \n```", "```py\n# Solution\n\n# Here are the predictive distributions for the \n# time until the first goal\n\npmf_seq = [make_expo_pmf(lam, high=4) for lam in prior.qs] \n```", "```py\n# Solution\n\n# And here are the mixtures based on the two posterior distributions\n\npred_france = make_mixture(france, pmf_seq)\npred_croatia = make_mixture(croatia, pmf_seq) \n```", "```py\n# Solution\n\n# Here's what the posterior predictive distributions look like\n\npred_france.plot(label='France', color='C3')\npred_croatia.plot(label='Croatia', color='C0')\n\ndecorate_time('Posterior predictive distribution') \n```", "```py\n# Solution\n\n# And here's the probability France scores first\n\nPmf.prob_lt(pred_france, pred_croatia) \n```", "```py\n0.5904596116867543 \n```", "```py\n# Solution\n\n# When a team is winning or losing by an insurmountable margin,\n# they might remove their best players from the game, which\n# would affect their goal-scoring rate, violating the assumption\n# that the goal scoring rate is constant.\n\n# In this example, Boston won the third game 8-1, but scoring\n# eight goals in a game might not reflect their true long-term\n# goal-scoring rate.\n\n# As a result, the analysis below might overestimate the chance\n# that Boston wins.\n\n# As it turned out, they did not. \n```", "```py\n# Solution\n\nfrom scipy.stats import gamma\n\nalpha = 2.8\nqs = np.linspace(0, 15, 101)\nps = gamma.pdf(qs, alpha)\nprior_hockey = Pmf(ps, qs)\nprior_hockey.normalize() \n```", "```py\n6.666325137469514 \n```", "```py\n# Solution\n\nprior_hockey.plot(ls='--', color='C5')\ndecorate_rate('Prior distribution for hockey')\nprior_hockey.mean() \n```", "```py\n2.7997400090376567 \n```", "```py\n# Solution\n\nbruins = prior_hockey.copy()\nfor data in [0, 2, 8, 4]:\n    update_poisson(bruins, data)\n\nbruins.mean() \n```", "```py\n3.3599999999999985 \n```", "```py\n# Solution\n\ncanucks = prior_hockey.copy()\nfor data in [1, 3, 1, 0]:\n    update_poisson(canucks, data)\n\ncanucks.mean() \n```", "```py\n1.5599999606443666 \n```", "```py\n# Solution\n\ncanucks.plot(label='Canucks')\nbruins.plot(label='Bruins')\n\ndecorate_rate('Posterior distributions') \n```", "```py\n# Solution\n\ngoals = np.arange(15)\npmf_seq = [make_poisson_pmf(lam, goals) for lam in bruins.qs] \n```", "```py\n# Solution\n\npred_bruins = make_mixture(bruins, pmf_seq)\n\npred_bruins.bar(label='Bruins', color='C1')\ndecorate_goals('Posterior predictive distribution') \n```", "```py\n# Solution\n\npred_canucks = make_mixture(canucks, pmf_seq)\n\npred_canucks.bar(label='Canucks')\ndecorate_goals('Posterior predictive distribution') \n```", "```py\n# Solution\n\nwin = Pmf.prob_gt(pred_bruins, pred_canucks)\nlose = Pmf.prob_lt(pred_bruins, pred_canucks)\ntie = Pmf.prob_eq(pred_bruins, pred_canucks)\n\nwin, lose, tie \n```", "```py\n(0.7038631514645926, 0.16111690750716465, 0.1350199410282429) \n```", "```py\n# Solution\n\n# Assuming the Bruins win half of the ties,\n# their chance of winning the next game is...\n\np = win + tie/2\np \n```", "```py\n0.771373121978714 \n```", "```py\n# Solution\n\n# Their chance of winning the series is their\n# chance of winning k=2 or k=3 of the remaining\n# n=3 games.\n\nfrom scipy.stats import binom\n\nn = 3\na = binom.pmf([2,3], n, p)\na.sum() \n```", "```py\n0.8670900197850085 \n```"]