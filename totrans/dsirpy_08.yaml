- en: Recursion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/DSIRP/recursion.html](https://allendowney.github.io/DSIRP/recursion.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Click here to run this chapter on Colab](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/recursion.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s an example of recursion from [this section of Think Python](https://greenteapress.com/thinkpython2/html/thinkpython2006.html#sec62).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand recursion, it’s important to have a good mental model of what
    happens when you run a function:'
  prefs: []
  type: TYPE_NORMAL
- en: Python interprets the arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It creates a stack frame, which will contain the parameters and local variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next it assigns the values of the arguments to the parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python runs the body of the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then it recycles the stack frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The runtime stack contains the stack frames of currently-running functions.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a stack diagram that shows what happens when this `countdown` runs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6390e44f830253a162632e35b3ae5d5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Exercise:** What happens if you run countdown with a negative number? See
    here for more info'
  prefs: []
  type: TYPE_NORMAL
- en: Example 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s an example of recursion with a function that returns a value, from [this
    section of Think Python](https://greenteapress.com/thinkpython2/html/thinkpython2007.html#sec74).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here’s the stack frame.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e57ce9bc16c0794848b760489997bc0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Exercise:** Suppose you want to raise a number, `x`, to an integer power,
    `k`. An efficient way to do that is:'
  prefs: []
  type: TYPE_NORMAL
- en: If `k` is even, raise `x` to `k/2` and square it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `k` is odd, raise `x` to `(k-1)/2`, square it, and multiply by `x` one more
    time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a recursive function that implements this algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: What is the order of growth of this algorithm? To keep it simple, suppose `k`
    is a power of two. How many times do we have to divide `k` by two before we get
    to 1?
  prefs: []
  type: TYPE_NORMAL
- en: Thinking about it in reverse, starting with 1, how many times do we have to
    double 1 before we get to `k`? In math notation, the question is
  prefs: []
  type: TYPE_NORMAL
- en: \[2^y = k\]
  prefs: []
  type: TYPE_NORMAL
- en: 'where `y` is the unknown number of steps. Taking the log of both sides, base
    2:'
  prefs: []
  type: TYPE_NORMAL
- en: \[y = log_2 k\]
  prefs: []
  type: TYPE_NORMAL
- en: In terms of order of growth, this algorithm is in `O(log k)`. We don’t have
    to specify the base of the logarithm, because a log in one base is a constant
    multiple of a log in any other base.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s another example of recursion from [this section of Think Python](https://greenteapress.com/thinkpython2/html/thinkpython2007.html#sec76).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here’s a stack graph that shows all stack frames created during this function
    call.
  prefs: []
  type: TYPE_NORMAL
- en: Note that these frames are not all on the stack at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c6eef848ea17a2f2465eb079fa76755.png)'
  prefs: []
  type: TYPE_IMG
- en: Here’s the [section from Think Python](https://greenteapress.com/thinkpython2/html/thinkpython2012.html#sec135)
    that shows how we can make fibonacci faster by “memoizing” it. That’s not a typo;
    the word is really [memoize](https://en.wikipedia.org/wiki/Memoization).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Exercise:** The [Ackermann function](http://en.wikipedia.org/wiki/Ackermann_function),
    \(A(m, n)\), is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split} A(m, n) = \begin{cases} n+1 & \mbox{if } m = 0 \\ A(m-1, 1)
    & \mbox{if } m > 0 \mbox{ and } n = 0 \\ A(m-1, A(m, n-1)) & \mbox{if } m > 0
    \mbox{ and } n > 0. \end{cases} \end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Write a function named `ackermann` that evaluates the Ackermann function. Use
    your function to evaluate `ackermann(3, 4)`, which should be 125.
  prefs: []
  type: TYPE_NORMAL
- en: What happens for larger values of `m` and `n`?
  prefs: []
  type: TYPE_NORMAL
- en: If you memoize it, can you evaluate the function with bigger values?
  prefs: []
  type: TYPE_NORMAL
- en: String functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many things we do iteratively can be expressed recursively as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For sequences and mapping types, there’s usually no advantage of the recursive
    version. But for trees and graphs, a recursive implementation can be clearer,
    more concise, and more demonstrably correct.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** Here’s an exercise from, of all places, [StackOverflow](https://stackoverflow.com/questions/28977737/writing-a-recursive-string-function):'
  prefs: []
  type: TYPE_NORMAL
- en: Write a recursive, string-valued function, `replace`, that accepts a string
    and returns a new string consisting of the original string with each blank replaced
    with an asterisk (*)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Replacing the blanks in a string involves:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nothing if the string is empty
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Otherwise: If the first character is not a blank, simply concatenate it with
    the result of replacing the rest of the string'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If the first character IS a blank, concatenate an * with the result of replacing
    the rest of the string
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This one is from [Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sites/default/files/sicp/index.html):'
  prefs: []
  type: TYPE_NORMAL
- en: The greatest common divisor (GCD) of two integers `a` and `b` is defined to
    be the largest integer that divides both `a` and `b` with no remainder. For example,
    the GCD of 16 and 28 is 4\. […] One way to find the GCD of two integers is to
    factor them and search for common factors, but there is a [famous algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)
    that is much more efficient.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The idea of the algorithm is based on the observation that, if `r` is the remainder
    when `a` is divided by `b`, then the common divisors of `a` and `b` are precisely
    the same as the common divisors of `b` and `r`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thus, we can use the equation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: \[GCD(a, b) = GCD(b, r)\]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to successively reduce the problem of computing a GCD to the problem of computing
    the GCD of smaller and smaller pairs of integers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is possible to show that starting with any two positive integers and performing
    repeated reductions will always eventually produce a pair where the second number
    is 0\. Then the GCD is the other number in the pair.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a function called `gcd` that takes two integers and uses this algorithm
    to compute their greatest common divisor.
  prefs: []
  type: TYPE_NORMAL
- en: 'This one is from [Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sites/default/files/sicp/index.html):'
  prefs: []
  type: TYPE_NORMAL
- en: How many different ways can we make change of $1.00, given half-dollars, quarters,
    dimes, nickels, and pennies? […]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[…] Suppose we think of the types of coins available as arranged in some order.
    [..] observe that the ways to make change can be divided into two groups: those
    that do not use any of the first kind of coin, and those that do. Therefore, the
    total number of ways to make change for some amount is equal to the number of
    ways to make change for the amount without using any of the first kind of coin,
    plus the number of ways to make change assuming that we do use the first kind
    of coin.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a function that takes as parameters an amount of money in cents and a
    sequence of coin denominations. It should return the number of combinations of
    coins that add up to the given amount.
  prefs: []
  type: TYPE_NORMAL
- en: The result for one dollar (`100` cents) with coins of denominations `(50, 25,
    10, 5, 1)` should be `292`.
  prefs: []
  type: TYPE_NORMAL
- en: You might have to give some thought to the base cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** Here’s one of my favorite Car Talk Puzzlers ([http://www.cartalk.com/content/puzzlers](http://www.cartalk.com/content/puzzlers)):'
  prefs: []
  type: TYPE_NORMAL
- en: What is the longest English word, that remains a valid English word, as you
    remove its letters one at a time?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, letters can be removed from either end, or the middle, but you can’t rearrange
    any of the letters. Every time you drop a letter, you wind up with another English
    word. If you do that, you’re eventually going to wind up with one letter and that
    too is going to be an English word—one that’s found in the dictionary. I want
    to know what’s the longest word and how many letters does it have?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'I’m going to give you a little modest example: Sprite. Ok? You start off with
    sprite, you take a letter off, one from the interior of the word, take the r away,
    and we’re left with the word spite, then we take the e off the end, we’re left
    with spit, we take the s off, we’re left with pit, it, and I.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program to find all words that can be reduced in this way, and then
    find the longest one.
  prefs: []
  type: TYPE_NORMAL
- en: 'This exercise is a little more challenging than most, so here are some suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: You might want to write a function that takes a word and computes a list of
    all the words that can be formed by removing one letter. These are the “children”
    of the word.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recursively, a word is reducible if any of its children are reducible. As base
    cases, you can consider the single letter words “I”, “a” to be reducible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To improve the performance of your program, you might want to memoize the words
    that are known to be reducible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '*Data Structures and Information Retrieval in Python*'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright 2021 Allen Downey
  prefs: []
  type: TYPE_NORMAL
- en: 'License: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  prefs: []
  type: TYPE_NORMAL
