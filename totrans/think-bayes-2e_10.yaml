- en: Minimum, Maximum, and Mixture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ThinkBayes2/chap07.html](https://allendowney.github.io/ThinkBayes2/chap07.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter we computed distributions of sums. In this chapter,
    we’ll compute distributions of minimums and maximums, and use them to solve both
    forward and inverse problems.
  prefs: []
  type: TYPE_NORMAL
- en: Then we’ll look at distributions that are mixtures of other distributions, which
    will turn out to be particularly useful for making predictions.
  prefs: []
  type: TYPE_NORMAL
- en: But we’ll start with a powerful tool for working with distributions, the cumulative
    distribution function.
  prefs: []
  type: TYPE_NORMAL
- en: Cumulative Distribution Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we have been using probability mass functions to represent distributions.
    A useful alternative is the **cumulative distribution function**, or CDF.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, I’ll use the posterior distribution from the Euro problem, which
    we computed in <<_BayesianEstimation>>.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the uniform prior we started with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And here’s the update.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The CDF is the cumulative sum of the PMF, so we can compute it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what it looks like, along with the PMF.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell source Hide code cell source</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]</details> ![_images/5c45a9af712ec2288ce03ce1aa193619f0c49f4ea04ea44c86a7be39fa4344bf.png](../Images/8858c7133f1f61a9e62a4454609a6f7c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The range of the CDF is always from 0 to 1, in contrast with the PMF, where
    the maximum can be any probability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result from `cumsum` is a Pandas `Series`, so we can use the bracket operator
    to select an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The result is about 0.96, which means that the total probability of all quantities
    less than or equal to 0.61 is 96%.
  prefs: []
  type: TYPE_NORMAL
- en: 'To go the other way — to look up a probability and get the corresponding quantile
    — we can use interpolation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The result is about 0.61, so that confirms that the 96th percentile of this
    distribution is 0.61.
  prefs: []
  type: TYPE_NORMAL
- en: '`empiricaldist` provides a class called `Cdf` that represents a cumulative
    distribution function. Given a `Pmf`, you can compute a `Cdf` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`make_cdf` uses `np.cumsum` to compute the cumulative sum of the probabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use brackets to select an element from a `Cdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: But if you look up a quantity that’s not in the distribution, you get a `KeyError`.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, you can call a `Cdf` as a function, using parentheses.
    If the argument does not appear in the `Cdf`, it interpolates between quantities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Going the other way, you can use `quantile` to look up a cumulative probability
    and get the corresponding quantity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`Cdf` also provides `credible_interval`, which computes a credible interval
    that contains the given probability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'CDFs and PMFs are equivalent in the sense that they contain the same information
    about the distribution, and you can always convert from one to the other. Given
    a `Cdf`, you can get the equivalent `Pmf` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`make_pmf` uses `np.diff` to compute differences between consecutive cumulative
    probabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: One reason `Cdf` objects are useful is that they compute quantiles efficiently.
    Another is that they make it easy to compute the distribution of a maximum or
    minimum, as we’ll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Best Three of Four
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *Dungeons & Dragons*, each character has six attributes: strength, intelligence,
    wisdom, dexterity, constitution, and charisma.'
  prefs: []
  type: TYPE_NORMAL
- en: To generate a new character, players roll four 6-sided dice for each attribute
    and add up the best three. For example, if I roll for strength and get 1, 2, 3,
    4 on the dice, my character’s strength would be the sum of 2, 3, and 4, which
    is 9.
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, let’s figure out the distribution of these attributes. Then,
    for each character, we’ll figure out the distribution of their best attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll import two functions from the previous chapter: `make_die`, which makes
    a `Pmf` that represents the outcome of rolling a die, and `add_dist_seq`, which
    takes a sequence of `Pmf` objects and computes the distribution of their sum.'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a `Pmf` that represents a six-sided die and a sequence with three references
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And here’s the distribution of the sum of three dice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell source Hide code cell source</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]</details> ![_images/b1f86dac2103398c34f875294d89187fb8c4a3b6a4264c52388783f7e9a22047.png](../Images/7e37d8a631470c69005f16fbdaa90579.png)'
  prefs: []
  type: TYPE_NORMAL
- en: If we roll four dice and add up the best three, computing the distribution of
    the sum is a bit more complicated. I’ll estimate the distribution by simulating
    10,000 rolls.
  prefs: []
  type: TYPE_NORMAL
- en: 'First I’ll create an array of random values from 1 to 6, with 10,000 rows and
    4 columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: To find the best three outcomes in each row, I’ll use `sort` with `axis=1`,
    which sorts the rows in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Finally, I’ll select the last three columns and add them up.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now `t` is an array with a single column and 10,000 rows. We can compute the
    PMF of the values in `t` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The following figure shows the distribution of the sum of three dice, `pmf_3d6`,
    and the distribution of the best three out of four, `pmf_best3`.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]</details> ![_images/c81d2ebe685be4da1dee4a97864b19e76444c6511d3b1bd703324cdefcd580de.png](../Images/757d927cf7aecda1b1605aaa103c598c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: As you might expect, choosing the best three out of four tends to yield higher
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Next we’ll find the distribution for the maximum of six attributes, each the
    sum of the best three of four dice.
  prefs: []
  type: TYPE_NORMAL
- en: Maximum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To compute the distribution of a maximum or minimum, we can make good use of
    the cumulative distribution function. First, I’ll compute the `Cdf` of the best
    three of four distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Recall that `Cdf(x)` is the sum of probabilities for quantities less than or
    equal to `x`. Equivalently, it is the probability that a random value chosen from
    the distribution is less than or equal to `x`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now suppose I draw 6 values from this distribution. The probability that all
    6 of them are less than or equal to `x` is `Cdf(x)` raised to the 6th power, which
    we can compute like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: <details class="hide below-input"><summary aria-label="Toggle hidden content">Show
    code cell output Hide code cell output</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: 'If all 6 values are less than or equal to `x`, that means that their maximum
    is less than or equal to `x`. So the result is the CDF of their maximum. We can
    convert it to a `Cdf` object, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'And compute the equivalent `Pmf` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows the result.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/b6f154ac59d6ddc728ef1c9bc3fe3dfb59a7fbdf969b5313f9b9b2b18bec2104.png](../Images/0e666254a129209f2f44a89e57af99d2.png)</details>'
  prefs: []
  type: TYPE_NORMAL
- en: Most characters have at least one attribute greater than 12; almost 10% of them
    have an 18.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows the CDFs for the three distributions we have computed.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]</details> ![_images/13e587f63e6680fb43f73d51162d1c4f7e58eac8c77031130d8f60990cd4cf3d.png](../Images/6c93507d6b4921fe9d32c905372dd581.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Cdf` provides `max_dist`, which does the same computation, so we can also
    compute the `Cdf` of the maximum like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: In the next section we’ll find the distribution of the minimum. The process
    is similar, but a little more complicated. See if you can figure it out before
    you go on.
  prefs: []
  type: TYPE_NORMAL
- en: Minimum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section we computed the distribution of a character’s best attribute.
    Now let’s compute the distribution of the worst.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compute the distribution of the minimum, we’ll use the **complementary CDF**,
    which we can compute like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'As the variable name suggests, the complementary CDF is the probability that
    a value from the distribution is greater than `x`. If we draw 6 values from the
    distribution, the probability that all 6 exceed `x` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'If all 6 exceed `x`, that means their minimum exceeds `x`, so `prob_gt6` is
    the complementary CDF of the minimum. And that means we can compute the CDF of
    the minimum like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is a Pandas `Series` that represents the CDF of the minimum of six
    attributes. We can put those values in a `Cdf` object like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what it looks like, along with the distribution of the maximum.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]</details> ![_images/14d14772b16b978755119cdf3244a50fcd4ecc0f3b27d903f70eed78bc9724ed.png](../Images/acdca4e46dc16ef0ddd137186b392dd3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Cdf` provides `min_dist`, which does the same computation, so we can also
    compute the `Cdf` of the minimum like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: And we can confirm that the differences are small.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In the exercises at the end of this chapter, you’ll use distributions of the
    minimum and maximum to do Bayesian inference. But first we’ll see what happens
    when we mix distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Mixture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section I’ll show how we can compute a distribution which is a mixture
    of other distributions. I’ll explain what that means with some simple examples;
    then, more usefully, we’ll see how these mixtures are used to make predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s another example inspired by *Dungeons & Dragons*:'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose your character is armed with a dagger in one hand and a short sword
    in the other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During each round, you attack a monster with one of your two weapons, chosen
    at random.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dagger causes one 4-sided die of damage; the short sword causes one 6-sided
    die of damage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the distribution of damage you inflict in each round?
  prefs: []
  type: TYPE_NORMAL
- en: 'To answer this question, I’ll make a `Pmf` to represent the 4-sided and 6-sided
    dice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s compute the probability you inflict 1 point of damage.
  prefs: []
  type: TYPE_NORMAL
- en: If you attacked with the dagger, it’s 1/4.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you attacked with the short sword, it’s 1/6.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Because the probability of choosing either weapon is 1/2, the total probability
    is the average:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: For the outcomes 2, 3, and 4, the probability is the same, but for 5 and 6 it’s
    different, because those outcomes are impossible with the 4-sided die.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: To compute the distribution of the mixture, we could loop through the possible
    outcomes and compute their probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'But we can do the same computation using the `+` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what the mixture of these distributions looks like.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]</details> ![_images/8b9a1606de2696f9eb941323b7a4be46212549d4fdb795c058aaec06b86cbd3f.png](../Images/40dffb285e73a6b0eff9077d69b38935.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now suppose you are fighting three monsters:'
  prefs: []
  type: TYPE_NORMAL
- en: One has a club, which causes one 4-sided die of damage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One has a mace, which causes one 6-sided die.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And one has a quarterstaff, which also causes one 6-sided die.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Because the melee is disorganized, you are attacked by one of these monsters
    each round, chosen at random. To find the distribution of the damage they inflict,
    we can compute a weighted average of the distributions, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This distribution is a mixture of one 4-sided die and two 6-sided dice. Here’s
    what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]</details> ![_images/f60dbbf72b2cde8995df0cfb2c309eecf89fcb9825a5732787fa643e88135f47.png](../Images/fb9aedc2a225a006fe335ec5227f1d09.png)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section we used the `+` operator, which adds the probabilities in the
    distributions, not to be confused with `Pmf.add_dist`, which computes the distribution
    of the sum of the distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the difference, I’ll use `Pmf.add_dist` to compute the distribution
    of the total damage done per round, which is the sum of the two mixtures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: And here’s what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/6cceb610ad3888a89dfb4a009a3ba37adb57e3f14e404a9ae1d00ef8d6792131.png](../Images/36ea8b551bbb3ffb6e6d20dde00e88bc.png)'
  prefs: []
  type: TYPE_IMG
- en: General Mixtures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section we computed mixtures in an *ad hoc* way. Now we’ll see
    a more general solution. In future chapters, we’ll use this solution to generate
    predictions for real-world problems, not just role-playing games. But if you’ll
    bear with me, we’ll continue the previous example for one more section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose three more monsters join the combat, each of them with a battle axe
    that causes one 8-sided die of damage. Still, only one monster attacks per round,
    chosen at random, so the damage they inflict is a mixture of:'
  prefs: []
  type: TYPE_NORMAL
- en: One 4-sided die,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two 6-sided dice, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three 8-sided dice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I’ll use a `Pmf` to represent a randomly chosen monster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 0.166667 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 0.333333 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 0.500000 |'
  prefs: []
  type: TYPE_TB
- en: This distribution represents the number of sides on the die we’ll roll and the
    probability of rolling each one. For example, one of the six monsters has a dagger,
    so the probability is \(1/6\) that we roll a 4-sided die.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next I’ll make a sequence of `Pmf` objects to represent the dice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: To compute the distribution of the mixture, I’ll compute the weighted average
    of the dice, using the probabilities in `pmf_dice` as the weights.
  prefs: []
  type: TYPE_NORMAL
- en: 'To express this computation concisely, it is convenient to put the distributions
    into a Pandas `DataFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '|  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0.250000 | 0.250000 | 0.250000 | 0.250000 | NaN | NaN | NaN | NaN |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0.166667 | 0.166667 | 0.166667 | 0.166667 | 0.166667 | 0.166667 | NaN
    | NaN |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.125000 | 0.125000 | 0.125000 | 0.125000 | 0.125000 | 0.125000 | 0.125
    | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: The result is a `DataFrame` with one row for each distribution and one column
    for each possible outcome. Not all rows are the same length, so Pandas fills the
    extra spaces with the special value `NaN`, which stands for “not a number”. We
    can use `fillna` to replace the `NaN` values with 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to multiply each row by the probabilities in `pmf_dice`, which
    turns out to be easier if we transpose the matrix so the distributions run down
    the columns rather than across the rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '|  | 0 | 1 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0.25 | 0.166667 | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.25 | 0.166667 | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 0.25 | 0.166667 | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 0.25 | 0.166667 | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 0.00 | 0.166667 | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 0.00 | 0.166667 | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 0.00 | 0.000000 | 0.125 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 0.00 | 0.000000 | 0.125 |</details>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can multiply by the probabilities in `pmf_dice`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '|  | 0 | 1 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0.041667 | 0.055556 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.041667 | 0.055556 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 0.041667 | 0.055556 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 0.041667 | 0.055556 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 0.000000 | 0.055556 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 0.000000 | 0.055556 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 0.000000 | 0.000000 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 0.000000 | 0.000000 | 0.0625 |'
  prefs: []
  type: TYPE_TB
- en: 'And add up the weighted distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: <details class="hide below-input"><summary aria-label="Toggle hidden content">Show
    code cell output Hide code cell output</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: The argument `axis=1` means we want to sum across the rows. The result is a
    Pandas `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together, here’s a function that makes a weighted mixture of
    distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter is a `Pmf` that maps from each hypothesis to a probability.
    The second parameter is a sequence of `Pmf` objects, one for each hypothesis.
    We can call it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: And here’s what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]</details> ![_images/d1fd9f0edbd24a8c55e791574bac33f0b435f9d025cd1150a1bd483616ed0728.png](../Images/0bba9ae4868d2cfd8f0f1244e4c0a7d0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section I used Pandas so that `make_mixture` is concise, efficient,
    and hopefully not too hard to understand. In the exercises at the end of the chapter,
    you’ll have a chance to practice with mixtures, and we will use `make_mixture`
    again in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter introduces the `Cdf` object, which represents the cumulative distribution
    function (CDF).
  prefs: []
  type: TYPE_NORMAL
- en: A `Pmf` and the corresponding `Cdf` are equivalent in the sense that they contain
    the same information, so you can convert from one to the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary difference between them is performance: some operations are faster
    and easier with a `Pmf`; others are faster with a `Cdf`.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we used `Cdf` objects to compute distributions of maximums and
    minimums; these distributions are useful for inference if we are given a maximum
    or minimum as data. You will see some examples in the exercises, and in future
    chapters. We also computed mixtures of distributions, which we will use in the
    next chapter to make predictions.
  prefs: []
  type: TYPE_NORMAL
- en: But first you might want to work on these exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Exercise:** When you generate a D&D character, instead of rolling dice, you
    can use the “standard array” of attributes, which is 15, 14, 13, 12, 10, and 8.
    Do you think you are better off using the standard array or (literally) rolling
    the dice?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare the distribution of the values in the standard array to the distribution
    we computed for the best three out of four:'
  prefs: []
  type: TYPE_NORMAL
- en: Which distribution has higher mean? Use the `mean` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which distribution has higher standard deviation? Use the `std` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lowest value in the standard array is 8\. For each attribute, what is the
    probability of getting a value less than 8? If you roll the dice six times, what’s
    the probability that at least one of your attributes is less than 8?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The highest value in the standard array is 15\. For each attribute, what is
    the probability of getting a value greater than 15? If you roll the dice six times,
    what’s the probability that at least one of your attributes is greater than 15?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get you started, here’s a `Cdf` that represents the distribution of attributes
    in the standard array:'
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: We can compare it to the distribution of attributes you get by rolling four
    dice at adding up the best three.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/3b22f1492c17d517017af56424e1abf8d3eaa73a10290cac1682da19a5d0ef68.png](../Images/0413adb1051fcca69801202f0f55674d.png)</details>'
  prefs: []
  type: TYPE_NORMAL
- en: I plotted `cdf_standard` as a step function to show more clearly that it contains
    only a few quantities.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** Suppose you are fighting three monsters:'
  prefs: []
  type: TYPE_NORMAL
- en: One is armed with a short sword that causes one 6-sided die of damage,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One is armed with a battle axe that causes one 8-sided die of damage, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One is armed with a bastard sword that causes one 10-sided die of damage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the monsters, chosen at random, attacks you and does 1 point of damage.
  prefs: []
  type: TYPE_NORMAL
- en: Which monster do you think it was? Compute the posterior probability that each
    monster was the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: If the same monster attacks you again, what is the probability that you suffer
    6 points of damage?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Compute a posterior distribution as we have done before and pass it as
    one of the arguments to `make_mixture`.'
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '|  | probs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 0.425532 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 0.319149 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | 0.255319 |</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/3231b49676e5e552b7acffd5e5afd5d9c65961bec5ee73f35ab02ea8cbc004e6.png](../Images/bc26d662574ca89e65b2ecd142584a7a.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** Henri Poincaré was a French mathematician who taught at the Sorbonne
    around 1900\. The following anecdote about him is probably fiction, but it makes
    an interesting probability problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Supposedly Poincaré suspected that his local bakery was selling loaves of bread
    that were lighter than the advertised weight of 1 kg, so every day for a year
    he bought a loaf of bread, brought it home and weighed it. At the end of the year,
    he plotted the distribution of his measurements and showed that it fit a normal
    distribution with mean 950 g and standard deviation 50 g. He brought this evidence
    to the bread police, who gave the baker a warning.
  prefs: []
  type: TYPE_NORMAL
- en: For the next year, Poincaré continued to weigh his bread every day. At the end
    of the year, he found that the average weight was 1000 g, just as it should be,
    but again he complained to the bread police, and this time they fined the baker.
  prefs: []
  type: TYPE_NORMAL
- en: Why? Because the shape of the new distribution was asymmetric. Unlike the normal
    distribution, it was skewed to the right, which is consistent with the hypothesis
    that the baker was still making 950 g loaves, but deliberately giving Poincaré
    the heavier ones.
  prefs: []
  type: TYPE_NORMAL
- en: To see whether this anecdote is plausible, let’s suppose that when the baker
    sees Poincaré coming, he hefts `n` loaves of bread and gives Poincaré the heaviest
    one. How many loaves would the baker have to heft to make the average of the maximum
    1000 g?
  prefs: []
  type: TYPE_NORMAL
- en: To get you started, I’ll generate a year’s worth of data from a normal distribution
    with the given parameters.
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/57c85f62be8c20d60381e7e6da0fa30582fd9c72ffe89769e158ad5a12426644.png](../Images/aee57c7ae72c68509f6035814eced875.png)</details>'
  prefs: []
  type: TYPE_NORMAL
