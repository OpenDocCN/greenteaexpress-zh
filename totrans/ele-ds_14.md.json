["```py\nimport pandas as pd\n\ngss = pd.read_hdf('gss_eda.hdf', 'gss')\ngss.head() \n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.kdeplot(gss['REALINC'] / 1000, label='GSS data', cut=0)\n\nplt.xlabel('Family income ($1000s)')\nplt.ylabel('PDF')\nplt.title('Distribution of income')\nplt.legend(); \n```", "```py\nmean_realinc = gss['REALINC'].mean()\nstd_income = gss['REALINC'].std()\nprint(mean_realinc, std_income) \n```", "```py\n31742.56337281537 29526.06789623489 \n```", "```py\nimport numpy as np\n\ndef simulate_sample_mean(n, mu, sigma):\n    sample = np.random.normal(mu, sigma, size=n)\n    return sample.mean() \n```", "```py\nn_realinc = gss['REALINC'].notna().sum()\nn_realinc \n```", "```py\n58293 \n```", "```py\nsimulate_sample_mean(n_realinc, mean_realinc, std_income) \n```", "```py\n31725.9120143765 \n```", "```py\nt1 = [simulate_sample_mean(n_realinc, mean_realinc, std_income)\n      for i in range(1000)] \n```", "```py\nsns.kdeplot(t1)\n\nplt.xlabel('Family income (1986 $)')\nplt.ylabel('PDF')\nplt.title('Sampling distribution of mean income'); \n```", "```py\ndef summarize(t, digits=2):\n    table = pd.DataFrame(columns=['Estimate', 'SE', 'CI90'])\n    est = np.mean(t).round(digits)\n    SE = np.std(t).round(digits)\n    CI90 = np.percentile(t, [5, 95]).round(digits)\n    table.loc[''] = est, SE, CI90\n    return table \n```", "```py\nsummary1 = summarize(t1, digits=1)\nsummary1 \n```", "```py\nnp.percentile(gss['REALINC'].dropna(), 10) \n```", "```py\n5631.3 \n```", "```py\ndef simulate_sample_percentile(n, mu, sigma):\n    sample = np.random.normal(mu, sigma, size=n)\n    return np.percentile(sample, 10) \n```", "```py\nt2 = [simulate_sample_percentile(n_realinc, mean_realinc, std_income)\n      for i in range(1000)] \n```", "```py\nsns.kdeplot(t2)\n\nplt.xlabel('Family income (1986 $)')\nplt.ylabel('PDF')\nplt.title('Sampling distribution of the 10th percentile'); \n```", "```py\nsummary2 = summarize(t2)\nsummary2 \n```", "```py\nfrom scipy.stats import norm\n\nxs = np.linspace(-50, 150)\nys = norm(mean_realinc/1000, std_income/1000).pdf(xs) \n```", "```py\nsns.kdeplot(gss['REALINC'] / 1000, label='GSS data', cut=0)\nplt.plot(xs, ys, color='0.7', label='normal model')\n\nplt.xlabel('Family income ($1000s)')\nplt.ylabel('PDF')\nplt.title('Distribution of income')\nplt.legend(); \n```", "```py\nbootstrapped = gss.sample(n=n_realinc, replace=True)\nbootstrapped.shape \n```", "```py\n(58293, 8) \n```", "```py\nrepeats = bootstrapped['ID_'].value_counts()\nrepeats.head() \n```", "```py\n797    50\n195    48\n197    47\n171    45\n920    45\nName: ID_, dtype: int64 \n```", "```py\nunused = set(gss['ID_']) - set(bootstrapped['ID_'])\nlen(unused) \n```", "```py\n567 \n```", "```py\ndef bootstrap_mean(df, varname):\n    bootstrapped = df.sample(n=len(df), replace=True)\n    return bootstrapped[varname].mean() \n```", "```py\nt3 = [bootstrap_mean(gss, 'REALINC')\n      for i in range(1001)] \n```", "```py\nsummary3 = summarize(t3)\ntable = pd.concat([summary1, summary3])\ntable.index=['normal model', 'bootstrapping']\ntable \n```", "```py\ndef bootstrap_income_percentile(df):\n    bootstrapped = df.sample(n=len(df), replace=True)\n    return bootstrapped['REALINC'].quantile(0.1) \n```", "```py\nt4 = [bootstrap_income_percentile(gss)\n      for i in range(1001)] \n```", "```py\nsummary4 = summarize(t4)\ntable = pd.concat([summary2, summary4])\ntable.index=['normal model', 'bootstrapping']\ntable \n```", "```py\nimport pandas as pd\n\nbrfss = pd.read_hdf('brfss.hdf', 'brfss')\nbrfss.shape \n```", "```py\n(418268, 9) \n```", "```py\nbrfss.head() \n```", "```py\nheight = brfss['HTM4'] \n```", "```py\nmale = (brfss['_SEX'] == 1)\nmale.sum() \n```", "```py\n189835 \n```", "```py\nn_height = height[male].notna().sum()\nn_height \n```", "```py\n182269 \n```", "```py\nmean_height = height[male].mean()\nstd_height = height[male].std()\nmean_height, std_height \n```", "```py\n(178.0768644146838, 7.9664553134728395) \n```", "```py\nt5 = [bootstrap_mean(brfss[male], 'HTM4')\n      for i in range(201)]\n\nsummarize(t5, digits=3) \n```", "```py\nbrfss['_LLCPWT'].describe() \n```", "```py\ncount    418268.000000\nmean        603.513276\nstd        1082.430311\nmin           1.016173\n25%         111.160528\n50%         272.869258\n75%         654.211787\nmax       42066.730900\nName: _LLCPWT, dtype: float64 \n```", "```py\nn = len(brfss)\nbootstrapped = brfss.sample(n=n, replace=True, weights='_LLCPWT') \n```", "```py\nrepeats = bootstrapped['SEQNO'].value_counts()\nrepeats.head() \n```", "```py\n2019000108    139\n2019000047    122\n2019000048    115\n2019000096    110\n2019000851    110\nName: SEQNO, dtype: int64 \n```", "```py\nunused = set(brfss['SEQNO']) - set(bootstrapped['SEQNO'])\nlen(unused) \n```", "```py\n826 \n```", "```py\ndef weighted_bootstrap_mean(df):\n    n = len(df)\n    sample = df.sample(n=n, replace=True, weights='_LLCPWT')\n    return sample['HTM4'].mean() \n```", "```py\nmale_df = brfss[male]\nweighted_bootstrap_mean(male_df) \n```", "```py\n177.63307589732193 \n```", "```py\nt6 = [weighted_bootstrap_mean(male_df) \n      for i in range(201)]\n\nsummarize(t6, digits=3) \n```", "```py\nprint(np.mean(t6), mean_height) \n```", "```py\n177.6394121015467 178.0768644146838 \n```", "```py\nvar1, var2 = 'HTM4', 'WTKG3'\ncorr = brfss[var1].corr(brfss[var2])\ncorr \n```", "```py\n0.47715146283881427 \n```", "```py\ndef weighted_bootstrap_corr(df, var1, var2):\n    n = len(df)\n    sample = df.sample(n=n, replace=True, weights='_LLCPWT')\n    corr = sample[var1].corr(sample[var2])\n    return corr \n```", "```py\nfrom scipy.stats import linregress\n\nsubset = brfss.dropna(subset=['WTKG3', 'HTM4'])\nres = linregress(subset['HTM4'], subset['WTKG3'])\nres.slope \n```", "```py\n0.932929241334935 \n```", "```py\none_year = gss['YEAR']==2018\ngss2018 = gss[one_year] \n```", "```py\nt9 = [bootstrap_income_percentile(gss2018)\n      for i in range(1001)] \n```", "```py\nsummary9 = summarize(t9)\nsummary9 \n```", "```py\nlen(gss2018['REALINC'].value_counts()) \n```", "```py\n26 \n```", "```py\npd.Series(t9).value_counts().sort_index() \n```", "```py\n5107.5    955\n5675.0      1\n5902.0      1\n6015.5      2\n6242.5     42\ndtype: int64 \n```", "```py\nlog_realinc = np.log10(gss2018['REALINC'].dropna()) \n```", "```py\nsns.kdeplot(log_realinc)\n\nplt.xlabel('Income (log10 1986 dollars)')\nplt.ylabel('Probability density')\nplt.title('Estimated distribution of income'); \n```", "```py\nfrom scipy.stats import gaussian_kde\n\nkde = gaussian_kde(log_realinc) \n```", "```py\nn = gss2018['REALINC'].notna().sum()\nn \n```", "```py\n2152 \n```", "```py\nsample = kde.resample(n)\n10 ** np.percentile(sample, 10) \n```", "```py\n5130.216531511149 \n```", "```py\ndef resample_kde_percentile(kde):\n    sample = kde.resample(kde.n)\n    return 10 ** np.percentile(sample, 10) \n```", "```py\nt10 = [resample_kde_percentile(kde)\n       for i in range(1000)]\n\nsummary10 = summarize(t10) \n```", "```py\ntable = pd.concat([summary9, summary10])\ntable.index=['bootstrapping', 'KDE resampling']\ntable \n```", "```py\ngss['GRASS'].replace(2, 0, inplace=True)\ngss['GRASS'].value_counts() \n```", "```py\n0.0    25662\n1.0    11884\nName: GRASS, dtype: int64 \n```", "```py\ngss['YEAR2'] = (gss['YEAR']-1990) ** 2 \n```", "```py\nimport statsmodels.formula.api as smf\n\nformula = 'GRASS ~ YEAR + YEAR2'\nresults = smf.logit(formula, data=gss).fit(disp=False) \n```", "```py\nyears = np.linspace(1972, 2030)\ndf_pred = pd.DataFrame()\ndf_pred['YEAR'] = years\ndf_pred['YEAR2'] = (df_pred['YEAR']-1990)**2\n\npred = results.predict(df_pred) \n```", "```py\ngrass_by_year = gss.groupby('YEAR')['GRASS'].mean() \n```", "```py\ndef plot_data():\n    grass_by_year.plot(style='o', alpha=0.5, label='data')\n    plt.xlabel('Year')\n    plt.ylabel('Fraction in favor')\n    plt.title('Support for legalization of marijuana')\n    plt.legend(loc='upper left'); \n```", "```py\nplt.plot(years, pred, label='logistic model', color='gray', alpha=0.4)\nplot_data() \n```"]