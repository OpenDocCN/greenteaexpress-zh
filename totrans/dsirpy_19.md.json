["```py\nclass Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\n    def __repr__(self):\n        return f'Node({self.data}, {repr(self.next)})' \n```", "```py\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\nnode1 \n```", "```py\nNode(1, None) \n```", "```py\nnode1.next = node2\nnode2.next = node3 \n```", "```py\nnode1 \n```", "```py\nNode(1, Node(2, Node(3, None))) \n```", "```py\nclass LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def __repr__(self):\n        return f'LinkedList({repr(self.head)})' \n```", "```py\nt = LinkedList(node1)\nt \n```", "```py\nLinkedList(Node(1, Node(2, Node(3, None)))) \n```", "```py\nfind(t, 1) \n```", "```py\nNode(1, Node(2, Node(3, None))) \n```", "```py\nfind(t, 3) \n```", "```py\nNode(3, None) \n```", "```py\nfind(t, 5) \n```", "```py\ndef lpush(t, value):\n    t.head = Node(value, t.head) \n```", "```py\nt = LinkedList()\nlpush(t, 3)\nlpush(t, 2)\nlpush(t, 1)\nt \n```", "```py\nLinkedList(Node(1, Node(2, Node(3, None)))) \n```", "```py\ndef lpop(t):\n    if t.head is None:\n        raise ValueError('Tried to pop from empty LinkedList')\n    node = t.head\n    t.head = node.next\n    return node.data \n```", "```py\nlpop(t), lpop(t), lpop(t) \n```", "```py\n(1, 2, 3) \n```", "```py\nt \n```", "```py\nLinkedList(None) \n```", "```py\nt = LinkedList()\nrpush(t, 1)\nt \n```", "```py\nLinkedList(Node(1, None)) \n```", "```py\nrpush(t, 2)\nt \n```", "```py\nLinkedList(Node(1, Node(2, None))) \n```", "```py\nrpop(t) \n```", "```py\n2 \n```", "```py\nrpop(t) \n```", "```py\n1 \n```", "```py\ntry:\n    rpop(t)\nexcept ValueError as e:\n    print(e) \n```", "```py\nTried to rpop from an empty list \n```", "```py\ndef reverse(t):\n    t2 = LinkedList()\n    node = t.head\n    while node:\n        lpush(t2, node.data)\n        node = node.next\n\n    return t2 \n```", "```py\nt = LinkedList(Node(1, Node(2, Node(3, None))))\nreverse(t) \n```", "```py\nLinkedList(Node(3, Node(2, Node(1, None)))) \n```", "```py\ndef reverse(t):\n    t.head = reverse_rec(t.head)\n\ndef reverse_rec(node):\n\n    # if there are 0 or 1 nodes\n    if node is None or node.next is None:\n        return node\n\n    # reverse the rest LinkedList\n    rest = reverse_rec(node.next)\n\n    # Put first element at the end\n    node.next.next = node\n    node.next = None\n\n    return rest \n```", "```py\nt = LinkedList(Node(1, Node(2, Node(3, None))))\nreverse(t)\nt \n```", "```py\nLinkedList(Node(3, Node(2, Node(1, None)))) \n```", "```py\ndef reverse(t):\n    prev = None\n    current = t.head\n    while current :\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    t.head = prev \n```", "```py\nt = LinkedList(Node(1, Node(2, Node(3, None))))\nreverse(t)\nt \n```", "```py\nLinkedList(Node(3, Node(2, Node(1, None)))) \n```", "```py\ndef remove_after(node):\n    removed = node.next\n    node.next = node.next.next\n    return removed.data \n```", "```py\nt = LinkedList(Node(1, Node(2, Node(3, None))))\nremove_after(t.head)\nt \n```", "```py\nLinkedList(Node(1, Node(3, None))) \n```", "```py\nt = LinkedList(Node(1, Node(2, Node(3, None))))\nremove(t, 2)\nt \n```", "```py\nLinkedList(Node(1, Node(3, None))) \n```", "```py\nremove(t, 1)\nt \n```", "```py\nLinkedList(Node(3, None)) \n```", "```py\ntry:\n    remove(t, 4)\nexcept ValueError as e:\n    print(e) \n```", "```py\nValue not found \n```", "```py\nremove(t, 3)\nt \n```", "```py\nLinkedList(None) \n```", "```py\ntry:\n    remove(t, 5)\nexcept ValueError as e:\n    print(e) \n```", "```py\nValue not found (empty list) \n```", "```py\ndef insert_after(node, data):\n    node.next = Node(data, node.next) \n```", "```py\nt = LinkedList(Node(1, Node(2, Node(3, None))))\ninsert_after(t.head, 5)\nt \n```", "```py\nLinkedList(Node(1, Node(5, Node(2, Node(3, None))))) \n```", "```py\ndef insert_sorted(t, data):\n    if t.head is None or t.head.data > data:\n        lpush(t, data)\n        return\n\n    node = t.head\n    while node.next:\n        if node.next.data > data:\n            insert_after(node, data)\n            return\n        node = node.next\n\n    insert_after(node, data) \n```", "```py\nt = LinkedList()\ninsert_sorted(t, 1)\nt \n```", "```py\nLinkedList(Node(1, None)) \n```", "```py\ninsert_sorted(t, 3)\nt \n```", "```py\nLinkedList(Node(1, Node(3, None))) \n```", "```py\ninsert_sorted(t, 0)\nt \n```", "```py\nLinkedList(Node(0, Node(1, Node(3, None)))) \n```", "```py\ninsert_sorted(t, 2)\nt \n```", "```py\nLinkedList(Node(0, Node(1, Node(2, Node(3, None))))) \n```"]