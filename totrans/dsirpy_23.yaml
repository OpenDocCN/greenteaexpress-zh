- en: Graphs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图
- en: 原文：[https://allendowney.github.io/DSIRP/graph.html](https://allendowney.github.io/DSIRP/graph.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://allendowney.github.io/DSIRP/graph.html](https://allendowney.github.io/DSIRP/graph.html)
- en: This notebook is adapted from Chapter 2 of [Think Complexity](https://greenteapress.com/wp/think-complexity-2e/).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个笔记本是从[Think Complexity](https://greenteapress.com/wp/think-complexity-2e/)的第2章改编的。
- en: '[Click here to run this chapter on Colab](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/graph.ipynb)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[点击这里在Colab上运行本章](https://colab.research.google.com/github/AllenDowney/DSIRP/blob/main/notebooks/graph.ipynb)'
- en: Graph
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图
- en: A graph is a collection of nodes and edges, where nodes often represent objects
    or ideas, and edges represent relationships among them. For example, in a graph
    that represents a social network, nodes might represent people and edges might
    represent friendships between them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图是一个节点和边的集合，其中节点通常表示对象或想法，边表示它们之间的关系。例如，在表示社交网络的图中，节点可以表示人，边可以表示他们之间的友谊。
- en: NetworkX provides data structures to represent graphs and function that implement
    graph algorithms. To show how it works, we’ll make a small graph that represents
    a social network.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkX提供了用于表示图形的数据结构和实现图形算法的函数。为了展示它是如何工作的，我们将创建一个代表社交网络的小图。
- en: Here’s how we make a graph and add nodes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何创建一个图并添加节点。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Optionally, you can provide attributes that are associated with the node. In
    this example, Bob has an `age` attribute and Carol has a cat.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，您可以提供与节点关联的属性。在这个例子中，Bob有一个`age`属性，Carol有一只猫。
- en: Here’s how we add edges between nodes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何在节点之间添加边。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Optionally, you can provide attributes that are associated with the edge. In
    this example, the second edge has an attribute called `type` that indicates the
    nature of the relationship.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，您可以提供与边关联的属性。在这个例子中，第二条边有一个名为`type`的属性，表示关系的性质。
- en: Here’s how to draw the graph.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何绘制图形的。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![_images/graph_8_0.png](../Images/c49ed2f55f4457ed70f5eb1affcbfacb.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![_images/graph_8_0.png](../Images/c49ed2f55f4457ed70f5eb1affcbfacb.png)'
- en: '**Exercise:** Suppose Alice introduces Bob and Carol, and they become frenemies.
    Update the social network by adding an edge between Bob and Carol with an appropriate
    attribute, then draw the graph again.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**假设Alice介绍了Bob和Carol，他们成为了好朋友。通过在Bob和Carol之间添加一个适当的属性的边来更新社交网络，然后再次绘制图形。'
- en: Graph Representation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表示
- en: NetworkX represents graphs using a dictionary that maps from each node to a
    dictionary that maps from nodes to edges.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: NetworkX使用一个从每个节点映射到从节点到边的字典来表示图形。
- en: If we select an element from the top-level dictionary, the result is a dictionary-like
    object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从顶层字典中选择一个元素，结果将是一个类似字典的对象。
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So we can iterate through the neighbors of a node like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以像这样遍历节点的邻居：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or enumerate the neighbors and edges like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '或者像这样枚举邻居和边:'
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Edges are represented by dictionaries of attributes. In this example, the first
    edge has no attributes and the second has an attribute named `type`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 边由属性字典表示。在这个例子中，第一条边没有属性，第二条边有一个名为`type`的属性。
- en: 'We can select an edge like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样选择一条边：
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To check whether there is an edge from one node to another, we can use the
    `in` operator:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否有从一个节点到另一个节点的边，我们可以使用`in`运算符：
- en: '[PRE14]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: But there’s a method that does the same thing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一个可以做同样事情的方法。
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Complete graph
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完全图
- en: In a complete graph, all nodes are connected to each other. To make a complete
    graph, we’ll use the following generator function, iterates through all pairs
    of nodes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全图中，所有节点彼此相连。为了创建一个完全图，我们将使用以下生成器函数，遍历所有节点对。
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here’s a complete graph with 10 nodes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有10个节点的完全图：
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And here’s what it looks like.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的样子。
- en: '[PRE22]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![_images/graph_30_0.png](../Images/99a22bf9b80d782319f6e10b903ce54d.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![_images/graph_30_0.png](../Images/99a22bf9b80d782319f6e10b903ce54d.png)'
- en: Random graphs
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机图
- en: Next we’ll make an Erdos-Renyi graph, which is a random graph where the probability
    of an edge between each pair of nodes is \(p\).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将创建一个Erdos-Renyi图，这是一个随机图，其中每对节点之间的边的概率是\(p\)。
- en: The helper function `flip` returns `True` with probability `p` and `False` with
    probability `1-p`
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数`flip`以概率`p`返回`True`，以概率`1-p`返回`False`
- en: '[PRE23]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`random_pairs` is a generator function that enumerates all possible pairs of
    nodes and yields each one with probability `p`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`random_pairs`是一个生成器函数，它枚举所有可能的节点对，并以概率`p`产生每一个。'
- en: '[PRE24]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`make_random_graph` makes an ER graph where the probability of an edge between
    each pair of nodes is `p`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_random_graph`创建一个ER图，其中每对节点之间的边的概率是`p`。'
- en: '[PRE25]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here’s an example with `n=10` and `p=0.3`
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`n=10`和`p=0.3`的例子
- en: '[PRE26]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And here’s what it looks like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的样子：
- en: '[PRE28]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![_images/graph_40_0.png](../Images/ca45c09f50cfe71ff8330b86ab8c57b3.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![_images/graph_40_0.png](../Images/ca45c09f50cfe71ff8330b86ab8c57b3.png)'
- en: Connectivity
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连通性
- en: A graph is **connected** if you can start from any node and follow a sequence
    of edges to reach any other node.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以从任何节点开始并沿着一系列边到达任何其他节点，则图形是**连接**的。
- en: To check whether a graph is connected, we’ll use a version of a depth-first
    search. First, let’s see what goes wrong with a basic DFS; then we’ll fix the
    problem.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查图是否连通，我们将使用深度优先搜索的一个版本。首先，让我们看看基本DFS出了什么问题；然后我们将解决问题。
- en: '[PRE29]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For most graphs, the basic version of DFS runs forever, because it visits the
    same nodes over and over. The solution is to keep track of the nodes we’ve seen
    and avoid visiting them more than once.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数图形，基本版本的DFS永远运行，因为它一遍又一遍地访问相同的节点。解决方法是跟踪我们见过的节点，并避免多次访问它们。
- en: '**Exercise:** Write a function called `reachable_nodes` that takes a graph
    and a starting node, uses DFS to find all nodes that can be reached from the starting
    node, and returns a collection that contains them.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：**编写一个名为`reachable_nodes`的函数，它接受一个图和一个起始节点，使用DFS找到可以从起始节点到达的所有节点，并返回一个包含它们的集合。'
- en: 'Hint: Think about what kind of collection to use.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：考虑使用什么样的集合。
- en: 'In the complete graph, starting from node 0, we can reach all nodes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全图中，从节点0开始，我们可以到达所有节点：
- en: '[PRE31]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In a random graph, it may or may not be possible to reach all nodes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在随机图中，可能可以到达所有节点，也可能不行。
- en: '[PRE33]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'So we can use `reachable_nodes` to check whether a graph is connected:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用`reachable_nodes`来检查图是否连通：
- en: '[PRE35]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Again, the complete graph is connected:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，完全图是连通的：
- en: '[PRE36]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If we generate a random graph with a low value of `p`, it’s probably not connected.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用较低的`p`值生成一个随机图，它可能不连通。
- en: '[PRE38]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If we generate a random graph with a high value of `p`, it’s probably not connected.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用较高的`p`值生成一个随机图，它可能不连通。
- en: '[PRE42]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Probability of connectivity
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连通性的概率
- en: This behavior is the topic of a [seminal paper in network science](https://www.renyi.hu/~p_erdos/1960-10.pdf).
    We can use NetworkX and the functions we’ve written to replicate one of their
    results.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为是网络科学中的一篇[重要论文](https://www.renyi.hu/~p_erdos/1960-10.pdf)的主题。我们可以使用NetworkX和我们编写的函数来复制他们的一个结果。
- en: The following function takes `n` and `p`, generates `iters` graphs, and returns
    the fraction of them that are connected.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数接受`n`和`p`，生成`iters`个图，并返回连接的图的比例。
- en: '[PRE46]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: With `n=10` and `p=0.23`, the probability of being connected is about 33%.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当`n=10`且`p=0.23`时，连通的概率约为33%。
- en: '[PRE47]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: According to Erdos and Renyi, the critical value of `p` for `n=10` is about
    0.23.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Erdos和Renyi，对于`n=10`，`p`的临界值约为0.23。
- en: '[PRE49]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: So let’s plot the probability of connectivity for a range of values for `p`
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们绘制一系列`p`值的连通性概率
- en: '[PRE51]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: I’ll estimate the probabilities with `iters=1000`
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用`iters=1000`来估计概率
- en: '[PRE53]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: And then plot them, adding a vertical line at the computed critical value
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后绘制它们，在计算出的临界值处添加一条垂直线
- en: '[PRE55]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![_images/graph_71_0.png](../Images/ab319e0f7ff25cefe3c9928e0cf7f7f6.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![_images/graph_71_0.png](../Images/ab319e0f7ff25cefe3c9928e0cf7f7f6.png)'
- en: '**Exercise:** In my implementation of `reachable_nodes`, you might be bothered
    by the apparent inefficiency of adding *all* neighbors to the stack without checking
    whether they are already in `seen`. Write a version of this function that checks
    the neighbors before adding them to the stack. Does this “optimization” change
    the order of growth? Does it make the function faster?'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：** 在我的`reachable_nodes`实现中，您可能会对将*所有*邻居添加到堆栈中而不检查它们是否已在`seen`中而感到困扰。编写此函数的一个版本，在将其添加到堆栈之前检查邻居。这种“优化”是否改变了增长的顺序？它是否使函数更快？'
- en: '[PRE56]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How does the performance of the two methods compare for larger values of `n`?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的`n`值，这两种方法的性能如何比较？
- en: '*Data Structures and Information Retrieval in Python*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python中的数据结构和信息检索*'
- en: Copyright 2021 Allen Downey
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 2021 Allen Downey
- en: 'License: [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证：[知识共享署名-非商业-相同方式共享4.0国际许可协议](https://creativecommons.org/licenses/by-nc-sa/4.0/)
