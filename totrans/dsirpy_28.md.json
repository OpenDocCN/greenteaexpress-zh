["```py\ndef merge_sort_norec(xs):\n    n = len(xs)\n    mid = n//2\n    left = xs[:mid]\n    right = xs[mid:]\n\n    left.sort()\n    right.sort()\n\n    return merge(left, right) \n```", "```py\nimport random\n\npopulation = range(100)\nxs = random.sample(population, k=6)\nys = random.sample(population, k=6)\nys \n```", "```py\n[65, 55, 62, 4, 1, 91] \n```", "```py\nxs.sort()\nys.sort()\nys \n```", "```py\n[1, 4, 55, 62, 65, 91] \n```", "```py\nres = list(merge(xs, ys))\nres \n```", "```py\n[1, 4, 13, 26, 55, 62, 65, 68, 71, 90, 91, 98] \n```", "```py\nsorted(res) == res \n```", "```py\nTrue \n```", "```py\nxs = random.sample(population, k=12)\nxs \n```", "```py\n[5, 25, 67, 88, 35, 71, 26, 28, 12, 7, 57, 8] \n```", "```py\nres = list(merge_sort_rec(xs))\nres \n```", "```py\n[5, 7, 8, 12, 25, 26, 28, 35, 57, 67, 71, 88] \n```", "```py\nsorted(res) == res \n```", "```py\nTrue \n```", "```py\nxs = random.sample(population, k=5)\nys = random.sample(population, k=5)\nzs = random.sample(population, k=5)\n\nmin(xs), min(ys), min(zs) \n```", "```py\n(3, 16, 12) \n```", "```py\nxs.sort()\nys.sort()\nzs.sort() \n```", "```py\nsequences = [xs, ys, zs] \n```", "```py\nfrom heapq import heappush, heappop\n\nheap = []\nfor i, seq in enumerate(sequences):\n    iterator = iter(seq)\n    first = next(iterator)\n    heappush(heap, (first, i, iterator)) \n```", "```py\nvalue, i, iterator = heappop(heap)\nvalue \n```", "```py\n3 \n```", "```py\nheappush(heap, (next(iterator), i, iterator)) \n```", "```py\niterator = iter(xs)\n\nwhile True:\n    try:\n        print(next(iterator))\n    except StopIteration:\n        break \n```", "```py\n3\n10\n13\n87\n95 \n```", "```py\nseq = list(heapmerge([xs, ys, zs]))\nseq \n```", "```py\n[3, 10, 12, 13, 16, 17, 20, 29, 34, 44, 87, 89, 92, 95, 97] \n```", "```py\nsorted(seq) == seq \n```", "```py\nTrue \n```", "```py\nfrom os.path import basename, exists\n\ndef download(url):\n    filename = basename(url)\n    if not exists(filename):\n        from urllib.request import urlretrieve\n        local, _ = urlretrieve(url, filename)\n        print('Downloaded ' + local)\n\ndownload('https://github.com/AllenDowney/DSIRP/raw/main/timing.py') \n```", "```py\nfrom timing import run_timing_test, plot_timing_test \n```", "```py\nimport numpy as np\n\ndef test_quicksort(n):\n    xs = np.random.normal(size=n)\n    xs.sort(kind='quicksort')\n\nns, ts = run_timing_test(test_quicksort)\nplot_timing_test(ns, ts, 'test_quicksort', exp=1) \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.0\n32768 0.0\n65536 0.010000000000000231\n131072 0.009999999999999787\n262144 0.03000000000000025\n524288 0.04999999999999982\n1048576 0.1200000000000001\n2097152 0.23999999999999977\n4194304 0.5000000000000004\n8388608 0.9699999999999993\n16777216 2.0900000000000007 \n```", "```py\ndef test_mergesort(n):\n    xs = np.random.normal(size=n)\n    xs.sort(kind='mergesort')\n\nns, ts = run_timing_test(test_mergesort)\nplot_timing_test(ns, ts, 'test_mergesort', exp=1) \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.0\n32768 0.0\n65536 0.010000000000000675\n131072 0.009999999999999787\n262144 0.03000000000000025\n524288 0.05999999999999961\n1048576 0.1200000000000001\n2097152 0.2699999999999996\n4194304 0.5499999999999998\n8388608 1.160000000000001 \n```", "```py\ndef test_heapsort(n):\n    xs = np.random.normal(size=n)\n    xs.sort(kind='heapsort')\n\nns, ts = run_timing_test(test_quicksort)\nplot_timing_test(ns, ts, 'test_heapsort', exp=1) \n```", "```py\n1024 0.0\n2048 0.0\n4096 0.0\n8192 0.0\n16384 0.0\n32768 0.0\n65536 0.009999999999999787\n131072 0.009999999999999787\n262144 0.030000000000001137\n524288 0.049999999999998934\n1048576 0.10999999999999943\n2097152 0.21000000000000085\n4194304 0.4499999999999993\n8388608 0.9800000000000004\n16777216 1.9700000000000006 \n```", "```py\ndef test_merge_sort_rec(n):\n    xs = np.random.normal(size=n)\n    spectrum = merge_sort_rec(xs)\n\nns, ts = run_timing_test(test_merge_sort_rec)\nplot_timing_test(ns, ts, 'test_merge_sort_rec', exp=1) \n```", "```py\n1024 0.0\n2048 0.009999999999999787\n4096 0.010000000000001563\n8192 0.02999999999999936\n16384 0.0600000000000005\n32768 0.11999999999999922\n65536 0.2599999999999998\n131072 0.5300000000000011\n262144 1.089999999999998 \n```"]