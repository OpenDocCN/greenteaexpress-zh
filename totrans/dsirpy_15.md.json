["```py\nsymbol        bit string\nx             1\ny             01\nz             001 \n```", "```py\ntext = 'this is an example of a huffman tree' \n```", "```py\nfrom collections import Counter\n\nc = Counter(text)\nc \n```", "```py\nCounter({'t': 2,\n         'h': 2,\n         'i': 2,\n         's': 2,\n         ' ': 7,\n         'a': 4,\n         'n': 2,\n         'e': 4,\n         'x': 1,\n         'm': 2,\n         'p': 1,\n         'l': 1,\n         'o': 1,\n         'f': 3,\n         'u': 1,\n         'r': 1}) \n```", "```py\nfrom collections import namedtuple\n\nNode = namedtuple('Node', ['count', 'letter', 'left', 'right']) \n```", "```py\nleft = Node(4, 'a', None, None)\nleft \n```", "```py\nNode(count=4, letter='a', left=None, right=None) \n```", "```py\nright = Node(2, 'n', None, None)\nright \n```", "```py\nNode(count=2, letter='n', left=None, right=None) \n```", "```py\nleft > right \n```", "```py\nTrue \n```", "```py\ncount = left.count + right.count\nroot = Node(count, '\\0', left, right)\nroot \n```", "```py\nNode(count=6, letter='\\x00', left=Node(count=4, letter='a', left=None, right=None), right=Node(count=2, letter='n', left=None, right=None)) \n```", "```py\nnodes = [Node(count, letter, None, None) \n         for (letter, count) in c.items()]\nnodes \n```", "```py\n[Node(count=2, letter='t', left=None, right=None),\n Node(count=2, letter='h', left=None, right=None),\n Node(count=2, letter='i', left=None, right=None),\n Node(count=2, letter='s', left=None, right=None),\n Node(count=7, letter=' ', left=None, right=None),\n Node(count=4, letter='a', left=None, right=None),\n Node(count=2, letter='n', left=None, right=None),\n Node(count=4, letter='e', left=None, right=None),\n Node(count=1, letter='x', left=None, right=None),\n Node(count=2, letter='m', left=None, right=None),\n Node(count=1, letter='p', left=None, right=None),\n Node(count=1, letter='l', left=None, right=None),\n Node(count=1, letter='o', left=None, right=None),\n Node(count=3, letter='f', left=None, right=None),\n Node(count=1, letter='u', left=None, right=None),\n Node(count=1, letter='r', left=None, right=None)] \n```", "```py\nfrom heapq import heapify, heappop, heappush\n\nheap = nodes.copy()\nheapify(heap)\nheap \n```", "```py\n[Node(count=1, letter='l', left=None, right=None),\n Node(count=1, letter='p', left=None, right=None),\n Node(count=1, letter='o', left=None, right=None),\n Node(count=1, letter='r', left=None, right=None),\n Node(count=2, letter='h', left=None, right=None),\n Node(count=2, letter='i', left=None, right=None),\n Node(count=1, letter='u', left=None, right=None),\n Node(count=2, letter='s', left=None, right=None),\n Node(count=1, letter='x', left=None, right=None),\n Node(count=2, letter='m', left=None, right=None),\n Node(count=7, letter=' ', left=None, right=None),\n Node(count=4, letter='a', left=None, right=None),\n Node(count=2, letter='t', left=None, right=None),\n Node(count=3, letter='f', left=None, right=None),\n Node(count=2, letter='n', left=None, right=None),\n Node(count=4, letter='e', left=None, right=None)] \n```", "```py\ntree = make_tree(heap) \n```", "```py\ntry:\n    import EoN\nexcept ImportError:\n    !pip  install  EoN \n```", "```py\nimport networkx as nx\n\ndef add_edges(parent, G):\n  \"\"\"Make a NetworkX graph that represents the tree.\"\"\"\n    if parent is None:\n        return\n\n    for child in (parent.left, parent.right):\n        if child:\n            G.add_edge(parent, child)\n            add_edges(child, G) \n```", "```py\nG = nx.DiGraph()\nadd_edges(tree, G) \n```", "```py\ndef get_labels(parent, labels):\n    if parent is None:\n        return\n\n    if parent.letter == '\\0':\n        labels[parent] = parent.count\n    else:\n        labels[parent] = parent.letter\n\n    get_labels(parent.left, labels)\n    get_labels(parent.right, labels) \n```", "```py\nlabels = {}\nget_labels(tree, labels) \n```", "```py\ndef get_edge_labels(parent, edge_labels):\n    if parent is None:\n        return\n\n    if parent.left:\n        edge_labels[parent, parent.left] = '0'\n        get_edge_labels(parent.left, edge_labels)\n\n    if parent.right:\n        edge_labels[parent, parent.right] = '1'\n        get_edge_labels(parent.right, edge_labels) \n```", "```py\nedge_labels = {}\nget_edge_labels(tree, edge_labels)\nlen(edge_labels) \n```", "```py\n30 \n```", "```py\nfrom EoN import hierarchy_pos\n\ndef draw_tree(tree):\n    G = nx.DiGraph()\n    add_edges(tree, G)\n    pos = hierarchy_pos(G)\n    labels = {}\n    get_labels(tree, labels)\n    edge_labels = {}\n    get_edge_labels(tree, edge_labels)\n    nx.draw(G, pos, labels=labels, alpha=0.4)\n    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='C1') \n```", "```py\ndraw_tree(tree) \n```", "```py\ndef is_leaf(node):\n    return node.left is None and node.right is None \n```", "```py\ndef make_table(node, path, table):\n    if node is None:\n        return\n\n    if is_leaf(node):\n        table[node.letter] = path\n        return\n\n    make_table(node.left, path+'0', table)\n    make_table(node.right, path+'1', table) \n```", "```py\ntable = {}\nmake_table(tree, '', table)\n\ntable \n```", "```py\n{'l': '00000',\n 'o': '00001',\n 'p': '00010',\n 'r': '00011',\n 'u': '00100',\n 'x': '00101',\n 'h': '0011',\n 'i': '0100',\n 'm': '0101',\n 'n': '0110',\n 's': '0111',\n 'a': '100',\n 'e': '101',\n 't': '1100',\n 'f': '1101',\n ' ': '111'} \n```", "```py\ndef encode(s, table):\n    t = [table[letter] for letter in s]\n    return ''.join(t) \n```", "```py\ncode = encode('this is spinal tap',table)\ncode \n```", "```py\n'1100001101000111111010001111110111000100100011010000000111110010000010' \n```", "```py\ndecode(code, tree) \n```", "```py\n'this is spinal tap' \n```"]