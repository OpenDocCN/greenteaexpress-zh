["```py\ndef odds(p):\n    return p / (1-p) \n```", "```py\nodds(0.75) \n```", "```py\n3.0 \n```", "```py\nodds(0.1) \n```", "```py\n0.11111111111111112 \n```", "```py\nodds(0.9) \n```", "```py\n9.000000000000002 \n```", "```py\ndef prob(o):\n    return o / (o+1) \n```", "```py\nprob(3/2) \n```", "```py\n0.6 \n```", "```py\ndef prob2(yes, no):\n    return yes / (yes + no) \n```", "```py\nprob2(3, 2) \n```", "```py\n0.6 \n```", "```py\nprior_odds = 1\nlikelihood_ratio = (3/4) / (1/2)\npost_odds = prior_odds * likelihood_ratio\npost_odds \n```", "```py\n1.5 \n```", "```py\npost_prob = prob(post_odds)\npost_prob \n```", "```py\n0.6 \n```", "```py\nlikelihood_ratio = (1/4) / (1/2)\npost_odds *= likelihood_ratio\npost_odds \n```", "```py\n0.75 \n```", "```py\npost_prob = prob(post_odds)\npost_prob \n```", "```py\n0.42857142857142855 \n```", "```py\nlike1 = 0.01\nlike2 = 2 * 0.6 * 0.01\n\nlikelihood_ratio = like1 / like2\nlikelihood_ratio \n```", "```py\n0.8333333333333334 \n```", "```py\npost_odds = 1 * like1 / like2\nprob(post_odds) \n```", "```py\n0.45454545454545453 \n```", "```py\n# Solution\n\npost_odds = odds(0.9) * like1 / like2\nprob(post_odds) \n```", "```py\n0.8823529411764706 \n```", "```py\n# Solution\n\npost_odds = odds(0.1) * like1 / like2\nprob(post_odds) \n```", "```py\n0.0847457627118644 \n```", "```py\nimport numpy as np\nfrom empiricaldist import Pmf\n\ndef make_die(sides):\n    outcomes = np.arange(1, sides+1)\n    die = Pmf(1/sides, outcomes)\n    return die \n```", "```py\ndie = make_die(6) \n```", "```py\nfrom utils import decorate\n\ndie.bar(alpha=0.4)\ndecorate(xlabel='Outcome',\n         ylabel='PMF') \n```", "```py\ndef add_dist(pmf1, pmf2):\n  \"\"\"Compute the distribution of a sum.\"\"\"\n    res = Pmf()\n    for q1, p1 in pmf1.items():\n        for q2, p2 in pmf2.items():\n            q = q1 + q2\n            p = p1 * p2\n            res[q] = res(q) + p\n    return res \n```", "```py\n res[q] = res(q) + p \n```", "```py\ntwice = die.add_dist(die) \n```", "```py\ntwice = Pmf.add_dist(die, die) \n```", "```py\nfrom utils import decorate\n\ndef decorate_dice(title=''):\n    decorate(xlabel='Outcome',\n             ylabel='PMF',\n             title=title) \n```", "```py\ntwice = add_dist(die, die)\ntwice.bar(color='C1', alpha=0.5)\ndecorate_dice() \n```", "```py\ndef add_dist_seq(seq):\n  \"\"\"Compute Pmf of the sum of values from seq.\"\"\"\n    total = seq[0]\n    for other in seq[1:]:\n        total = total.add_dist(other)\n    return total \n```", "```py\ndice = [die] * 3 \n```", "```py\nthrice = add_dist_seq(dice) \n```", "```py\nimport matplotlib.pyplot as plt\n\ndie.plot(label='once')\ntwice.plot(label='twice', ls='--')\nthrice.plot(label='thrice', ls=':')\n\nplt.xticks([0,3,6,9,12,15,18])\ndecorate_dice(title='Distributions of sums') \n```", "```py\nn = 35\nnum_sensitive = 10\nnum_insensitive = n - num_sensitive \n```", "```py\nfrom utils import make_binomial\n\ndist_sensitive = make_binomial(num_sensitive, 0.95)\ndist_insensitive = make_binomial(num_insensitive, 0.40) \n```", "```py\ndist_total = Pmf.add_dist(dist_sensitive, dist_insensitive) \n```", "```py\ndist_sensitive.plot(label='sensitive', ls=':')\ndist_insensitive.plot(label='insensitive', ls='--')\ndist_total.plot(label='total')\n\ndecorate(xlabel='Number of correct identifications',\n         ylabel='PMF',\n         title='Gluten sensitivity') \n```", "```py\nimport pandas as pd\n\ntable = pd.DataFrame()\nfor num_sensitive in range(0, n+1):\n    num_insensitive = n - num_sensitive\n    dist_sensitive = make_binomial(num_sensitive, 0.95)\n    dist_insensitive = make_binomial(num_insensitive, 0.4)\n    dist_total = Pmf.add_dist(dist_sensitive, dist_insensitive)    \n    table[num_sensitive] = dist_total \n```", "```py\ntable.head(3) \n```", "```py\ntable[0].plot(label='num_sensitive = 0')\ntable[10].plot(label='num_sensitive = 10')\ntable[20].plot(label='num_sensitive = 20', ls='--')\ntable[30].plot(label='num_sensitive = 30', ls=':')\n\ndecorate(xlabel='Number of correct identifications',\n         ylabel='PMF',\n         title='Gluten sensitivity') \n```", "```py\nlikelihood1 = table.loc[12] \n```", "```py\nhypos = np.arange(n+1)\nprior = Pmf(1, hypos) \n```", "```py\nposterior1 = prior * likelihood1\nposterior1.normalize() \n```", "```py\n0.4754741648615131 \n```", "```py\nlikelihood2 = table.loc[20]\nposterior2 = prior * likelihood2\nposterior2.normalize() \n```", "```py\n1.7818649765887378 \n```", "```py\nposterior1.plot(label='posterior with 12 correct', color='C4')\nposterior2.plot(label='posterior with 20 correct', color='C1')\n\ndecorate(xlabel='Number of sensitive subjects',\n         ylabel='PMF',\n         title='Posterior distributions') \n```", "```py\nposterior1.max_prob() \n```", "```py\n0 \n```", "```py\nposterior2.max_prob() \n```", "```py\n11 \n```", "```py\n# Solution\n\nprior_odds = odds(1/3) \n```", "```py\n# Solution\n\npost_odds = prior_odds * 2 * 1.25 \n```", "```py\n# Solution\n\nprob(post_odds) \n```", "```py\n0.5555555555555555 \n```", "```py\n# Solution\n\nprior_odds = odds(0.1) \n```", "```py\n# Solution\n\npost_odds = prior_odds * 2 * 2 * 2 \n```", "```py\n# Solution\n\nprob(post_odds) \n```", "```py\n0.4705882352941177 \n```", "```py\n# Solution\n\nprior_odds = odds(0.14) \n```", "```py\n# Solution\n\npost_odds = prior_odds * 25 \n```", "```py\n# Solution\n\nprob(post_odds) \n```", "```py\n0.8027522935779816 \n```", "```py\n# Solution\n\nd6 = make_die(6) \n```", "```py\n# Solution\n# The amount the goblin started with is the sum of two d6\nhp_before = Pmf.add_dist(d6, d6) \n```", "```py\n# Solution\n# Here's the number of hit points after the first attack\nhp_after = Pmf.sub_dist(hp_before, 3)\nhp_after \n```", "```py\n# Solution\n# But -1 and 0 are not possible, because in that case the goblin would be defeated.\n# So we have to zero them out and renormalize\nhp_after[[-1, 0]] = 0\nhp_after.normalize()\nhp_after \n```", "```py\n# Solution\n# The damage from the second attack is one d6\ndamage = d6 \n```", "```py\n# Solution\n# Here's what the distributions look like\nhp_after.bar(label='Hit points')\ndamage.plot(label='Damage', color='C1')\ndecorate_dice('The Goblin Problem') \n```", "```py\n# Solution\n\n# Here's the distribution of points the goblin has left\npoints_left = Pmf.sub_dist(hp_after, damage) \n```", "```py\n# Solution\n\n# And here's the probability the goblin is dead\npoints_left.prob_le(0) \n```", "```py\n0.4545454545454545 \n```", "```py\n# Solution\n\nhypos = [6, 8, 12]\nprior = Pmf(1, hypos) \n```", "```py\n# Solution\n\n# Here's the distribution of the product for the 4-sided die\n\nd4 = make_die(4)\nPmf.mul_dist(d4, d4) \n```", "```py\n# Solution\n\n# Here's the likelihood of getting a 12 for each die\nlikelihood = []\n\nfor sides in hypos:\n    die = make_die(sides)\n    pmf = Pmf.mul_dist(die, die)\n    likelihood.append(pmf[12])\n\nlikelihood \n```", "```py\n[0.1111111111111111, 0.0625, 0.041666666666666664] \n```", "```py\n# Solution\n\n# And here's the update\nposterior = prior * likelihood\nposterior.normalize()\nposterior \n```", "```py\n# Solution\n\ndie = Pmf(1/3, [0,1,2])\ndie \n```", "```py\n# Solution\n\npmfs = {}\npmfs['Bellows'] = add_dist_seq([die]*3)\npmfs['Zostra'] = add_dist_seq([die]*4)\npmfs['Longfellow'] = add_dist_seq([die]*5) \n```", "```py\n# Solution\n\npmfs['Zostra'](4) \n```", "```py\n0.2345679012345679 \n```", "```py\n# Solution\n\npmfs['Zostra']([3,4,5]).prod() \n```", "```py\n0.00915247412224499 \n```", "```py\n# Solution\n\nhypos = pmfs.keys()\nprior = Pmf(1/3, hypos)\nprior \n```", "```py\n# Solution\n\nlikelihood = prior.copy()\n\nfor hypo in hypos:\n    likelihood[hypo] = pmfs[hypo]([3,4,5]).prod()\n\nlikelihood \n```", "```py\n# Solution\n\nposterior = (prior * likelihood)\nposterior.normalize()\nposterior \n```", "```py\n# Solution\n\nn = 538\n\nns = range(0, n+1)\ntable = pd.DataFrame(index=ns, columns=ns, dtype=float)\n\nfor n_honest in ns:\n    n_dishonest = n - n_honest\n\n    dist_honest = make_binomial(n_honest, 0.5)\n    dist_dishonest = make_binomial(n_dishonest, 0.9)\n    dist_total = Pmf.add_dist(dist_honest, dist_dishonest)    \n    table[n_honest] = dist_total\n\ntable.shape \n```", "```py\n(539, 539) \n```", "```py\n# Solution\n\ndata = 312\nlikelihood = table.loc[312]\nlen(likelihood) \n```", "```py\n539 \n```", "```py\n# Solution\n\nhypos = np.arange(n+1)\nprior = Pmf(1, hypos)\nlen(prior) \n```", "```py\n539 \n```", "```py\n# Solution\n\nposterior = prior * likelihood\nposterior.normalize()\nposterior.mean() \n```", "```py\n431.4882114501996 \n```", "```py\n# Solution\n\nposterior.plot(label='posterior')\ndecorate(xlabel='Number of honest members of Congress',\n         ylabel='PMF') \n```", "```py\n# Solution\n\nposterior.max_prob() \n```", "```py\n430 \n```", "```py\n# Solution\n\nposterior.credible_interval(0.9) \n```", "```py\narray([388., 477.]) \n```"]