- en: Conjugate Priors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://allendowney.github.io/ThinkBayes2/chap18.html](https://allendowney.github.io/ThinkBayes2/chap18.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the previous chapters we have used grid approximations to solve a variety
    of problems. One of my goals has been to show that this approach is sufficient
    to solve many real-world problems. And I think it’s a good place to start because
    it shows clearly how the methods work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: However, as we saw in the previous chapter, grid methods will only get you so
    far. As we increase the number of parameters, the number of points in the grid
    grows (literally) exponentially. With more than 3-4 parameters, grid methods become
    impractical.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the remaining three chapters, I will present three alternatives:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we’ll use **conjugate priors** to speed up some of the computations
    we’ve already done.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next chapter, I’ll present Markov chain Monte Carlo (MCMC) methods, which
    can solve problems with tens of parameters, or even hundreds, in a reasonable
    amount of time.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And in the last chapter we’ll use Approximate Bayesian Computation (ABC) for
    problems that are hard to model with simple distributions.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll start with the World Cup problem.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The World Cup Problem Revisited
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In <<_PoissonProcesses>>, we solved the World Cup problem using a Poisson process
    to model goals in a soccer game as random events that are equally likely to occur
    at any point during a game.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: We used a gamma distribution to represent the prior distribution of \(\lambda\),
    the goal-scoring rate. And we used a Poisson distribution to compute the probability
    of \(k\), the number of goals scored.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a gamma object that represents the prior distribution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And here’s a grid approximation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here’s the likelihood of scoring 4 goals for each possible value of `lam`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And here’s the update.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So far, this should be familiar. Now we’ll solve the same problem using the
    conjugate prior.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The Conjugate Prior
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In <<_TheGammaDistribution>>, I presented three reasons to use a gamma distribution
    for the prior and said there was a fourth reason I would reveal later. Well, now
    is the time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The other reason I chose the gamma distribution is that it is the “conjugate
    prior” of the Poisson distribution, so-called because the two distributions are
    connected or coupled, which is what “conjugate” means.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: In the next section I’ll explain *how* they are connected, but first I’ll show
    you the consequence of this connection, which is that there is a remarkably simple
    way to compute the posterior distribution.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: However, in order to demonstrate it, we have to switch from the one-parameter
    version of the gamma distribution to the two-parameter version. Since the first
    parameter is called `alpha`, you might guess that the second parameter is called
    `beta`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The following function takes `alpha` and `beta` and makes an object that represents
    a gamma distribution with those parameters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here’s the prior distribution with `alpha=1.4` again and `beta=1`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now I claim without proof that we can do a Bayesian update with `k` goals just
    by making a gamma distribution with parameters `alpha+k` and `beta+1`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here’s how we update it with `k=4` goals in `t=1` game.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After all the work we did with the grid, it might seem absurd that we can do
    a Bayesian update by adding two pairs of numbers. So let’s confirm that it works.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: I’ll make a `Pmf` with a discrete approximation of the posterior distribution.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The following figure shows the result along with the posterior we computed using
    the grid algorithm.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell source Hide code cell source</summary>'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]</details> ![_images/39ff697e7662f79c15a8ae461ced3925ebe82de05318674e35232f7e65030af6.png](../Images/6eed57e32a4a8ae310cfa4205aaaacf9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: They are the same other than small differences due to floating-point approximations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]</details>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: What the Actual?
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand how that works, we’ll write the PDF of the gamma prior and the
    PMF of the Poisson likelihood, then multiply them together, because that’s what
    the Bayesian update does. We’ll see that the result is a gamma distribution, and
    we’ll derive its parameters.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the PDF of the gamma prior, which is the probability density for each
    value of \(\lambda\), given parameters \(\alpha\) and \(\beta\):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: \[\lambda^{\alpha-1} e^{-\lambda \beta}\]
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: I have omitted the normalizing factor; since we are planning to normalize the
    posterior distribution anyway, we don’t really need it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose a team scores \(k\) goals in \(t\) games. The probability of this
    data is given by the PMF of the Poisson distribution, which is a function of \(k\)
    with \(\lambda\) and \(t\) as parameters.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: \[\lambda^k e^{-\lambda t}\]
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Again, I have omitted the normalizing factor, which makes it clearer that the
    gamma and Poisson distributions have the same functional form. When we multiply
    them together, we can pair up the factors and add up the exponents. The result
    is the unnormalized posterior distribution,
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: \[\lambda^{\alpha-1+k} e^{-\lambda(\beta + t)}\]
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: which we can recognize as an unnormalized gamma distribution with parameters
    \(\alpha + k\) and \(\beta + t\).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'This derivation provides insight into what the parameters of the posterior
    distribution mean: \(\alpha\) reflects the number of events that have occurred;
    \(\beta\) reflects the elapsed time.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Binomial Likelihood
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a second example, let’s look again at the Euro problem. When we solved it
    with a grid algorithm, we started with a uniform prior:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We used the binomial distribution to compute the likelihood of the data, which
    was 140 heads out of 250 attempts.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then we computed the posterior distribution in the usual way.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <details class="hide below-input"><summary aria-label="Toggle hidden content">Show
    code cell output Hide code cell output</summary>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]</details>'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: We can solve this problem more efficiently using the conjugate prior of the
    binomial distribution, which is the beta distribution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The beta distribution is bounded between 0 and 1, so it works well for representing
    the distribution of a probability like `x`. It has two parameters, called `alpha`
    and `beta`, that determine the shape of the distribution.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: SciPy provides an object called `beta` that represents a beta distribution.
    The following function takes `alpha` and `beta` and returns a new `beta` object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It turns out that the uniform distribution, which we used as a prior, is the
    beta distribution with parameters `alpha=1` and `beta=1`. So we can make a `beta`
    object that represents a uniform distribution, like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now let’s figure out how to do the update. As in the previous example, we’ll
    write the PDF of the prior distribution and the PMF of the likelihood function,
    and multiply them together. We’ll see that the product has the same form as the
    prior, and we’ll derive its parameters.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Here is the PDF of the beta distribution, which is a function of \(x\) with
    \(\alpha\) and \(\beta\) as parameters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: \[x^{\alpha-1} (1-x)^{\beta-1}\]
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Again, I have omitted the normalizing factor, which we don’t need because we
    are going to normalize the distribution after the update.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: And here’s the PMF of the binomial distribution, which is a function of \(k\)
    with \(n\) and \(x\) as parameters.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: \[x^{k} (1-x)^{n-k}\]
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Again, I have omitted the normalizing factor. Now when we multiply the beta
    prior and the binomial likelihood, the result is
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: \[x^{\alpha-1+k} (1-x)^{\beta-1+n-k}\]
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: which we recognize as an unnormalized beta distribution with parameters \(\alpha+k\)
    and \(\beta+n-k\).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'So if we observe `k` successes in `n` trials, we can do the update by making
    a beta distribution with parameters `alpha+k` and `beta+n-k`. That’s what this
    function does:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Again, the conjugate prior gives us insight into the meaning of the parameters;
    \(\alpha\) is related to the number of observed successes; \(\beta\) is related
    to the number of failures.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how we do the update with the observed data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To confirm that it works, I’ll evaluate the posterior distribution for the possible
    values of `xs` and put the results in a `Pmf`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: And we can compare the posterior distribution we just computed with the results
    from the grid algorithm.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell source Hide code cell source</summary>'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]</details> ![_images/6690cfacd465eb40d9ec441a2922b3fdf2f2f9656494ba5973edb6e05280cb97.png](../Images/abc447a9fedcb77f484b279731c683b2.png)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: They are the same other than small differences due to floating-point approximations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: The examples so far are problems we have already solved, so let’s try something
    new.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]</details>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Lions and Tigers and Bears
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we visit a wild animal preserve where we know that the only animals
    are lions and tigers and bears, but we don’t know how many of each there are.
    During the tour, we see 3 lions, 2 tigers, and one bear. Assuming that every animal
    had an equal chance to appear in our sample, what is the probability that the
    next animal we see is a bear?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: To answer this question, we’ll use the data to estimate the prevalence of each
    species, that is, what fraction of the animals belong to each species. If we know
    the prevalences, we can use the multinomial distribution to compute the probability
    of the data. For example, suppose we know that the fraction of lions, tigers,
    and bears is 0.4, 0.3, and 0.3, respectively.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'In that case the probability of the data is:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, we could choose a prior for the prevalences and do a Bayesian update using
    the multinomial distribution to compute the probability of the data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'But there’s an easier way, because the multinomial distribution has a conjugate
    prior: the Dirichlet distribution.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The Dirichlet Distribution
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dirichlet distribution is a multivariate distribution, like the multivariate
    normal distribution we used in <<_MultivariateNormalDistribution>> to describe
    the distribution of penguin measurements.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: In that example, the quantities in the distribution are pairs of flipper length
    and culmen length, and the parameters of the distribution are a vector of means
    and a matrix of covariances.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: In a Dirichlet distribution, the quantities are vectors of probabilities, \(\mathbf{x}\),
    and the parameter is a vector, \(\mathbf{\alpha}\).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: An example will make that clearer. SciPy provides a `dirichlet` object that
    represents a Dirichlet distribution. Here’s an instance with \(\mathbf{\alpha}
    = 1, 2, 3\).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Since we provided three parameters, the result is a distribution of three variables.
    If we draw a random value from this distribution, like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]</details>'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: The result is an array of three values. They are bounded between 0 and 1, and
    they always add up to 1, so they can be interpreted as the probabilities of a
    set of outcomes that are mutually exclusive and collectively exhaustive.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what the distributions of these values look like. I’ll draw 1000
    random vectors from this distribution, like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]</details>'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The result is an array with 1000 rows and three columns. I’ll compute the `Cdf`
    of the values in each column.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The result is a list of `Cdf` objects that represent the marginal distributions
    of the three variables. Here’s what they look like.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]</details> ![_images/38e3455314147946835c8800653dfd01a9f1c97c9b568a01c8e33c8802a29287.png](../Images/9936b94966fbbbda87abcfe0339c0257.png)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Column 0, which corresponds to the lowest parameter, contains the lowest probabilities.
    Column 2, which corresponds to the highest parameter, contains the highest probabilities.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'As it turns out, these marginal distributions are beta distributions. The following
    function takes a sequence of parameters, `alpha`, and computes the marginal distribution
    of variable `i`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We can use it to compute the marginal distribution for the three variables.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The following plot shows the CDF of these distributions as gray lines and compares
    them to the CDFs of the samples.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell source Hide code cell source</summary>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]</details> ![_images/d2b045b7f54a65ceb60914590d7732e667f5f95b187400fa17363aed09dfab01.png](../Images/f50fbf1c81705f94c9ff9b1e33a4d90c.png)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: This confirms that the marginals of the Dirichlet distribution are beta distributions.
    And that’s useful because the Dirichlet distribution is the conjugate prior for
    the multinomial likelihood function.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: If the prior distribution is Dirichlet with parameter vector `alpha` and the
    data is a vector of observations, `data`, the posterior distribution is Dirichlet
    with parameter vector `alpha + data`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise at the end of this chapter, you can use this method to solve
    the Lions and Tigers and Bears problem.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After reading this chapter, if you feel like you’ve been tricked, I understand.
    It turns out that many of the problems in this book can be solved with just a
    few arithmetic operations. So why did we go to all the trouble of using grid algorithms?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, there are only a few problems we can solve with conjugate priors; in
    fact, this chapter includes most of the ones that are useful in practice.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: For the vast majority of problems, there is no conjugate prior and no shortcut
    to compute the posterior distribution. That’s why we need grid algorithms and
    the methods in the next two chapters, Approximate Bayesian Computation (ABC) and
    Markov chain Monte Carlo methods (MCMC).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Exercise:** In the second version of the World Cup problem, the data we use
    for the update is not the number of goals in a game, but the time until the first
    goal. So the probability of the data is given by the exponential distribution
    rather than the Poisson distribution.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: But it turns out that the gamma distribution is *also* the conjugate prior of
    the exponential distribution, so there is a simple way to compute this update,
    too. The PDF of the exponential distribution is a function of \(t\) with \(\lambda\)
    as a parameter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: \[\lambda e^{-\lambda t}\]
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Multiply the PDF of the gamma prior by this likelihood, confirm that the result
    is an unnormalized gamma distribution, and see if you can derive its parameters.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Write a few lines of code to update `prior_gamma` with the data from this version
    of the problem, which was a first goal after 11 minutes and a second goal after
    an additional 12 minutes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Remember to express these quantities in units of games, which are approximately
    90 minutes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![_images/4b02d1d83de1cd604d399109a433c3edb273cfc7a8407045a8aade575d235c6e.png](../Images/4d92153053608fe4987f356fc8345b6d.png)</details>'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** For problems like the Euro problem where the likelihood function
    is binomial, we can do a Bayesian update with just a few arithmetic operations,
    but only if the prior is a beta distribution.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: If we want a uniform prior, we can use a beta distribution with `alpha=1` and
    `beta=1`. But what can we do if the prior distribution we want is not a beta distribution?
    For example, in <<_TrianglePrior>> we also solved the Euro problem with a triangle
    prior, which is not a beta distribution.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: In these cases, we can often find a beta distribution that is a good-enough
    approximation for the prior we want. See if you can find a beta distribution that
    fits the triangle prior, then update it using `update_beta`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Use `pmf_from_dist` to make a `Pmf` that approximates the posterior distribution
    and compare it to the posterior we just computed using a grid algorithm. How big
    is the largest difference between them?
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the triangle prior again.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]</details>'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: And here’s the update.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]</details>'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: To get you started, here’s the beta distribution that we used as a uniform prior.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]</details>'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: And here’s what it looks like compared to the triangle prior.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '![_images/8a092622087a81b63220299ed339ad33e748615fdf8b8c669f8a3a99a5c416f1.png](../Images/73af9d0e16a3a3a26f30c218b855c169.png)</details>'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Now you take it from there.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '![_images/c876c409c11dd54ba4da7d89608ab9129059f96d92b73aa846a81dcf77d3d82c.png](../Images/70a181595d707f471e4b328a30987f04.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]</details>'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** [3Blue1Brown](https://en.wikipedia.org/wiki/3Blue1Brown) is a
    YouTube channel about math; if you are not already aware of it, I recommend it
    highly. In [this video](https://www.youtube.com/watch?v=8idr1WZ1A7Q) the narrator
    presents this problem:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: You are buying a product online and you see three sellers offering the same
    product at the same price. One of them has a 100% positive rating, but with only
    10 reviews. Another has a 96% positive rating with 50 total reviews. And yet another
    has a 93% positive rating, but with 200 total reviews.
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-189
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Which one should you buy from?
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s think about how to model this scenario. Suppose each seller has some unknown
    probability, `x`, of providing satisfactory service and getting a positive rating,
    and we want to choose the seller with the highest value of `x`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: This is not the only model for this scenario, and it is not necessarily the
    best. An alternative would be something like item response theory, where sellers
    have varying ability to provide satisfactory service and customers have varying
    difficulty of being satisfied.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: But the first model has the virtue of simplicity, so let’s see where it gets
    us.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: As a prior, I suggest a beta distribution with `alpha=8` and `beta=2`. What
    does this prior look like and what does it imply about sellers?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the data to update the prior for the three sellers and plot the posterior
    distributions. Which seller has the highest posterior mean?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How confident should we be about our choice? That is, what is the probability
    that the seller with the highest posterior mean actually has the highest value
    of `x`?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider a beta prior with `alpha=0.7` and `beta=0.5`. What does this prior
    look like and what does it imply about sellers?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the analysis again with this prior and see what effect it has on the results.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note: When you evaluate the beta distribution, you should restrict the range
    of `xs` so it does not include 0 and 1\. When the parameters of the beta distribution
    are less than 1, the probability density goes to infinity at 0 and 1\. From a
    mathematical point of view, that’s not a problem; it is still a proper probability
    distribution. But from a computational point of view, it means we have to avoid
    evaluating the PDF at 0 and 1.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '![_images/10f1e732645ad625d44851743d4fe343a94841acc5b05777fdb17545b3e088be.png](../Images/3467044fe4b8f6bbd9e4caaca9246e97.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '![_images/287d7bc9e8018421486a23dfd8721014d0c702fff0d03d83edec1951ee90458a.png](../Images/b9e1eb89662d72d4365e5ef48b669c68.png)</details><details
    class="hide above-input"><summary aria-label="Toggle hidden content">Show code
    cell content Hide code cell content</summary>'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '|  | probs |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0.2948 |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0.4750 |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.2302 |</details>'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise:** Use a Dirichlet prior with parameter vector `alpha = [1, 1, 1]`
    to solve the Lions and Tigers and Bears problem:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we visit a wild animal preserve where we know that the only animals
    are lions and tigers and bears, but we don’t know how many of each there are.
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: During the tour, we see three lions, two tigers, and one bear. Assuming that
    every animal had an equal chance to appear in our sample, estimate the prevalence
    of each species.
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is the probability that the next animal we see is a bear?
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <details class="hide above-input"><summary aria-label="Toggle hidden content">Show
    code cell content Hide code cell content</summary>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE73]</details> <details class="hide above-input"><summary aria-label="切换隐藏内容">显示代码单元格内容
    隐藏代码单元格内容</summary>'
- en: '[PRE74]</details> <details class="hide above-input"><summary aria-label="Toggle
    hidden content">Show code cell content Hide code cell content</summary>'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE74]</details> <details class="hide above-input"><summary aria-label="切换隐藏内容">显示代码单元格内容
    隐藏代码单元格内容</summary>'
- en: '[PRE75]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '|  | prob |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '|  | 概率 |'
- en: '| --- | --- |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| lion | 0.444444 |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 狮子 | 0.444444 |'
- en: '| tiger | 0.333333 |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 老虎 | 0.333333 |'
- en: '| bear | 0.222222 |</details>'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '| 熊 | 0.222222 |</details>'
