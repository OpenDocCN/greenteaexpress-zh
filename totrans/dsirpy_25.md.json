["```py\nimport networkx as nx\n\nG = nx.watts_strogatz_graph(n=10, k=3, p=0)\nG.nodes() \n```", "```py\nNodeView((0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) \n```", "```py\ndef draw_graph(G):\n    nx.draw_circular(G, node_size=1000, with_labels=True) \n```", "```py\ndraw_graph(G) \n```", "```py\ndef reachable_nodes(G, start):\n    seen = set()\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in seen:\n            seen.add(node)\n            stack.extend(G[node])\n    return seen \n```", "```py\nreachable_nodes(G, 0) \n```", "```py\n{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} \n```", "```py\nreachable_nodes_bfs(G, 0) \n```", "```py\n{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} \n```", "```py\ndef plain_bfs(G, start):\n    seen = set()\n    nextlevel = {start}\n    while nextlevel:\n        thislevel = nextlevel\n        nextlevel = set()\n        for v in thislevel:\n            if v not in seen:\n                seen.add(v)\n                nextlevel.update(G[v])\n    return seen \n```", "```py\nG = nx.watts_strogatz_graph(1000, 10, 0.01) \n```", "```py\n%timeit reachable_nodes_bfs(G, 0) \n```", "```py\n1.52 ms \u00b1 7.91 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) \n```", "```py\n%timeit plain_bfs(G, 0) \n```", "```py\n946 \u00b5s \u00b1 6.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) \n```", "```py\nG = nx.watts_strogatz_graph(10, 4, 0) \n```", "```py\ndraw_graph(G) \n```", "```py\nshortest_path_dijkstra(G, 0) \n```", "```py\n{0: 0, 8: 1, 1: 1, 2: 1, 9: 1, 6: 2, 7: 2, 3: 2, 4: 2, 5: 3} \n```", "```py\nG = nx.watts_strogatz_graph(1000, 10, 0)\nd1 = shortest_path_dijkstra(G, 0)\nd2 = plain_shortest_path(G, 0)\nd1 == d2 \n```", "```py\nTrue \n```", "```py\n%timeit shortest_path_dijkstra(G, 0) \n```", "```py\n1.3 ms \u00b1 12.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) \n```", "```py\n%timeit plain_shortest_path(G, 0) \n```", "```py\n955 \u00b5s \u00b1 11.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) \n```", "```py\n%timeit nx.shortest_path_length(G, 0) \n```", "```py\n778 \u00b5s \u00b1 9.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each) \n```", "```py\nG = nx.watts_strogatz_graph(10, 4, 0)\nnx.average_shortest_path_length(G) \n```", "```py\n1.6666666666666667 \n```", "```py\nG = nx.watts_strogatz_graph(1000, 10, 0)\nnx.average_shortest_path_length(G) \n```", "```py\n50.450450450450454 \n```", "```py\nimport numpy as np\n\nps = np.logspace(-4, 0, 9)\nprint(ps) \n```", "```py\n[1.00000000e-04 3.16227766e-04 1.00000000e-03 3.16227766e-03\n 1.00000000e-02 3.16227766e-02 1.00000000e-01 3.16227766e-01\n 1.00000000e+00] \n```", "```py\nlengths = []\n\nn = 1000\nk = 10\nfor p in ps:\n    print(p)\n    G = nx.watts_strogatz_graph(n, k, p)    \n    aspl = nx.average_shortest_path_length(G)\n    lengths.append(aspl) \n```", "```py\n0.0001\n0.00031622776601683794\n0.001\n0.0031622776601683794\n0.01\n0.03162277660168379\n0.1\n0.31622776601683794\n1.0 \n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.plot(ps, lengths, 'o-', linewidth=1, label='L(p)')\nplt.xlabel('Rewiring probability (p)') \nplt.xscale('log')\nplt.ylim([0, max(lengths)+3])\nplt.title('Average path length'); \n```"]