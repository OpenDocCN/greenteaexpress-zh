["```py\nn_control = 21885\nn_treatment = 21911 \n```", "```py\nk_control = 352\nk_treatment = 116 \n```", "```py\nrisk_control = k_control / n_control * 1000\nrisk_control \n```", "```py\n16.084075851039522 \n```", "```py\nrisk_treatment = k_treatment / n_treatment * 1000\nrisk_treatment \n```", "```py\n5.294144493633334 \n```", "```py\nrelative_risk = risk_treatment / risk_control\nrelative_risk \n```", "```py\n0.3291544097817203 \n```", "```py\nefficacy = 1 - relative_risk\nefficacy \n```", "```py\n0.6708455902182797 \n```", "```py\nn_treatment, k_treatment, risk_treatment \n```", "```py\n(21911, 116, 5.294144493633334) \n```", "```py\n(k_treatment + 10) / n_treatment * 1000, (k_treatment - 10) / n_treatment * 1000 \n```", "```py\n(5.750536260325863, 4.837752726940806) \n```", "```py\nimport numpy as np\n\ndef simulate_group(n, p):\n    xs = np.random.random(size=n)\n    k = np.sum(xs < p)\n    return k / n * 1000 \n```", "```py\np = k_treatment / n_treatment\nsimulate_group(n_treatment, p) \n```", "```py\n4.609556843594541 \n```", "```py\nt = [simulate_group(n_treatment, p)\n     for i in range(1000)] \n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.kdeplot(t, label='control')\n\nplt.xlabel('Risk of disease (cases per 1000)')\nplt.ylabel('Probability density')\nplt.title('Estimated Risks from Simulation'); \n```", "```py\nnp.mean(t), risk_treatment \n```", "```py\n(5.299210442243623, 5.294144493633334) \n```", "```py\nstandard_error = np.std(t)\nstandard_error \n```", "```py\n0.48944411243624414 \n```", "```py\nconfidence_interval = np.percentile(t, [5, 95])\nconfidence_interval \n```", "```py\narray([4.47263931, 6.11793163]) \n```", "```py\ndef simulate_trial(n1, p1, n2, p2):\n    risk1 = simulate_group(n1, p1)\n    risk2 = simulate_group(n2, p2)\n    efficacy = 1 - risk2 / risk1\n    return efficacy \n```", "```py\np1 = k_control / n_control\np2 = k_treatment / n_treatment\nsimulate_trial(n_control, p1, n_treatment, p2) \n```", "```py\n0.6891301291299345 \n```", "```py\nt2 = [simulate_trial(n_control, p1, n_treatment, p2)\n      for i in range(1000)] \n```", "```py\nsns.kdeplot(t2)\n\nplt.xlabel('Efficacy')\nplt.ylabel('Probability density')\nplt.title('Estimated Efficacy from Simulation'); \n```", "```py\nnp.mean(t2), efficacy \n```", "```py\n(0.6713727268668117, 0.6708455902182797) \n```", "```py\nnp.std(t2) \n```", "```py\n0.035068503707114076 \n```", "```py\nnp.percentile(t2, [5, 95]) \n```", "```py\narray([0.61344412, 0.72785182]) \n```", "```py\ndef simulate_sample_mean(n, mu, sigma):\n    sample = np.random.normal(mu, sigma, size=n)\n    return sample.mean() \n```", "```py\nn_height = 103\nmean_height = 178\nstd_height = 7.97\n\nsimulate_sample_mean(n_height, mean_height, std_height) \n```", "```py\n178.64931744931997 \n```", "```py\nt3 = [simulate_sample_mean(n_height, mean_height, std_height)\n      for i in range(1000)] \n```", "```py\nsns.kdeplot(t3)\n\nplt.xlabel('Average height (cm)')\nplt.ylabel('Probability density')\nplt.title('Sampling Distribution of the Mean'); \n```", "```py\nnp.mean(t3), mean_height \n```", "```py\n(177.96271260304573, 178) \n```", "```py\nnp.std(t3) \n```", "```py\n0.7646185415617497 \n```", "```py\nnp.percentile(t3, [5, 95]) \n```", "```py\narray([176.7094124 , 179.22734483]) \n```", "```py\ndef simulate_variable_group(n, p):\n    ps = np.random.uniform(0, 2*p, size=n)\n    xs = np.random.random(size=n)\n    k = np.sum(xs < ps)\n    return k / n * 1000 \n```", "```py\np = k_treatment / n_treatment\nsimulate_variable_group(n_treatment, p) \n```", "```py\n5.339783670302587 \n```", "```py\ndef simulate_variable_trial(n1, p1, n2, p2):\n    risk1 = simulate_variable_group(n1, p1)\n    risk2 = simulate_variable_group(n2, p2)\n    efficacy = 1 - risk2 / risk1\n    return efficacy \n```", "```py\ncv = std_height / mean_height\ncv \n```", "```py\n0.044775280898876405 \n```", "```py\ndef simulate_sample_cv(n, mu, sigma):\n    sample = np.random.normal(mu, sigma, size=n)\n    return sample.std() / sample.mean() \n```", "```py\nimport pandas as pd\n\ngss = pd.read_hdf('gss_eda.hdf', 'gss') \n```", "```py\ngss['GUNLAW'].replace(2, 0, inplace=True)\ngss['GUNLAW'].value_counts() \n```", "```py\n1.0    32038\n0.0     9975\nName: GUNLAW, dtype: int64 \n```", "```py\ngrouped = gss.groupby('YEAR')['GUNLAW']\nagg = grouped.agg(['sum', 'count'])\nagg.head() \n```", "```py\nzero = (agg['count'] == 0)\nlabels = agg.index[zero]\nagg.drop(labels, inplace=True) \n```", "```py\npercent = agg['sum'] / agg['count'] * 100\npercent.plot(style='o')\n\nplt.xlabel('Year of survey')\nplt.ylabel('Percent in favor')\nplt.title('Support for gun control over time'); \n```", "```py\nfor year, k, n in agg.itertuples():\n    print(year, k, n) \n```", "```py\ndef simulate_group_percent(n, p):\n    xs = np.random.random(size=n)\n    k = np.sum(xs < p)\n    return k / n * 100 \n```"]