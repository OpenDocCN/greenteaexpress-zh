["```py\ndef EvalNormalCdfInverse(p, mu=0, sigma=1):\n    return scipy.stats.norm.ppf(p, loc=mu, scale=sigma) \n```", "```py\n>>> thinkstats2.EvalNormalCdfInverse(0.05, mu=90, sigma=2.5)\n85.888\n\n>>> thinkstats2.EvalNormalCdfInverse(0.95, mu=90, sigma=2.5)\n94.112 \n```", "```py\nclass Normal(object):\n\n    def __init__(self, mu, sigma2):\n        self.mu = mu\n        self.sigma2 = sigma2\n\n    def __str__(self):\n        return 'N(%g, %g)' % (self.mu, self.sigma2) \n```", "```py\n>>> dist = Normal(90, 7.5**2)\n>>> dist\nN(90, 56.25) \n```", "```py\n def Sum(self, n):\n        return Normal(n * self.mu, n * self.sigma2) \n```", "```py\n def __mul__(self, factor):\n        return Normal(factor * self.mu, factor**2 * self.sigma2)\n\n    def __div__(self, divisor):\n        return 1 / divisor * self \n```", "```py\n>>> dist_xbar = dist.Sum(9) / 9\n>>> dist_xbar.sigma\n2.5 \n```", "```py\n>>> dist_xbar.Percentile(5), dist_xbar.Percentile(95)\n85.888 94.113 \n```", "```py\ndef MakeExpoSamples(beta=2.0, iters=1000):\n    samples = []\n    for n in [1, 10, 100]:\n        sample = [np.sum(np.random.exponential(beta, n))\n                  for _ in range(iters)]\n        samples.append((n, sample))\n    return samples \n```", "```py\ndef NormalPlotSamples(samples, plot=1, ylabel=''):\n    for n, sample in samples:\n        thinkplot.SubPlot(plot)\n        thinkstats2.NormalProbabilityPlot(sample)\n\n        thinkplot.Config(title='n=%d' % n, ylabel=ylabel)\n        plot += 1 \n```", "```py\ndef GenerateCorrelated(rho, n):\n    x = random.gauss(0, 1)\n    yield x\n\n    sigma = math.sqrt(1 - rho**2)\n    for _ in range(n-1):\n        x = random.gauss(x*rho, sigma)\n        yield x \n```", "```py\ndef GenerateExpoCorrelated(rho, n):\n    normal = list(GenerateCorrelated(rho, n))\n    uniform = scipy.stats.norm.cdf(normal)\n    expo = scipy.stats.expon.ppf(uniform)\n    return expo \n```", "```py\n>>> live, firsts, others = first.MakeFrames()\n>>> delta = firsts.prglngth.mean() - others.prglngth.mean()\n0.078 \n```", "```py\n dist1 = SamplingDistMean(live.prglngth, len(firsts))\n    dist2 = SamplingDistMean(live.prglngth, len(others)) \n```", "```py\ndef SamplingDistMean(data, n):\n    mean, var = data.mean(), data.var()\n    dist = Normal(mean, var)\n    return dist.Sum(n) / n \n```", "```py\n def __sub__(self, other):\n        return Normal(self.mu - other.mu,\n                      self.sigma2 + other.sigma2) \n```", "```py\n>>> dist = dist1 - dist2\nN(0, 0.0032) \n```", "```py\n>>> 1 - dist.Prob(delta)\n0.084 \n```", "```py\n>>> dist.Prob(-delta)\n0.084 \n```", "```py\ndef StudentCdf(n):\n    ts = np.linspace(-3, 3, 101)\n    ps = scipy.stats.t.cdf(ts, df=n-2)\n    rs = ts / np.sqrt(n - 2 + ts**2)\n    return thinkstats2.Cdf(rs, ps) \n```", "```py\n t = r * math.sqrt((n-2) / (1-r**2))\n    p_value = 1 - scipy.stats.t.cdf(t, df=n-2) \n```", "```py\ndef ChiSquaredCdf(n):\n    xs = np.linspace(0, 25, 101)\n    ps = scipy.stats.chi2.cdf(xs, df=n-1)\n    return thinkstats2.Cdf(xs, ps) \n```", "```py\n p_value = 1 - scipy.stats.chi2.cdf(chi2, df=n-1) \n```"]