["```py\n df = brfss.ReadBrfss(nrows=None)\n    sample = thinkstats2.SampleRows(df, 5000)\n    heights, weights = sample.htm3, sample.wtkg2 \n```", "```py\ndef SampleRows(df, nrows, replace=False):\n    indices = np.random.choice(df.index, nrows, replace=replace)\n    sample = df.loc[indices]\n    return sample \n```", "```py\n thinkplot.Scatter(heights, weights)\n    thinkplot.Show(xlabel='Height (cm)',\n                   ylabel='Weight (kg)',\n                   axis=[140, 210, 20, 200]) \n```", "```py\n heights = thinkstats2.Jitter(heights, 1.3)\n    weights = thinkstats2.Jitter(weights, 0.5) \n```", "```py\ndef Jitter(values, jitter=0.5):\n    n = len(values)\n    return np.random.uniform(-jitter, +jitter, n) + values \n```", "```py\n thinkplot.Scatter(heights, weights, alpha=0.2) \n```", "```py\n thinkplot.HexBin(heights, weights) \n```", "```py\n df = df.dropna(subset=['htm3', 'wtkg2'])\n    bins = np.arange(135, 210, 5)\n    indices = np.digitize(df.htm3, bins)\n    groups = df.groupby(indices) \n```", "```py\nfor i, group in groups:\n    print(i, len(group)) \n```", "```py\n heights = [group.htm3.mean() for i, group in groups]\n    cdfs = [thinkstats2.Cdf(group.wtkg2) for i, group in groups] \n```", "```py\n for percent in [75, 50, 25]:\n        weights = [cdf.Percentile(percent) for cdf in cdfs]\n        label = '%dth' % percent\n        thinkplot.Plot(heights, weights, label=label) \n```", "```py\ndef Cov(xs, ys, meanx=None, meany=None):\n    xs = np.asarray(xs)\n    ys = np.asarray(ys)\n\n    if meanx is None:\n        meanx = np.mean(xs)\n    if meany is None:\n        meany = np.mean(ys)\n\n    cov = np.dot(xs-meanx, ys-meany) / len(xs)\n    return cov \n```", "```py\ndef Corr(xs, ys):\n    xs = np.asarray(xs)\n    ys = np.asarray(ys)\n\n    meanx, varx = MeanVar(xs)\n    meany, vary = MeanVar(ys)\n\n    corr = Cov(xs, ys, meanx, meany) / math.sqrt(varx * vary)\n    return corr \n```", "```py\ndef SpearmanCorr(xs, ys):\n    xranks = pandas.Series(xs).rank()\n    yranks = pandas.Series(ys).rank()\n    return Corr(xranks, yranks) \n```", "```py\ndef SpearmanCorr(xs, ys):\n    xs = pandas.Series(xs)\n    ys = pandas.Series(ys)\n    return xs.corr(ys, method='spearman') \n```", "```py\n thinkstats2.Corr(df.htm3, np.log(df.wtkg2)) \n```"]