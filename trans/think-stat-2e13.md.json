["```py\n transactions = pandas.read_csv('mj-clean.csv', parse_dates=[5]) \n```", "```py\ndef GroupByQualityAndDay(transactions):\n    groups = transactions.groupby('quality')\n    dailies = {}\n    for name, group in groups:\n        dailies[name] = GroupByDay(group)\n\n    return dailies \n```", "```py\ndef GroupByDay(transactions, func=np.mean):\n    grouped = transactions[['date', 'ppg']].groupby('date')\n    daily = grouped.aggregate(func)\n\n    daily['date'] = daily.index\n    start = daily.date[0]\n    one_year = np.timedelta64(1, 'Y')\n    daily['years'] = (daily.date - start) / one_year\n\n    return daily \n```", "```py\n thinkplot.PrePlot(rows=3)\n    for i, (name, daily) in enumerate(dailies.items()):\n        thinkplot.SubPlot(i+1)\n        title = 'price per gram ($)' if i==0 else ''\n        thinkplot.Config(ylim=[0, 20], title=title)\n        thinkplot.Scatter(daily.index, daily.ppg, s=10, label=name)\n        if i == 2:\n            pyplot.xticks(rotation=30)\n        else:\n            thinkplot.Config(xticks=[]) \n```", "```py\ndef RunLinearModel(daily):\n    model = smf.ols('ppg ~ years', data=daily)\n    results = model.fit()\n    return model, results \n```", "```py\n for name, daily in dailies.items():\n        model, results = RunLinearModel(daily)\n        print(name)\n        regression.SummarizeResults(results) \n```", "```py\ndef PlotFittedValues(model, results, label=''):\n    years = model.exog[:,1]\n    values = model.endog\n    thinkplot.Scatter(years, values, s=15, label=label)\n    thinkplot.Plot(years, results.fittedvalues, label='model') \n```", "```py\n>>> series = np.arange(10)\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n>>> pandas.rolling_mean(series, 3)\narray([ nan,  nan,   1,   2,   3,   4,   5,   6,   7,   8]) \n```", "```py\n dates = pandas.date_range(daily.index.min(), daily.index.max())\n    reindexed = daily.reindex(dates) \n```", "```py\n roll_mean = pandas.rolling_mean(reindexed.ppg, 30)\n    thinkplot.Plot(roll_mean.index, roll_mean) \n```", "```py\n ewma = pandas.ewma(reindexed.ppg, span=30)\n    thinkplot.Plot(ewma.index, ewma) \n```", "```py\n reindexed.ppg.fillna(ewma, inplace=True) \n```", "```py\n resid = (reindexed.ppg - ewma).dropna()\n    fake_data = ewma + thinkstats2.Resample(resid, len(reindexed))\n    reindexed.ppg.fillna(fake_data, inplace=True) \n```", "```py\ndef SerialCorr(series, lag=1):\n    xs = series[lag:]\n    ys = series.shift(lag)[lag:]\n    corr = thinkstats2.Corr(xs, ys)\n    return corr \n```", "```py\n ewma = pandas.ewma(reindexed.ppg, span=30)\n    resid = reindexed.ppg - ewma\n    corr = SerialCorr(resid, 1) \n```", "```py\n import statsmodels.tsa.stattools as smtsa\n    acf = smtsa.acf(filled.resid, nlags=365, unbiased=True) \n```", "```py\n>>> acf[0], acf[1], acf[7], acf[30], acf[365]\n1.000, -0.029, 0.020, 0.014, 0.044 \n```", "```py\ndef AddWeeklySeasonality(daily):\n    frisat = (daily.index.dayofweek==4) | (daily.index.dayofweek==5)\n    fake = daily.copy()\n    fake.ppg[frisat] += np.random.uniform(0, 2, frisat.sum())\n    return fake \n```", "```py\ndef GenerateSimplePrediction(results, years):\n    n = len(years)\n    inter = np.ones(n)\n    d = dict(Intercept=inter, years=years)\n    predict_df = pandas.DataFrame(d)\n    predict = results.predict(predict_df)\n    return predict \n```", "```py\ndef SimulateResults(daily, iters=101):\n    model, results = RunLinearModel(daily)\n    fake = daily.copy()\n\n    result_seq = []\n    for i in range(iters):\n        fake.ppg = results.fittedvalues + Resample(results.resid)\n        _, fake_results = RunLinearModel(fake)\n        result_seq.append(fake_results)\n\n    return result_seq \n```", "```py\ndef GeneratePredictions(result_seq, years, add_resid=False):\n    n = len(years)\n    d = dict(Intercept=np.ones(n), years=years, years2=years**2)\n    predict_df = pandas.DataFrame(d)\n\n    predict_seq = []\n    for fake_results in result_seq:\n        predict = fake_results.predict(predict_df)\n        if add_resid:\n            predict += thinkstats2.Resample(fake_results.resid, n)\n        predict_seq.append(predict)\n\n    return predict_seq \n```", "```py\ndef PlotPredictions(daily, years, iters=101, percent=90):\n    result_seq = SimulateResults(daily, iters=iters)\n    p = (100 - percent) / 2\n    percents = p, 100-p\n\n    predict_seq = GeneratePredictions(result_seq, years, True)\n    low, high = thinkstats2.PercentileRows(predict_seq, percents)\n    thinkplot.FillBetween(years, low, high, alpha=0.3, color='gray')\n\n    predict_seq = GeneratePredictions(result_seq, years, False)\n    low, high = thinkstats2.PercentileRows(predict_seq, percents)\n    thinkplot.FillBetween(years, low, high, alpha=0.5, color='gray') \n```"]