["```py\n preg = nsfg.ReadFemPreg()\n    complete = preg.query('outcome in [1, 3, 4]').prglngth\n    cdf = thinkstats2.Cdf(complete, label='cdf') \n```", "```py\nclass SurvivalFunction(object):\n    def __init__(self, cdf, label=''):\n        self.cdf = cdf\n        self.label = label or cdf.label\n\n    @property\n    def ts(self):\n        return self.cdf.xs\n\n    @property\n    def ss(self):\n        return 1 - self.cdf.ps \n```", "```py\n sf = SurvivalFunction(cdf) \n```", "```py\n# class SurvivalFunction\n\n    def __getitem__(self, t):\n        return self.Prob(t)\n\n    def Prob(self, t):\n        return 1 - self.cdf.Prob(t) \n```", "```py\n>>> sf[13]\n0.86022\n>>> cdf[13]\n0.13978 \n```", "```py\n thinkplot.Plot(sf) \n```", "```py\n# class SurvivalFunction\n\n    def MakeHazard(self, label=''):\n        ss = self.ss\n        lams = {}\n        for i, t in enumerate(self.ts[:-1]):\n            hazard = (ss[i] - ss[i+1]) / ss[i]\n            lams[t] = hazard\n\n        return HazardFunction(lams, label=label) \n```", "```py\nclass HazardFunction(object):\n\n    def __init__(self, d, label=''):\n        self.series = pandas.Series(d)\n        self.label = label \n```", "```py\n>>> hf = sf.MakeHazard()\n>>> hf[39]\n0.49689 \n```", "```py\ndef EstimateHazardFunction(complete, ongoing, label=''):\n\n    hist_complete = Counter(complete)\n    hist_ongoing = Counter(ongoing)\n\n    ts = list(hist_complete | hist_ongoing)\n    ts.sort()\n\n    at_risk = len(complete) + len(ongoing)\n\n    lams = pandas.Series(index=ts)\n    for t in ts:\n        ended = hist_complete[t]\n        censored = hist_ongoing[t]\n\n        lams[t] = ended / at_risk\n        at_risk -= ended + censored\n\n    return HazardFunction(lams, label=label) \n```", "```py\n resp = chap01soln.ReadFemResp()\n    resp.cmmarrhx.replace([9997, 9998, 9999], np.nan, inplace=True) \n```", "```py\n resp['agemarry'] = (resp.cmmarrhx - resp.cmbirth) / 12.0\n    resp['age'] = (resp.cmintvw - resp.cmbirth) / 12.0 \n```", "```py\n complete = resp[resp.evrmarry==1].agemarry\n    ongoing = resp[resp.evrmarry==0].age \n```", "```py\n hf = EstimateHazardFunction(complete, ongoing) \n```", "```py\n# class HazardFunction:\n\n    def MakeSurvival(self):\n        ts = self.series.index\n        ss = (1 - self.series).cumprod()\n        cdf = thinkstats2.Cdf(ts, 1-ss)\n        sf = SurvivalFunction(cdf)\n        return sf \n```", "```py\ndef ResampleSurvival(resp, iters=101):\n    low, high = resp.agemarry.min(), resp.agemarry.max()\n    ts = np.arange(low, high, 1/12.0)\n\n    ss_seq = []\n    for i in range(iters):\n        sample = thinkstats2.ResampleRowsWeighted(resp)\n        hf, sf = EstimateSurvival(sample)\n        ss_seq.append(sf.Probs(ts))\n\n    low, high = thinkstats2.PercentileRows(ss_seq, [5, 95])\n    thinkplot.FillBetween(ts, low, high) \n```", "```py\n resp5 = ReadFemResp1995()\n    resp6 = ReadFemResp2002()\n    resp7 = ReadFemResp2010()\n    resps = [resp5, resp6, resp7] \n```", "```py\n month0 = pandas.to_datetime('1899-12-15')\n    dates = [month0 + pandas.DateOffset(months=cm)\n             for cm in resp.cmbirth]\n    resp['decade'] = (pandas.DatetimeIndex(dates).year - 1900) // 10 \n```", "```py\n for i in range(iters):\n        samples = [thinkstats2.ResampleRowsWeighted(resp)\n                   for resp in resps]\n        sample = pandas.concat(samples, ignore_index=True)\n        groups = sample.groupby('decade')\n\n        EstimateSurvivalByDecade(groups, alpha=0.2) \n```", "```py\ndef EstimateSurvivalByDecade(resp):\n    for name, group in groups:\n        hf, sf = EstimateSurvival(group)\n        thinkplot.Plot(sf) \n```", "```py\n# class HazardFunction\n\n    def Extend(self, other):\n        last = self.series.index[-1]\n        more = other.series[other.series.index > last]\n        self.series = pandas.concat([self.series, more]) \n```", "```py\ndef PlotPredictionsByDecade(groups):\n    hfs = []\n    for name, group in groups:\n        hf, sf = EstimateSurvival(group)\n        hfs.append(hf)\n\n    thinkplot.PrePlot(len(hfs))\n    for i, hf in enumerate(hfs):\n        if i > 0:\n            hf.Extend(hfs[i-1])\n        sf = hf.MakeSurvival()\n        thinkplot.Plot(sf) \n```", "```py\n# class SurvivalFunction\n\n    def MakePmf(self, filler=None):\n        pmf = thinkstats2.Pmf()\n        for val, prob in self.cdf.Items():\n            pmf.Set(val, prob)\n\n        cutoff = self.cdf.ps[-1]\n        if filler is not None:\n            pmf[filler] = 1-cutoff\n\n        return pmf \n```", "```py\n# class SurvivalFunction\n\n    def RemainingLifetime(self, filler=None, func=thinkstats2.Pmf.Mean):\n        pmf = self.MakePmf(filler=filler)\n        d = {}\n        for t in sorted(pmf.Values())[:-1]:\n            pmf[t] = 0\n            pmf.Normalize()\n            d[t] = func(pmf) - t\n\n        return pandas.Series(d) \n```", "```py\n rem_life1 = sf1.RemainingLifetime()\n    thinkplot.Plot(rem_life1)\n\n    func = lambda pmf: pmf.Percentile(50)\n    rem_life2 = sf2.RemainingLifetime(filler=np.inf, func=func)\n    thinkplot.Plot(rem_life2) \n```"]