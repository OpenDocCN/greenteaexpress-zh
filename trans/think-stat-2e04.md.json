["```py\nn = hist.Total()\nd = {}\nfor x, freq in hist.Items():\n    d[x] = freq / n \n```", "```py\n>>> import thinkstats2\n>>> pmf = thinkstats2.Pmf([1, 2, 2, 3, 5])\n>>> pmf\nPmf({1: 0.2, 2: 0.4, 3: 0.2, 5: 0.2}) \n```", "```py\n>>> pmf.Prob(2)\n0.4 \n```", "```py\n>>> pmf[2]\n0.4 \n```", "```py\n>>> pmf.Incr(2, 0.2)\n>>> pmf.Prob(2)\n0.6 \n```", "```py\n>>> pmf.Mult(2, 0.5)\n>>> pmf.Prob(2)\n0.3 \n```", "```py\n>>> pmf.Total()\n0.9 \n```", "```py\n>>> pmf.Normalize()\n>>> pmf.Total()\n1.0 \n```", "```py\n thinkplot.PrePlot(2, cols=2)\n    thinkplot.Hist(first_pmf, align='right', width=width)\n    thinkplot.Hist(other_pmf, align='left', width=width)\n    thinkplot.Config(xlabel='weeks',\n                     ylabel='probability',\n                     axis=[27, 46, 0, 0.6])\n\n    thinkplot.PrePlot(2)\n    thinkplot.SubPlot(2)\n    thinkplot.Pmfs([first_pmf, other_pmf])\n    thinkplot.Show(xlabel='weeks',\n                   axis=[27, 46, 0, 0.6]) \n```", "```py\n weeks = range(35, 46)\n    diffs = []\n    for week in weeks:\n        p1 = first_pmf.Prob(week)\n        p2 = other_pmf.Prob(week)\n        diff = 100 * (p1 - p2)\n        diffs.append(diff)\n\n    thinkplot.Bar(weeks, diffs) \n```", "```py\n size      count\n 5- 9          8\n10-14          8\n15-19         14\n20-24          4\n25-29          6\n30-34         12\n35-39          8\n40-44          3\n45-49          2 \n```", "```py\n d = { 7: 8, 12: 8, 17: 14, 22: 4,\n          27: 6, 32: 12, 37: 8, 42: 3, 47: 2 }\n\n    pmf = thinkstats2.Pmf(d, label='actual')\n    print('mean', pmf.Mean()) \n```", "```py\ndef BiasPmf(pmf, label):\n    new_pmf = pmf.Copy(label=label)\n\n    for x, p in pmf.Items():\n        new_pmf.Mult(x, x)\n\n    new_pmf.Normalize()\n    return new_pmf \n```", "```py\n biased_pmf = BiasPmf(pmf, label='observed')\n    thinkplot.PrePlot(2)\n    thinkplot.Pmfs([pmf, biased_pmf])\n    thinkplot.Show(xlabel='class size', ylabel='PMF') \n```", "```py\ndef UnbiasPmf(pmf, label):\n    new_pmf = pmf.Copy(label=label)\n\n    for x, p in pmf.Items():\n        new_pmf.Mult(x, 1.0/x)\n\n    new_pmf.Normalize()\n    return new_pmf \n```", "```py\n>>> import numpy as np\n>>> import pandas\n>>> array = np.random.randn(4, 2)\n>>> df = pandas.DataFrame(array)\n>>> df\n          0         1\n0 -0.143510  0.616050\n1 -1.489647  0.300774\n2 -0.074350  0.039621\n3 -1.369968  0.545897 \n```", "```py\n>>> columns = ['A', 'B']\n>>> df = pandas.DataFrame(array, columns=columns)\n>>> df\n          A         B\n0 -0.143510  0.616050\n1 -1.489647  0.300774\n2 -0.074350  0.039621\n3 -1.369968  0.545897 \n```", "```py\n>>> index = ['a', 'b', 'c', 'd']\n>>> df = pandas.DataFrame(array, columns=columns, index=index)\n>>> df\n          A         B\na -0.143510  0.616050\nb -1.489647  0.300774\nc -0.074350  0.039621\nd -1.369968  0.545897 \n```", "```py\n>>> df['A']\na   -0.143510\nb   -1.489647\nc   -0.074350\nd   -1.369968\nName: A, dtype: float64 \n```", "```py\n>>> df.loc['a']\nA   -0.14351\nB    0.61605\nName: a, dtype: float64 \n```", "```py\n>>> df.iloc[0]\nA   -0.14351\nB    0.61605\nName: a, dtype: float64 \n```", "```py\n>>> indices = ['a', 'c']\n>>> df.loc[indices]\n         A         B\na -0.14351  0.616050\nc -0.07435  0.039621 \n```", "```py\n>>> df['a':'c']\n          A         B\na -0.143510  0.616050\nb -1.489647  0.300774\nc -0.074350  0.039621 \n```", "```py\n>>> df[0:2]\n          A         B\na -0.143510  0.616050\nb -1.489647  0.300774 \n```"]